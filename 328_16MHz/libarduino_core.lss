In archive libarduino_core.a:

malloc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008e8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d4d  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.avr-libc 0000024e  00000000  00000000  00001669  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.__malloc_heap_end 00000002  00000000  00000000  000018b7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.__malloc_heap_start 00000002  00000000  00000000  000018b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.__malloc_margin 00000002  00000000  00000000  000018bb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000012  00000000  00000000  000018bd  2**0
                  CONTENTS, READONLY

Disassembly of section .text.avr-libc:

00000000 <malloc>:
struct __freelist *__flp;

ATTRIBUTE_CLIB_SECTION
void *
malloc(size_t len)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
   4:	82 30       	cpi	r24, 0x02	; 2
   6:	91 05       	cpc	r25, r1
   8:	00 f4       	brcc	.+0      	; 0xa <malloc+0xa>
		len = sizeof(struct __freelist) - sizeof(size_t);
   a:	82 e0       	ldi	r24, 0x02	; 2
   c:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
   e:	e0 91 00 00 	lds	r30, 0x0000
  12:	f0 91 00 00 	lds	r31, 0x0000
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	30 e0       	ldi	r19, 0x00	; 0
  1a:	a0 e0       	ldi	r26, 0x00	; 0
  1c:	b0 e0       	ldi	r27, 0x00	; 0
  1e:	30 97       	sbiw	r30, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <malloc+0x22>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
  22:	40 81       	ld	r20, Z
  24:	51 81       	ldd	r21, Z+1	; 0x01
  26:	48 17       	cp	r20, r24
  28:	59 07       	cpc	r21, r25
  2a:	00 f0       	brcs	.+0      	; 0x2c <malloc+0x2c>
			continue;
		if (fp1->sz == len) {
  2c:	48 17       	cp	r20, r24
  2e:	59 07       	cpc	r21, r25
  30:	01 f4       	brne	.+0      	; 0x32 <malloc+0x32>
  32:	82 81       	ldd	r24, Z+2	; 0x02
  34:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
  36:	10 97       	sbiw	r26, 0x00	; 0
  38:	01 f0       	breq	.+0      	; 0x3a <malloc+0x3a>
				fp2->nx = fp1->nx;
  3a:	13 96       	adiw	r26, 0x03	; 3
  3c:	9c 93       	st	X, r25
  3e:	8e 93       	st	-X, r24
  40:	12 97       	sbiw	r26, 0x02	; 2
  42:	00 c0       	rjmp	.+0      	; 0x44 <malloc+0x44>
			else
				__flp = fp1->nx;
  44:	90 93 00 00 	sts	0x0000, r25
  48:	80 93 00 00 	sts	0x0000, r24
  4c:	00 c0       	rjmp	.+0      	; 0x4e <malloc+0x4e>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
  4e:	21 15       	cp	r18, r1
  50:	31 05       	cpc	r19, r1
  52:	01 f0       	breq	.+0      	; 0x54 <malloc+0x54>
  54:	42 17       	cp	r20, r18
  56:	53 07       	cpc	r21, r19
  58:	00 f0       	brcs	.+0      	; 0x5a <malloc+0x5a>
  5a:	a9 01       	movw	r20, r18
  5c:	db 01       	movw	r26, r22
  5e:	00 c0       	rjmp	.+0      	; 0x60 <malloc+0x60>
  60:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
  62:	9a 01       	movw	r18, r20
  64:	bd 01       	movw	r22, r26
  66:	df 01       	movw	r26, r30
  68:	02 80       	ldd	r0, Z+2	; 0x02
  6a:	f3 81       	ldd	r31, Z+3	; 0x03
  6c:	e0 2d       	mov	r30, r0
  6e:	00 c0       	rjmp	.+0      	; 0x70 <malloc+0x70>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
  70:	21 15       	cp	r18, r1
  72:	31 05       	cpc	r19, r1
  74:	01 f0       	breq	.+0      	; 0x76 <malloc+0x76>
		if (s - len < sizeof(struct __freelist)) {
  76:	28 1b       	sub	r18, r24
  78:	39 0b       	sbc	r19, r25
  7a:	24 30       	cpi	r18, 0x04	; 4
  7c:	31 05       	cpc	r19, r1
  7e:	00 f4       	brcc	.+0      	; 0x80 <malloc+0x80>
  80:	8a 81       	ldd	r24, Y+2	; 0x02
  82:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
  84:	61 15       	cp	r22, r1
  86:	71 05       	cpc	r23, r1
  88:	01 f0       	breq	.+0      	; 0x8a <malloc+0x8a>
				sfp2->nx = sfp1->nx;
  8a:	fb 01       	movw	r30, r22
  8c:	93 83       	std	Z+3, r25	; 0x03
  8e:	82 83       	std	Z+2, r24	; 0x02
  90:	00 c0       	rjmp	.+0      	; 0x92 <malloc+0x92>
			else
				__flp = sfp1->nx;
  92:	90 93 00 00 	sts	0x0000, r25
  96:	80 93 00 00 	sts	0x0000, r24
			return &(sfp1->nx);
  9a:	fe 01       	movw	r30, r28
  9c:	32 96       	adiw	r30, 0x02	; 2
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <malloc+0xa0>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
  a0:	fe 01       	movw	r30, r28
  a2:	e2 0f       	add	r30, r18
  a4:	f3 1f       	adc	r31, r19
  a6:	81 93       	st	Z+, r24
  a8:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
  aa:	22 50       	subi	r18, 0x02	; 2
  ac:	31 09       	sbc	r19, r1
  ae:	39 83       	std	Y+1, r19	; 0x01
  b0:	28 83       	st	Y, r18
		return &(sfp2->nx);
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <malloc+0xb4>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
  b4:	20 91 00 00 	lds	r18, 0x0000
  b8:	30 91 00 00 	lds	r19, 0x0000
  bc:	23 2b       	or	r18, r19
  be:	01 f4       	brne	.+0      	; 0xc0 <malloc+0xc0>
		__brkval = __malloc_heap_start;
  c0:	20 91 00 00 	lds	r18, 0x0000
  c4:	30 91 00 00 	lds	r19, 0x0000
  c8:	30 93 00 00 	sts	0x0000, r19
  cc:	20 93 00 00 	sts	0x0000, r18
	cp = __malloc_heap_end;
  d0:	20 91 00 00 	lds	r18, 0x0000
  d4:	30 91 00 00 	lds	r19, 0x0000
	if (cp == 0)
  d8:	21 15       	cp	r18, r1
  da:	31 05       	cpc	r19, r1
  dc:	01 f4       	brne	.+0      	; 0xde <malloc+0xde>
		cp = STACK_POINTER() - __malloc_margin;
  de:	2d b7       	in	r18, 0x3d	; 61
  e0:	3e b7       	in	r19, 0x3e	; 62
  e2:	40 91 00 00 	lds	r20, 0x0000
  e6:	50 91 00 00 	lds	r21, 0x0000
  ea:	24 1b       	sub	r18, r20
  ec:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
  ee:	e0 91 00 00 	lds	r30, 0x0000
  f2:	f0 91 00 00 	lds	r31, 0x0000
  f6:	e2 17       	cp	r30, r18
  f8:	f3 07       	cpc	r31, r19
  fa:	00 f4       	brcc	.+0      	; 0xfc <malloc+0xfc>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
  fc:	2e 1b       	sub	r18, r30
  fe:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	00 f0       	brcs	.+0      	; 0x106 <malloc+0x106>
 106:	ac 01       	movw	r20, r24
 108:	4e 5f       	subi	r20, 0xFE	; 254
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	24 17       	cp	r18, r20
 10e:	35 07       	cpc	r19, r21
 110:	00 f0       	brcs	.+0      	; 0x112 <malloc+0x112>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
 112:	4e 0f       	add	r20, r30
 114:	5f 1f       	adc	r21, r31
 116:	50 93 00 00 	sts	0x0000, r21
 11a:	40 93 00 00 	sts	0x0000, r20
		fp1->sz = len;
 11e:	81 93       	st	Z+, r24
 120:	91 93       	st	Z+, r25
		return &(fp1->nx);
 122:	00 c0       	rjmp	.+0      	; 0x124 <malloc+0x124>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
 128:	cf 01       	movw	r24, r30
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <free>:


ATTRIBUTE_CLIB_SECTION
void
free(void *p)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	01 f4       	brne	.+0      	; 0x138 <free+0x8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <free+0xa>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
 13a:	fc 01       	movw	r30, r24
 13c:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
 13e:	13 82       	std	Z+3, r1	; 0x03
 140:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
 142:	c0 91 00 00 	lds	r28, 0x0000
 146:	d0 91 00 00 	lds	r29, 0x0000
 14a:	20 97       	sbiw	r28, 0x00	; 0
 14c:	01 f4       	brne	.+0      	; 0x14e <free+0x1e>
		if ((char *)p + fpnew->sz == __brkval)
 14e:	20 81       	ld	r18, Z
 150:	31 81       	ldd	r19, Z+1	; 0x01
 152:	28 0f       	add	r18, r24
 154:	39 1f       	adc	r19, r25
 156:	80 91 00 00 	lds	r24, 0x0000
 15a:	90 91 00 00 	lds	r25, 0x0000
 15e:	82 17       	cp	r24, r18
 160:	93 07       	cpc	r25, r19
 162:	01 f4       	brne	.+0      	; 0x164 <free+0x34>
			__brkval = cpnew;
 164:	f0 93 00 00 	sts	0x0000, r31
 168:	e0 93 00 00 	sts	0x0000, r30
 16c:	00 c0       	rjmp	.+0      	; 0x16e <free+0x3e>
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
 16e:	de 01       	movw	r26, r28
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
 174:	ae 17       	cp	r26, r30
 176:	bf 07       	cpc	r27, r31
 178:	00 f4       	brcc	.+0      	; 0x17a <free+0x4a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
 17a:	12 96       	adiw	r26, 0x02	; 2
 17c:	4d 91       	ld	r20, X+
 17e:	5c 91       	ld	r21, X
 180:	13 97       	sbiw	r26, 0x03	; 3
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
 182:	9d 01       	movw	r18, r26
 184:	41 15       	cp	r20, r1
 186:	51 05       	cpc	r21, r1
 188:	01 f0       	breq	.+0      	; 0x18a <free+0x5a>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
 18a:	da 01       	movw	r26, r20
 18c:	00 c0       	rjmp	.+0      	; 0x18e <free+0x5e>
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
 18e:	b3 83       	std	Z+3, r27	; 0x03
 190:	a2 83       	std	Z+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
 192:	40 81       	ld	r20, Z
 194:	51 81       	ldd	r21, Z+1	; 0x01
 196:	84 0f       	add	r24, r20
 198:	95 1f       	adc	r25, r21
 19a:	8a 17       	cp	r24, r26
 19c:	9b 07       	cpc	r25, r27
 19e:	01 f4       	brne	.+0      	; 0x1a0 <free+0x70>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
 1a0:	8d 91       	ld	r24, X+
 1a2:	9c 91       	ld	r25, X
 1a4:	11 97       	sbiw	r26, 0x01	; 1
 1a6:	84 0f       	add	r24, r20
 1a8:	95 1f       	adc	r25, r21
 1aa:	02 96       	adiw	r24, 0x02	; 2
 1ac:	91 83       	std	Z+1, r25	; 0x01
 1ae:	80 83       	st	Z, r24
			fpnew->nx = fp1->nx;
 1b0:	12 96       	adiw	r26, 0x02	; 2
 1b2:	8d 91       	ld	r24, X+
 1b4:	9c 91       	ld	r25, X
 1b6:	13 97       	sbiw	r26, 0x03	; 3
 1b8:	93 83       	std	Z+3, r25	; 0x03
 1ba:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
 1bc:	21 15       	cp	r18, r1
 1be:	31 05       	cpc	r19, r1
 1c0:	01 f4       	brne	.+0      	; 0x1c2 <free+0x92>
			/* new head of freelist */
			__flp = fpnew;
 1c2:	f0 93 00 00 	sts	0x0000, r31
 1c6:	e0 93 00 00 	sts	0x0000, r30
			return;
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <free+0x9c>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
 1cc:	d9 01       	movw	r26, r18
 1ce:	13 96       	adiw	r26, 0x03	; 3
 1d0:	fc 93       	st	X, r31
 1d2:	ee 93       	st	-X, r30
 1d4:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
 1d6:	4d 91       	ld	r20, X+
 1d8:	5d 91       	ld	r21, X+
 1da:	a4 0f       	add	r26, r20
 1dc:	b5 1f       	adc	r27, r21
 1de:	ea 17       	cp	r30, r26
 1e0:	fb 07       	cpc	r31, r27
 1e2:	01 f4       	brne	.+0      	; 0x1e4 <free+0xb4>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
 1e4:	80 81       	ld	r24, Z
 1e6:	91 81       	ldd	r25, Z+1	; 0x01
 1e8:	84 0f       	add	r24, r20
 1ea:	95 1f       	adc	r25, r21
 1ec:	02 96       	adiw	r24, 0x02	; 2
 1ee:	d9 01       	movw	r26, r18
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	9c 93       	st	X, r25
 1f4:	8e 93       	st	-X, r24
		fp2->nx = fpnew->nx;
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	93 81       	ldd	r25, Z+3	; 0x03
 1fa:	13 96       	adiw	r26, 0x03	; 3
 1fc:	9c 93       	st	X, r25
 1fe:	8e 93       	st	-X, r24
 200:	12 97       	sbiw	r26, 0x02	; 2
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
 202:	e0 e0       	ldi	r30, 0x00	; 0
 204:	f0 e0       	ldi	r31, 0x00	; 0
	     fp1->nx != 0;
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	9b 81       	ldd	r25, Y+3	; 0x03
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	01 f0       	breq	.+0      	; 0x20e <free+0xde>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
 20e:	fe 01       	movw	r30, r28
 210:	ec 01       	movw	r28, r24
 212:	00 c0       	rjmp	.+0      	; 0x214 <free+0xe4>
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
 214:	ce 01       	movw	r24, r28
 216:	02 96       	adiw	r24, 0x02	; 2
	if (cp2 + fp1->sz == __brkval) {
 218:	28 81       	ld	r18, Y
 21a:	39 81       	ldd	r19, Y+1	; 0x01
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	20 91 00 00 	lds	r18, 0x0000
 224:	30 91 00 00 	lds	r19, 0x0000
 228:	28 17       	cp	r18, r24
 22a:	39 07       	cpc	r19, r25
 22c:	01 f4       	brne	.+0      	; 0x22e <free+0xfe>
		if (fp2 == NULL)
 22e:	30 97       	sbiw	r30, 0x00	; 0
 230:	01 f4       	brne	.+0      	; 0x232 <free+0x102>
			/* Freelist is empty now. */
			__flp = NULL;
 232:	10 92 00 00 	sts	0x0000, r1
 236:	10 92 00 00 	sts	0x0000, r1
 23a:	00 c0       	rjmp	.+0      	; 0x23c <free+0x10c>
		else
			fp2->nx = NULL;
 23c:	13 82       	std	Z+3, r1	; 0x03
 23e:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
 240:	d0 93 00 00 	sts	0x0000, r29
 244:	c0 93 00 00 	sts	0x0000, r28
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

realloc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000744  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ccd  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.avr-libc 000001d2  00000000  00000000  00001445  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000012  00000000  00000000  00001617  2**0
                  CONTENTS, READONLY

Disassembly of section .text.avr-libc:

00000000 <realloc>:
#include <avr/io.h>

ATTRIBUTE_CLIB_SECTION
void *
realloc(void *ptr, size_t len)
{
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	ec 01       	movw	r28, r24
  1e:	cb 01       	movw	r24, r22
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
  20:	20 97       	sbiw	r28, 0x00	; 0
  22:	01 f4       	brne	.+0      	; 0x24 <realloc+0x24>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
  24:	df 91       	pop	r29
  26:	cf 91       	pop	r28
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	ff 90       	pop	r15
  2e:	ef 90       	pop	r14
  30:	df 90       	pop	r13
  32:	cf 90       	pop	r12
  34:	bf 90       	pop	r11
  36:	af 90       	pop	r10
  38:	9f 90       	pop	r9
  3a:	8f 90       	pop	r8
  3c:	7f 90       	pop	r7
  3e:	6f 90       	pop	r6
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
  40:	0c 94 00 00 	jmp	0	; 0x0 <realloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
  44:	fe 01       	movw	r30, r28
  46:	e6 0f       	add	r30, r22
  48:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
  4a:	9e 01       	movw	r18, r28
  4c:	22 50       	subi	r18, 0x02	; 2
  4e:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
  50:	e2 17       	cp	r30, r18
  52:	f3 07       	cpc	r31, r19
  54:	00 f4       	brcc	.+0      	; 0x56 <realloc+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <realloc+0x58>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
  58:	d9 01       	movw	r26, r18
  5a:	0d 91       	ld	r16, X+
  5c:	1c 91       	ld	r17, X
  5e:	11 97       	sbiw	r26, 0x01	; 1
  60:	06 17       	cp	r16, r22
  62:	17 07       	cpc	r17, r23
  64:	00 f0       	brcs	.+0      	; 0x66 <realloc+0x66>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  66:	05 30       	cpi	r16, 0x05	; 5
  68:	11 05       	cpc	r17, r1
  6a:	00 f4       	brcc	.+0      	; 0x6c <realloc+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <realloc+0x6e>
		    len > fp1->sz - sizeof(struct __freelist))
  6e:	a8 01       	movw	r20, r16
  70:	44 50       	subi	r20, 0x04	; 4
  72:	51 09       	sbc	r21, r1
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  74:	46 17       	cp	r20, r22
  76:	57 07       	cpc	r21, r23
  78:	00 f4       	brcc	.+0      	; 0x7a <realloc+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <realloc+0x7c>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
  7c:	02 50       	subi	r16, 0x02	; 2
  7e:	11 09       	sbc	r17, r1
  80:	06 1b       	sub	r16, r22
  82:	17 0b       	sbc	r17, r23
  84:	01 93       	st	Z+, r16
  86:	11 93       	st	Z+, r17
		fp1->sz = len;
  88:	6d 93       	st	X+, r22
  8a:	7c 93       	st	X, r23
		free(&(fp2->nx));
  8c:	cf 01       	movw	r24, r30
  8e:	0e 94 00 00 	call	0	; 0x0 <realloc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <realloc+0x94>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
  94:	5b 01       	movw	r10, r22
  96:	a0 1a       	sub	r10, r16
  98:	b1 0a       	sbc	r11, r17
	cp = (char *)ptr + fp1->sz;
  9a:	4e 01       	movw	r8, r28
  9c:	80 0e       	add	r8, r16
  9e:	91 1e       	adc	r9, r17
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
  a0:	a0 91 00 00 	lds	r26, 0x0000
  a4:	b0 91 00 00 	lds	r27, 0x0000
  a8:	61 2c       	mov	r6, r1
  aa:	71 2c       	mov	r7, r1
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	10 97       	sbiw	r26, 0x00	; 0
  b2:	01 f4       	brne	.+0      	; 0xb4 <realloc+0xb4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <realloc+0xb6>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
  b6:	a8 15       	cp	r26, r8
  b8:	b9 05       	cpc	r27, r9
  ba:	01 f4       	brne	.+0      	; 0xbc <realloc+0xbc>
  bc:	ed 90       	ld	r14, X+
  be:	fc 90       	ld	r15, X
  c0:	11 97       	sbiw	r26, 0x01	; 1
  c2:	67 01       	movw	r12, r14
  c4:	42 e0       	ldi	r20, 0x02	; 2
  c6:	c4 0e       	add	r12, r20
  c8:	d1 1c       	adc	r13, r1
  ca:	ca 14       	cp	r12, r10
  cc:	db 04       	cpc	r13, r11
  ce:	00 f0       	brcs	.+0      	; 0xd0 <realloc+0xd0>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
  d0:	47 01       	movw	r8, r14
  d2:	8a 18       	sub	r8, r10
  d4:	9b 08       	sbc	r9, r11
  d6:	64 01       	movw	r12, r8
  d8:	42 e0       	ldi	r20, 0x02	; 2
  da:	c4 0e       	add	r12, r20
  dc:	d1 1c       	adc	r13, r1
  de:	12 96       	adiw	r26, 0x02	; 2
  e0:	bc 90       	ld	r11, X
  e2:	12 97       	sbiw	r26, 0x02	; 2
  e4:	13 96       	adiw	r26, 0x03	; 3
  e6:	ac 91       	ld	r26, X
  e8:	b5 e0       	ldi	r27, 0x05	; 5
  ea:	cb 16       	cp	r12, r27
  ec:	d1 04       	cpc	r13, r1
  ee:	00 f0       	brcs	.+0      	; 0xf0 <realloc+0xf0>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
  f0:	b2 82       	std	Z+2, r11	; 0x02
  f2:	a3 83       	std	Z+3, r26	; 0x03
				fp2->sz = fp3->sz - incr;
  f4:	91 82       	std	Z+1, r9	; 0x01
  f6:	80 82       	st	Z, r8
				fp1->sz = len;
  f8:	d9 01       	movw	r26, r18
  fa:	8d 93       	st	X+, r24
  fc:	9c 93       	st	X, r25
  fe:	00 c0       	rjmp	.+0      	; 0x100 <realloc+0x100>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
 100:	0e 5f       	subi	r16, 0xFE	; 254
 102:	1f 4f       	sbci	r17, 0xFF	; 255
 104:	0e 0d       	add	r16, r14
 106:	1f 1d       	adc	r17, r15
 108:	f9 01       	movw	r30, r18
 10a:	11 83       	std	Z+1, r17	; 0x01
 10c:	00 83       	st	Z, r16
				fp2 = fp3->nx;
 10e:	eb 2d       	mov	r30, r11
 110:	fa 2f       	mov	r31, r26
			}
			if (ofp3)
 112:	61 15       	cp	r22, r1
 114:	71 05       	cpc	r23, r1
 116:	01 f0       	breq	.+0      	; 0x118 <realloc+0x118>
				ofp3->nx = fp2;
 118:	db 01       	movw	r26, r22
 11a:	13 96       	adiw	r26, 0x03	; 3
 11c:	fc 93       	st	X, r31
 11e:	ee 93       	st	-X, r30
 120:	12 97       	sbiw	r26, 0x02	; 2
 122:	00 c0       	rjmp	.+0      	; 0x124 <realloc+0x124>
			else
				__flp = fp2;
 124:	f0 93 00 00 	sts	0x0000, r31
 128:	e0 93 00 00 	sts	0x0000, r30
 12c:	00 c0       	rjmp	.+0      	; 0x12e <realloc+0x12e>
		}
		/*
		 * Find the largest chunk on the freelist while
		 * walking it.
		 */
		if (fp3->sz > s)
 12e:	6d 91       	ld	r22, X+
 130:	7c 91       	ld	r23, X
 132:	11 97       	sbiw	r26, 0x01	; 1
 134:	66 16       	cp	r6, r22
 136:	77 06       	cpc	r7, r23
 138:	00 f4       	brcc	.+0      	; 0x13a <realloc+0x13a>
 13a:	3b 01       	movw	r6, r22
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
 13c:	bd 01       	movw	r22, r26
 13e:	12 96       	adiw	r26, 0x02	; 2
 140:	0d 90       	ld	r0, X+
 142:	bc 91       	ld	r27, X
 144:	a0 2d       	mov	r26, r0
 146:	00 c0       	rjmp	.+0      	; 0x148 <realloc+0x148>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
 148:	60 91 00 00 	lds	r22, 0x0000
 14c:	70 91 00 00 	lds	r23, 0x0000
 150:	68 15       	cp	r22, r8
 152:	79 05       	cpc	r23, r9
 154:	01 f4       	brne	.+0      	; 0x156 <realloc+0x156>
 156:	68 16       	cp	r6, r24
 158:	79 06       	cpc	r7, r25
 15a:	00 f4       	brcc	.+0      	; 0x15c <realloc+0x15c>
		cp1 = __malloc_heap_end;
 15c:	40 91 00 00 	lds	r20, 0x0000
 160:	50 91 00 00 	lds	r21, 0x0000
		cp = (char *)ptr + len;
		if (cp1 == 0)
 164:	41 15       	cp	r20, r1
 166:	51 05       	cpc	r21, r1
 168:	01 f4       	brne	.+0      	; 0x16a <realloc+0x16a>
			cp1 = STACK_POINTER() - __malloc_margin;
 16a:	4d b7       	in	r20, 0x3d	; 61
 16c:	5e b7       	in	r21, 0x3e	; 62
 16e:	60 91 00 00 	lds	r22, 0x0000
 172:	70 91 00 00 	lds	r23, 0x0000
 176:	46 1b       	sub	r20, r22
 178:	57 0b       	sbc	r21, r23
		if (cp < cp1) {
 17a:	e4 17       	cp	r30, r20
 17c:	f5 07       	cpc	r31, r21
 17e:	00 f4       	brcc	.+0      	; 0x180 <realloc+0x180>
			__brkval = cp;
 180:	f0 93 00 00 	sts	0x0000, r31
 184:	e0 93 00 00 	sts	0x0000, r30
			fp1->sz = len;
 188:	f9 01       	movw	r30, r18
 18a:	91 83       	std	Z+1, r25	; 0x01
 18c:	80 83       	st	Z, r24
 18e:	00 c0       	rjmp	.+0      	; 0x190 <realloc+0x190>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
 190:	0e 94 00 00 	call	0	; 0x0 <realloc>
 194:	7c 01       	movw	r14, r24
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	01 f0       	breq	.+0      	; 0x19a <realloc+0x19a>
		return 0;
	memcpy(memp, ptr, fp1->sz);
 19a:	a8 01       	movw	r20, r16
 19c:	be 01       	movw	r22, r28
 19e:	0e 94 00 00 	call	0	; 0x0 <realloc>
	free(ptr);
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 00 00 	call	0	; 0x0 <realloc>
	return memp;
 1a8:	c7 01       	movw	r24, r14
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <realloc+0x1ac>
 1ac:	ce 01       	movw	r24, r28
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <realloc+0x1b0>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	df 90       	pop	r13
 1c2:	cf 90       	pop	r12
 1c4:	bf 90       	pop	r11
 1c6:	af 90       	pop	r10
 1c8:	9f 90       	pop	r9
 1ca:	8f 90       	pop	r8
 1cc:	7f 90       	pop	r7
 1ce:	6f 90       	pop	r6
 1d0:	08 95       	ret

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000066c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001094  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000066c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001094  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         00000ffc  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      00001770  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZN14HardwareSerial9availableEv 00000028  00000000  00000000  000027b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN14HardwareSerial4peekEv 00000032  00000000  00000000  000027d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN14HardwareSerial4readEv 00000040  00000000  00000000  0000280a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN14HardwareSerial5flushEv 00000016  00000000  00000000  0000284a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN14HardwareSerial5writeEh 0000007a  00000000  00000000  00002860  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._Z11serialEventv 00000002  00000000  00000000  000028da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.__vector_18 00000074  00000000  00000000  000028dc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._Z14serialEventRunv 00000012  00000000  00000000  00002950  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.__vector_19 00000076  00000000  00000000  00002962  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh 00000088  00000000  00000000  000029d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN14HardwareSerial5beginEm 00000102  00000000  00000000  00002a60  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN14HardwareSerial5beginEmh 0000010c  00000000  00000000  00002b62  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN14HardwareSerial3endEv 000000aa  00000000  00000000  00002c6e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN14HardwareSerialcvbEv 00000004  00000000  00000000  00002d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.startup._GLOBAL__sub_I_rx_buffer 000000ac  00000000  00000000  00002d1c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .ctors        00000002  00000000  00000000  00002dc8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 23 .rodata._ZTV6Stream 00000010  00000000  00000000  00002dca  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 24 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  00002dda  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 25 .bss.Serial   00000022  00000000  00000000  00002dea  2**0
                  ALLOC
 26 .bss.tx_buffer 00000044  00000000  00000000  00002dea  2**0
                  ALLOC
 27 .bss.rx_buffer 00000044  00000000  00000000  00002dea  2**0
                  ALLOC
 28 .comment      00000012  00000000  00000000  00002dea  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   0:	fc 01       	movw	r30, r24
   2:	24 85       	ldd	r18, Z+12	; 0x0c
   4:	35 85       	ldd	r19, Z+13	; 0x0d
   6:	f9 01       	movw	r30, r18
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	32 96       	adiw	r30, 0x02	; 2
  12:	20 81       	ld	r18, Z
  14:	31 81       	ldd	r19, Z+1	; 0x01
  16:	80 5c       	subi	r24, 0xC0	; 192
  18:	9f 4f       	sbci	r25, 0xFF	; 255
  1a:	82 1b       	sub	r24, r18
  1c:	93 0b       	sbc	r25, r19
  1e:	60 e4       	ldi	r22, 0x40	; 64

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	70 e0       	ldi	r23, 0x00	; 0
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial9availableEv>
  26:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000028 <_ZN14HardwareSerial4peekEv>:
  28:	fc 01       	movw	r30, r24
  2a:	84 85       	ldd	r24, Z+12	; 0x0c
{
  _rx_buffer = rx_buffer;
  2c:	95 85       	ldd	r25, Z+13	; 0x0d
  2e:	fc 01       	movw	r30, r24
  30:	e0 5c       	subi	r30, 0xC0	; 192
  32:	ff 4f       	sbci	r31, 0xFF	; 255
  34:	40 81       	ld	r20, Z
  36:	51 81       	ldd	r21, Z+1	; 0x01
  _tx_buffer = tx_buffer;
  38:	32 96       	adiw	r30, 0x02	; 2
  3a:	20 81       	ld	r18, Z
  3c:	31 81       	ldd	r19, Z+1	; 0x01
  3e:	42 17       	cp	r20, r18
  40:	53 07       	cpc	r21, r19
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN14HardwareSerial4peekEv+0x1c>
  _ubrrh = ubrrh;
  44:	01 90       	ld	r0, Z+
  46:	f0 81       	ld	r31, Z
  48:	e0 2d       	mov	r30, r0
  4a:	e8 0f       	add	r30, r24
  4c:	f9 1f       	adc	r31, r25
  4e:	80 81       	ld	r24, Z
  _ubrrl = ubrrl;
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	08 95       	ret
  54:	8f ef       	ldi	r24, 0xFF	; 255
  56:	9f ef       	ldi	r25, 0xFF	; 255
  58:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4readEv:

00000082 <_ZN14HardwareSerial4readEv>:
  _ucsra = ucsra;
  _ucsrb = ucsrb;
  _ucsrc = ucsrc;
  _udr = udr;
  82:	fc 01       	movw	r30, r24
  84:	84 85       	ldd	r24, Z+12	; 0x0c
  86:	95 85       	ldd	r25, Z+13	; 0x0d
  88:	fc 01       	movw	r30, r24
  8a:	e0 5c       	subi	r30, 0xC0	; 192
  _rxen = rxen;
  8c:	ff 4f       	sbci	r31, 0xFF	; 255
  8e:	40 81       	ld	r20, Z
  90:	51 81       	ldd	r21, Z+1	; 0x01
  _txen = txen;
  92:	32 96       	adiw	r30, 0x02	; 2
  94:	20 81       	ld	r18, Z
  96:	31 81       	ldd	r19, Z+1	; 0x01
  _rxcie = rxcie;
  98:	42 17       	cp	r20, r18
  9a:	53 07       	cpc	r21, r19
  9c:	01 f0       	breq	.+0      	; 0x9e <_ZN14HardwareSerial4readEv+0x1c>
  _udrie = udrie;
  9e:	a0 81       	ld	r26, Z
  a0:	b1 81       	ldd	r27, Z+1	; 0x01
  a2:	a8 0f       	add	r26, r24
  _u2x = u2x;
  a4:	b9 1f       	adc	r27, r25
  a6:	8c 91       	ld	r24, X
  a8:	20 81       	ld	r18, Z
  aa:	31 81       	ldd	r19, Z+1	; 0x01
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	2f 73       	andi	r18, 0x3F	; 63
  b2:	33 27       	eor	r19, r19
  b4:	31 83       	std	Z+1, r19	; 0x01
  b6:	20 83       	st	Z, r18
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	9f ef       	ldi	r25, 0xFF	; 255
  c0:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000144 <_ZN14HardwareSerial5flushEv>:
 144:	fc 01       	movw	r30, r24
 146:	81 a1       	ldd	r24, Z+33	; 0x21
 148:	88 23       	and	r24, r24
 14a:	01 f0       	breq	.+0      	; 0x14c <_ZN14HardwareSerial5flushEv+0x8>
 14c:	a4 89       	ldd	r26, Z+20	; 0x14
 14e:	b5 89       	ldd	r27, Z+21	; 0x15
 150:	8c 91       	ld	r24, X
 152:	86 ff       	sbrs	r24, 6
 154:	00 c0       	rjmp	.+0      	; 0x156 <_ZN14HardwareSerial5flushEv+0x12>
 156:	11 a2       	std	Z+33, r1	; 0x21
 158:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5writeEh:

0000029e <_ZN14HardwareSerial5writeEh>:
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	fc 01       	movw	r30, r24
 2a4:	26 85       	ldd	r18, Z+14	; 0x0e
 2a6:	37 85       	ldd	r19, Z+15	; 0x0f
 2a8:	d9 01       	movw	r26, r18
 2aa:	a0 5c       	subi	r26, 0xC0	; 192
 2ac:	bf 4f       	sbci	r27, 0xFF	; 255
 2ae:	8d 91       	ld	r24, X+
 2b0:	9c 91       	ld	r25, X
 2b2:	11 97       	sbiw	r26, 0x01	; 1
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	8f 73       	andi	r24, 0x3F	; 63
 2b8:	99 27       	eor	r25, r25
 2ba:	e9 01       	movw	r28, r18
 2bc:	ce 5b       	subi	r28, 0xBE	; 190
 2be:	df 4f       	sbci	r29, 0xFF	; 255
 2c0:	48 81       	ld	r20, Y
 2c2:	59 81       	ldd	r21, Y+1	; 0x01
 2c4:	84 17       	cp	r24, r20
 2c6:	95 07       	cpc	r25, r21
 2c8:	01 f0       	breq	.+0      	; 0x2ca <_ZN14HardwareSerial5writeEh+0x2c>
 2ca:	0d 90       	ld	r0, X+
 2cc:	bc 91       	ld	r27, X
 2ce:	a0 2d       	mov	r26, r0
 2d0:	a2 0f       	add	r26, r18
 2d2:	b3 1f       	adc	r27, r19
 2d4:	6c 93       	st	X, r22
 2d6:	a6 85       	ldd	r26, Z+14	; 0x0e
 2d8:	b7 85       	ldd	r27, Z+15	; 0x0f
 2da:	a0 5c       	subi	r26, 0xC0	; 192
 2dc:	bf 4f       	sbci	r27, 0xFF	; 255
 2de:	11 96       	adiw	r26, 0x01	; 1
 2e0:	9c 93       	st	X, r25
 2e2:	8e 93       	st	-X, r24
 2e4:	a6 89       	ldd	r26, Z+22	; 0x16
 2e6:	b7 89       	ldd	r27, Z+23	; 0x17
 2e8:	2c 91       	ld	r18, X
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	07 8c       	ldd	r0, Z+31	; 0x1f
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <_ZN14HardwareSerial5writeEh+0x54>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	0a 94       	dec	r0
 2f8:	02 f4       	brpl	.+0      	; 0x2fa <_ZN14HardwareSerial5writeEh+0x5c>
 2fa:	28 2b       	or	r18, r24
 2fc:	2c 93       	st	X, r18
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	81 a3       	std	Z+33, r24	; 0x21
 302:	04 88       	ldd	r0, Z+20	; 0x14
 304:	f5 89       	ldd	r31, Z+21	; 0x15
 306:	e0 2d       	mov	r30, r0
 308:	80 81       	ld	r24, Z
 30a:	80 64       	ori	r24, 0x40	; 64
 30c:	80 83       	st	Z, r24
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

Disassembly of section .text._Z11serialEventv:

000005b6 <_Z11serialEventv>:
 5b6:	08 95       	ret

Disassembly of section .text.__vector_18:

00000b6e <__vector_18>:
 b6e:	1f 92       	push	r1
 b70:	0f 92       	push	r0
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	0f 92       	push	r0
 b76:	11 24       	eor	r1, r1
 b78:	2f 93       	push	r18
 b7a:	3f 93       	push	r19
 b7c:	4f 93       	push	r20
 b7e:	8f 93       	push	r24
 b80:	9f 93       	push	r25
 b82:	ef 93       	push	r30
 b84:	ff 93       	push	r31
 b86:	80 91 c0 00 	lds	r24, 0x00C0
 b8a:	82 fd       	sbrc	r24, 2
 b8c:	00 c0       	rjmp	.+0      	; 0xb8e <__vector_18+0x20>
 b8e:	40 91 c6 00 	lds	r20, 0x00C6
 b92:	80 91 00 00 	lds	r24, 0x0000
 b96:	90 91 00 00 	lds	r25, 0x0000
 b9a:	01 96       	adiw	r24, 0x01	; 1
 b9c:	8f 73       	andi	r24, 0x3F	; 63
 b9e:	99 27       	eor	r25, r25
 ba0:	20 91 00 00 	lds	r18, 0x0000
 ba4:	30 91 00 00 	lds	r19, 0x0000
 ba8:	82 17       	cp	r24, r18
 baa:	93 07       	cpc	r25, r19
 bac:	01 f0       	breq	.+0      	; 0xbae <__vector_18+0x40>
 bae:	e0 91 00 00 	lds	r30, 0x0000
 bb2:	f0 91 00 00 	lds	r31, 0x0000
 bb6:	e0 50       	subi	r30, 0x00	; 0
 bb8:	f0 40       	sbci	r31, 0x00	; 0
 bba:	40 83       	st	Z, r20
 bbc:	90 93 00 00 	sts	0x0000, r25
 bc0:	80 93 00 00 	sts	0x0000, r24
 bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <__vector_18+0x58>
 bc6:	80 91 c6 00 	lds	r24, 0x00C6
 bca:	ff 91       	pop	r31
 bcc:	ef 91       	pop	r30
 bce:	9f 91       	pop	r25
 bd0:	8f 91       	pop	r24
 bd2:	4f 91       	pop	r20
 bd4:	3f 91       	pop	r19
 bd6:	2f 91       	pop	r18
 bd8:	0f 90       	pop	r0
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	0f 90       	pop	r0
 bde:	1f 90       	pop	r1
 be0:	18 95       	reti

Disassembly of section .text._Z14serialEventRunv:

00001750 <_Z14serialEventRunv>:
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1758:	89 2b       	or	r24, r25
    175a:	01 f0       	breq	.+0      	; 0x175c <_Z14serialEventRunv+0xc>
    175c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
    1760:	08 95       	ret

Disassembly of section .text.__vector_19:

00002eb2 <__vector_19>:
    2eb2:	1f 92       	push	r1
    2eb4:	0f 92       	push	r0
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	0f 92       	push	r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	2f 93       	push	r18
    2ebe:	3f 93       	push	r19
    2ec0:	8f 93       	push	r24
    2ec2:	9f 93       	push	r25
    2ec4:	ef 93       	push	r30
    2ec6:	ff 93       	push	r31
    2ec8:	20 91 00 00 	lds	r18, 0x0000
    2ecc:	30 91 00 00 	lds	r19, 0x0000
    2ed0:	80 91 00 00 	lds	r24, 0x0000
    2ed4:	90 91 00 00 	lds	r25, 0x0000
    2ed8:	28 17       	cp	r18, r24
    2eda:	39 07       	cpc	r19, r25
    2edc:	01 f4       	brne	.+0      	; 0x2ede <__vector_19+0x2c>
    2ede:	80 91 c1 00 	lds	r24, 0x00C1
    2ee2:	8f 7d       	andi	r24, 0xDF	; 223
    2ee4:	80 93 c1 00 	sts	0x00C1, r24
    2ee8:	00 c0       	rjmp	.+0      	; 0x2eea <__vector_19+0x38>
    2eea:	e0 91 00 00 	lds	r30, 0x0000
    2eee:	f0 91 00 00 	lds	r31, 0x0000
    2ef2:	e0 50       	subi	r30, 0x00	; 0
    2ef4:	f0 40       	sbci	r31, 0x00	; 0
    2ef6:	20 81       	ld	r18, Z
    2ef8:	80 91 00 00 	lds	r24, 0x0000
    2efc:	90 91 00 00 	lds	r25, 0x0000
    2f00:	01 96       	adiw	r24, 0x01	; 1
    2f02:	8f 73       	andi	r24, 0x3F	; 63
    2f04:	99 27       	eor	r25, r25
    2f06:	90 93 00 00 	sts	0x0000, r25
    2f0a:	80 93 00 00 	sts	0x0000, r24
    2f0e:	20 93 c6 00 	sts	0x00C6, r18
    2f12:	ff 91       	pop	r31
    2f14:	ef 91       	pop	r30
    2f16:	9f 91       	pop	r25
    2f18:	8f 91       	pop	r24
    2f1a:	3f 91       	pop	r19
    2f1c:	2f 91       	pop	r18
    2f1e:	0f 90       	pop	r0
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	0f 90       	pop	r0
    2f24:	1f 90       	pop	r1
    2f26:	18 95       	reti

Disassembly of section .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh:

00005dda <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    5dda:	8f 92       	push	r8
    5ddc:	9f 92       	push	r9
    5dde:	af 92       	push	r10
    5de0:	bf 92       	push	r11
    5de2:	cf 92       	push	r12
    5de4:	df 92       	push	r13
    5de6:	ef 92       	push	r14
    5de8:	ff 92       	push	r15
    5dea:	0f 93       	push	r16
    5dec:	1f 93       	push	r17
    5dee:	cf 93       	push	r28
    5df0:	df 93       	push	r29
    5df2:	cd b7       	in	r28, 0x3d	; 61
    5df4:	de b7       	in	r29, 0x3e	; 62
    5df6:	fc 01       	movw	r30, r24
    5df8:	13 82       	std	Z+3, r1	; 0x03
    5dfa:	12 82       	std	Z+2, r1	; 0x02
    5dfc:	88 ee       	ldi	r24, 0xE8	; 232
    5dfe:	93 e0       	ldi	r25, 0x03	; 3
    5e00:	a0 e0       	ldi	r26, 0x00	; 0
    5e02:	b0 e0       	ldi	r27, 0x00	; 0
    5e04:	84 83       	std	Z+4, r24	; 0x04
    5e06:	95 83       	std	Z+5, r25	; 0x05
    5e08:	a6 83       	std	Z+6, r26	; 0x06
    5e0a:	b7 83       	std	Z+7, r27	; 0x07
    5e0c:	80 e0       	ldi	r24, 0x00	; 0
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	91 83       	std	Z+1, r25	; 0x01
    5e12:	80 83       	st	Z, r24
    5e14:	75 87       	std	Z+13, r23	; 0x0d
    5e16:	64 87       	std	Z+12, r22	; 0x0c
    5e18:	57 87       	std	Z+15, r21	; 0x0f
    5e1a:	46 87       	std	Z+14, r20	; 0x0e
    5e1c:	31 8b       	std	Z+17, r19	; 0x11
    5e1e:	20 8b       	std	Z+16, r18	; 0x10
    5e20:	13 8b       	std	Z+19, r17	; 0x13
    5e22:	02 8b       	std	Z+18, r16	; 0x12
    5e24:	f5 8a       	std	Z+21, r15	; 0x15
    5e26:	e4 8a       	std	Z+20, r14	; 0x14
    5e28:	d7 8a       	std	Z+23, r13	; 0x17
    5e2a:	c6 8a       	std	Z+22, r12	; 0x16
    5e2c:	b1 8e       	std	Z+25, r11	; 0x19
    5e2e:	a0 8e       	std	Z+24, r10	; 0x18
    5e30:	93 8e       	std	Z+27, r9	; 0x1b
    5e32:	82 8e       	std	Z+26, r8	; 0x1a
    5e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e36:	84 8f       	std	Z+28, r24	; 0x1c
    5e38:	88 89       	ldd	r24, Y+16	; 0x10
    5e3a:	85 8f       	std	Z+29, r24	; 0x1d
    5e3c:	89 89       	ldd	r24, Y+17	; 0x11
    5e3e:	86 8f       	std	Z+30, r24	; 0x1e
    5e40:	8a 89       	ldd	r24, Y+18	; 0x12
    5e42:	87 8f       	std	Z+31, r24	; 0x1f
    5e44:	8b 89       	ldd	r24, Y+19	; 0x13
    5e46:	80 a3       	std	Z+32, r24	; 0x20
    5e48:	df 91       	pop	r29
    5e4a:	cf 91       	pop	r28
    5e4c:	1f 91       	pop	r17
    5e4e:	0f 91       	pop	r16
    5e50:	ff 90       	pop	r15
    5e52:	ef 90       	pop	r14
    5e54:	df 90       	pop	r13
    5e56:	cf 90       	pop	r12
    5e58:	bf 90       	pop	r11
    5e5a:	af 90       	pop	r10
    5e5c:	9f 90       	pop	r9
    5e5e:	8f 90       	pop	r8
    5e60:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEm:

0000bc3c <_ZN14HardwareSerial5beginEm>:
    bc3c:	cf 92       	push	r12
    bc3e:	df 92       	push	r13
    bc40:	ef 92       	push	r14
    bc42:	ff 92       	push	r15
    bc44:	cf 93       	push	r28
    bc46:	df 93       	push	r29
    bc48:	ec 01       	movw	r28, r24
    bc4a:	6a 01       	movw	r12, r20
    bc4c:	7b 01       	movw	r14, r22
    bc4e:	41 15       	cp	r20, r1
    bc50:	81 ee       	ldi	r24, 0xE1	; 225
    bc52:	58 07       	cpc	r21, r24
    bc54:	61 05       	cpc	r22, r1
    bc56:	71 05       	cpc	r23, r1
    bc58:	01 f0       	breq	.+0      	; 0xbc5a <_ZN14HardwareSerial5beginEm+0x1e>
    bc5a:	ec 89       	ldd	r30, Y+20	; 0x14
    bc5c:	fd 89       	ldd	r31, Y+21	; 0x15
    bc5e:	81 e0       	ldi	r24, 0x01	; 1
    bc60:	90 e0       	ldi	r25, 0x00	; 0
    bc62:	08 a0       	ldd	r0, Y+32	; 0x20
    bc64:	00 c0       	rjmp	.+0      	; 0xbc66 <_ZN14HardwareSerial5beginEm+0x2a>
    bc66:	88 0f       	add	r24, r24
    bc68:	99 1f       	adc	r25, r25
    bc6a:	0a 94       	dec	r0
    bc6c:	02 f4       	brpl	.+0      	; 0xbc6e <_ZN14HardwareSerial5beginEm+0x32>
    bc6e:	80 83       	st	Z, r24
    bc70:	60 e0       	ldi	r22, 0x00	; 0
    bc72:	79 e0       	ldi	r23, 0x09	; 9
    bc74:	8d e3       	ldi	r24, 0x3D	; 61
    bc76:	90 e0       	ldi	r25, 0x00	; 0
    bc78:	a7 01       	movw	r20, r14
    bc7a:	96 01       	movw	r18, r12
    bc7c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    bc80:	21 50       	subi	r18, 0x01	; 1
    bc82:	31 09       	sbc	r19, r1
    bc84:	41 09       	sbc	r20, r1
    bc86:	51 09       	sbc	r21, r1
    bc88:	56 95       	lsr	r21
    bc8a:	47 95       	ror	r20
    bc8c:	37 95       	ror	r19
    bc8e:	27 95       	ror	r18
    bc90:	21 15       	cp	r18, r1
    bc92:	80 e1       	ldi	r24, 0x10	; 16
    bc94:	38 07       	cpc	r19, r24
    bc96:	00 f0       	brcs	.+0      	; 0xbc98 <_ZN14HardwareSerial5beginEm+0x5c>
    bc98:	ec 89       	ldd	r30, Y+20	; 0x14
    bc9a:	fd 89       	ldd	r31, Y+21	; 0x15
    bc9c:	10 82       	st	Z, r1
    bc9e:	60 e8       	ldi	r22, 0x80	; 128
    bca0:	74 e8       	ldi	r23, 0x84	; 132
    bca2:	8e e1       	ldi	r24, 0x1E	; 30
    bca4:	90 e0       	ldi	r25, 0x00	; 0
    bca6:	a7 01       	movw	r20, r14
    bca8:	96 01       	movw	r18, r12
    bcaa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    bcae:	21 50       	subi	r18, 0x01	; 1
    bcb0:	31 09       	sbc	r19, r1
    bcb2:	41 09       	sbc	r20, r1
    bcb4:	51 09       	sbc	r21, r1
    bcb6:	56 95       	lsr	r21
    bcb8:	47 95       	ror	r20
    bcba:	37 95       	ror	r19
    bcbc:	27 95       	ror	r18
    bcbe:	e8 89       	ldd	r30, Y+16	; 0x10
    bcc0:	f9 89       	ldd	r31, Y+17	; 0x11
    bcc2:	30 83       	st	Z, r19
    bcc4:	ea 89       	ldd	r30, Y+18	; 0x12
    bcc6:	fb 89       	ldd	r31, Y+19	; 0x13
    bcc8:	20 83       	st	Z, r18
    bcca:	19 a2       	std	Y+33, r1	; 0x21
    bccc:	ee 89       	ldd	r30, Y+22	; 0x16
    bcce:	ff 89       	ldd	r31, Y+23	; 0x17
    bcd0:	40 81       	ld	r20, Z
    bcd2:	81 e0       	ldi	r24, 0x01	; 1
    bcd4:	90 e0       	ldi	r25, 0x00	; 0
    bcd6:	9c 01       	movw	r18, r24
    bcd8:	0c 8c       	ldd	r0, Y+28	; 0x1c
    bcda:	00 c0       	rjmp	.+0      	; 0xbcdc <_ZN14HardwareSerial5beginEm+0xa0>
    bcdc:	22 0f       	add	r18, r18
    bcde:	33 1f       	adc	r19, r19
    bce0:	0a 94       	dec	r0
    bce2:	02 f4       	brpl	.+0      	; 0xbce4 <_ZN14HardwareSerial5beginEm+0xa8>
    bce4:	42 2b       	or	r20, r18
    bce6:	40 83       	st	Z, r20
    bce8:	ee 89       	ldd	r30, Y+22	; 0x16
    bcea:	ff 89       	ldd	r31, Y+23	; 0x17
    bcec:	40 81       	ld	r20, Z
    bcee:	9c 01       	movw	r18, r24
    bcf0:	0d 8c       	ldd	r0, Y+29	; 0x1d
    bcf2:	00 c0       	rjmp	.+0      	; 0xbcf4 <_ZN14HardwareSerial5beginEm+0xb8>
    bcf4:	22 0f       	add	r18, r18
    bcf6:	33 1f       	adc	r19, r19
    bcf8:	0a 94       	dec	r0
    bcfa:	02 f4       	brpl	.+0      	; 0xbcfc <_ZN14HardwareSerial5beginEm+0xc0>
    bcfc:	42 2b       	or	r20, r18
    bcfe:	40 83       	st	Z, r20
    bd00:	ee 89       	ldd	r30, Y+22	; 0x16
    bd02:	ff 89       	ldd	r31, Y+23	; 0x17
    bd04:	40 81       	ld	r20, Z
    bd06:	9c 01       	movw	r18, r24
    bd08:	0e 8c       	ldd	r0, Y+30	; 0x1e
    bd0a:	00 c0       	rjmp	.+0      	; 0xbd0c <_ZN14HardwareSerial5beginEm+0xd0>
    bd0c:	22 0f       	add	r18, r18
    bd0e:	33 1f       	adc	r19, r19
    bd10:	0a 94       	dec	r0
    bd12:	02 f4       	brpl	.+0      	; 0xbd14 <_ZN14HardwareSerial5beginEm+0xd8>
    bd14:	42 2b       	or	r20, r18
    bd16:	40 83       	st	Z, r20
    bd18:	ee 89       	ldd	r30, Y+22	; 0x16
    bd1a:	ff 89       	ldd	r31, Y+23	; 0x17
    bd1c:	20 81       	ld	r18, Z
    bd1e:	0f 8c       	ldd	r0, Y+31	; 0x1f
    bd20:	00 c0       	rjmp	.+0      	; 0xbd22 <_ZN14HardwareSerial5beginEm+0xe6>
    bd22:	88 0f       	add	r24, r24
    bd24:	99 1f       	adc	r25, r25
    bd26:	0a 94       	dec	r0
    bd28:	02 f4       	brpl	.+0      	; 0xbd2a <_ZN14HardwareSerial5beginEm+0xee>
    bd2a:	80 95       	com	r24
    bd2c:	82 23       	and	r24, r18
    bd2e:	80 83       	st	Z, r24
    bd30:	df 91       	pop	r29
    bd32:	cf 91       	pop	r28
    bd34:	ff 90       	pop	r15
    bd36:	ef 90       	pop	r14
    bd38:	df 90       	pop	r13
    bd3a:	cf 90       	pop	r12
    bd3c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEmh:

0001797a <_ZN14HardwareSerial5beginEmh>:
   1797a:	bf 92       	push	r11
   1797c:	cf 92       	push	r12
   1797e:	df 92       	push	r13
   17980:	ef 92       	push	r14
   17982:	ff 92       	push	r15
   17984:	cf 93       	push	r28
   17986:	df 93       	push	r29
   17988:	ec 01       	movw	r28, r24
   1798a:	6a 01       	movw	r12, r20
   1798c:	7b 01       	movw	r14, r22
   1798e:	b2 2e       	mov	r11, r18
   17990:	41 15       	cp	r20, r1
   17992:	81 ee       	ldi	r24, 0xE1	; 225
   17994:	58 07       	cpc	r21, r24
   17996:	61 05       	cpc	r22, r1
   17998:	71 05       	cpc	r23, r1
   1799a:	01 f0       	breq	.+0      	; 0x1799c <_ZN14HardwareSerial5beginEmh+0x22>
   1799c:	ec 89       	ldd	r30, Y+20	; 0x14
   1799e:	fd 89       	ldd	r31, Y+21	; 0x15
   179a0:	81 e0       	ldi	r24, 0x01	; 1
   179a2:	90 e0       	ldi	r25, 0x00	; 0
   179a4:	08 a0       	ldd	r0, Y+32	; 0x20
   179a6:	00 c0       	rjmp	.+0      	; 0x179a8 <_ZN14HardwareSerial5beginEmh+0x2e>
   179a8:	88 0f       	add	r24, r24
   179aa:	99 1f       	adc	r25, r25
   179ac:	0a 94       	dec	r0
   179ae:	02 f4       	brpl	.+0      	; 0x179b0 <_ZN14HardwareSerial5beginEmh+0x36>
   179b0:	80 83       	st	Z, r24
   179b2:	60 e0       	ldi	r22, 0x00	; 0
   179b4:	79 e0       	ldi	r23, 0x09	; 9
   179b6:	8d e3       	ldi	r24, 0x3D	; 61
   179b8:	90 e0       	ldi	r25, 0x00	; 0
   179ba:	a7 01       	movw	r20, r14
   179bc:	96 01       	movw	r18, r12
   179be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   179c2:	21 50       	subi	r18, 0x01	; 1
   179c4:	31 09       	sbc	r19, r1
   179c6:	41 09       	sbc	r20, r1
   179c8:	51 09       	sbc	r21, r1
   179ca:	56 95       	lsr	r21
   179cc:	47 95       	ror	r20
   179ce:	37 95       	ror	r19
   179d0:	27 95       	ror	r18
   179d2:	21 15       	cp	r18, r1
   179d4:	80 e1       	ldi	r24, 0x10	; 16
   179d6:	38 07       	cpc	r19, r24
   179d8:	00 f0       	brcs	.+0      	; 0x179da <_ZN14HardwareSerial5beginEmh+0x60>
   179da:	ec 89       	ldd	r30, Y+20	; 0x14
   179dc:	fd 89       	ldd	r31, Y+21	; 0x15
   179de:	10 82       	st	Z, r1
   179e0:	60 e8       	ldi	r22, 0x80	; 128
   179e2:	74 e8       	ldi	r23, 0x84	; 132
   179e4:	8e e1       	ldi	r24, 0x1E	; 30
   179e6:	90 e0       	ldi	r25, 0x00	; 0
   179e8:	a7 01       	movw	r20, r14
   179ea:	96 01       	movw	r18, r12
   179ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   179f0:	21 50       	subi	r18, 0x01	; 1
   179f2:	31 09       	sbc	r19, r1
   179f4:	41 09       	sbc	r20, r1
   179f6:	51 09       	sbc	r21, r1
   179f8:	56 95       	lsr	r21
   179fa:	47 95       	ror	r20
   179fc:	37 95       	ror	r19
   179fe:	27 95       	ror	r18
   17a00:	e8 89       	ldd	r30, Y+16	; 0x10
   17a02:	f9 89       	ldd	r31, Y+17	; 0x11
   17a04:	30 83       	st	Z, r19
   17a06:	ea 89       	ldd	r30, Y+18	; 0x12
   17a08:	fb 89       	ldd	r31, Y+19	; 0x13
   17a0a:	20 83       	st	Z, r18
   17a0c:	e8 8d       	ldd	r30, Y+24	; 0x18
   17a0e:	f9 8d       	ldd	r31, Y+25	; 0x19
   17a10:	b0 82       	st	Z, r11
   17a12:	ee 89       	ldd	r30, Y+22	; 0x16
   17a14:	ff 89       	ldd	r31, Y+23	; 0x17
   17a16:	40 81       	ld	r20, Z
   17a18:	81 e0       	ldi	r24, 0x01	; 1
   17a1a:	90 e0       	ldi	r25, 0x00	; 0
   17a1c:	9c 01       	movw	r18, r24
   17a1e:	0c 8c       	ldd	r0, Y+28	; 0x1c
   17a20:	00 c0       	rjmp	.+0      	; 0x17a22 <_ZN14HardwareSerial5beginEmh+0xa8>
   17a22:	22 0f       	add	r18, r18
   17a24:	33 1f       	adc	r19, r19
   17a26:	0a 94       	dec	r0
   17a28:	02 f4       	brpl	.+0      	; 0x17a2a <_ZN14HardwareSerial5beginEmh+0xb0>
   17a2a:	42 2b       	or	r20, r18
   17a2c:	40 83       	st	Z, r20
   17a2e:	ee 89       	ldd	r30, Y+22	; 0x16
   17a30:	ff 89       	ldd	r31, Y+23	; 0x17
   17a32:	40 81       	ld	r20, Z
   17a34:	9c 01       	movw	r18, r24
   17a36:	0d 8c       	ldd	r0, Y+29	; 0x1d
   17a38:	00 c0       	rjmp	.+0      	; 0x17a3a <_ZN14HardwareSerial5beginEmh+0xc0>
   17a3a:	22 0f       	add	r18, r18
   17a3c:	33 1f       	adc	r19, r19
   17a3e:	0a 94       	dec	r0
   17a40:	02 f4       	brpl	.+0      	; 0x17a42 <_ZN14HardwareSerial5beginEmh+0xc8>
   17a42:	42 2b       	or	r20, r18
   17a44:	40 83       	st	Z, r20
   17a46:	ee 89       	ldd	r30, Y+22	; 0x16
   17a48:	ff 89       	ldd	r31, Y+23	; 0x17
   17a4a:	40 81       	ld	r20, Z
   17a4c:	9c 01       	movw	r18, r24
   17a4e:	0e 8c       	ldd	r0, Y+30	; 0x1e
   17a50:	00 c0       	rjmp	.+0      	; 0x17a52 <_ZN14HardwareSerial5beginEmh+0xd8>
   17a52:	22 0f       	add	r18, r18
   17a54:	33 1f       	adc	r19, r19
   17a56:	0a 94       	dec	r0
   17a58:	02 f4       	brpl	.+0      	; 0x17a5a <_ZN14HardwareSerial5beginEmh+0xe0>
   17a5a:	42 2b       	or	r20, r18
   17a5c:	40 83       	st	Z, r20
   17a5e:	ee 89       	ldd	r30, Y+22	; 0x16
   17a60:	ff 89       	ldd	r31, Y+23	; 0x17
   17a62:	20 81       	ld	r18, Z
   17a64:	0f 8c       	ldd	r0, Y+31	; 0x1f
   17a66:	00 c0       	rjmp	.+0      	; 0x17a68 <_ZN14HardwareSerial5beginEmh+0xee>
   17a68:	88 0f       	add	r24, r24
   17a6a:	99 1f       	adc	r25, r25
   17a6c:	0a 94       	dec	r0
   17a6e:	02 f4       	brpl	.+0      	; 0x17a70 <_ZN14HardwareSerial5beginEmh+0xf6>
   17a70:	80 95       	com	r24
   17a72:	82 23       	and	r24, r18
   17a74:	80 83       	st	Z, r24
   17a76:	df 91       	pop	r29
   17a78:	cf 91       	pop	r28
   17a7a:	ff 90       	pop	r15
   17a7c:	ef 90       	pop	r14
   17a7e:	df 90       	pop	r13
   17a80:	cf 90       	pop	r12
   17a82:	bf 90       	pop	r11
   17a84:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial3endEv:

0002f400 <_ZN14HardwareSerial3endEv>:
   2f400:	cf 93       	push	r28
   2f402:	df 93       	push	r29
   2f404:	fc 01       	movw	r30, r24
   2f406:	86 85       	ldd	r24, Z+14	; 0x0e
   2f408:	97 85       	ldd	r25, Z+15	; 0x0f
   2f40a:	dc 01       	movw	r26, r24
   2f40c:	a0 5c       	subi	r26, 0xC0	; 192
   2f40e:	bf 4f       	sbci	r27, 0xFF	; 255
   2f410:	ec 01       	movw	r28, r24
   2f412:	ce 5b       	subi	r28, 0xBE	; 190
   2f414:	df 4f       	sbci	r29, 0xFF	; 255
   2f416:	4d 91       	ld	r20, X+
   2f418:	5c 91       	ld	r21, X
   2f41a:	11 97       	sbiw	r26, 0x01	; 1
   2f41c:	28 81       	ld	r18, Y
   2f41e:	39 81       	ldd	r19, Y+1	; 0x01
   2f420:	42 17       	cp	r20, r18
   2f422:	53 07       	cpc	r21, r19
   2f424:	01 f4       	brne	.+0      	; 0x2f426 <_ZN14HardwareSerial3endEv+0x26>
   2f426:	a6 89       	ldd	r26, Z+22	; 0x16
   2f428:	b7 89       	ldd	r27, Z+23	; 0x17
   2f42a:	4c 91       	ld	r20, X
   2f42c:	81 e0       	ldi	r24, 0x01	; 1
   2f42e:	90 e0       	ldi	r25, 0x00	; 0
   2f430:	9c 01       	movw	r18, r24
   2f432:	04 8c       	ldd	r0, Z+28	; 0x1c
   2f434:	00 c0       	rjmp	.+0      	; 0x2f436 <_ZN14HardwareSerial3endEv+0x36>
   2f436:	22 0f       	add	r18, r18
   2f438:	33 1f       	adc	r19, r19
   2f43a:	0a 94       	dec	r0
   2f43c:	02 f4       	brpl	.+0      	; 0x2f43e <_ZN14HardwareSerial3endEv+0x3e>
   2f43e:	20 95       	com	r18
   2f440:	24 23       	and	r18, r20
   2f442:	2c 93       	st	X, r18
   2f444:	a6 89       	ldd	r26, Z+22	; 0x16
   2f446:	b7 89       	ldd	r27, Z+23	; 0x17
   2f448:	4c 91       	ld	r20, X
   2f44a:	9c 01       	movw	r18, r24
   2f44c:	05 8c       	ldd	r0, Z+29	; 0x1d
   2f44e:	00 c0       	rjmp	.+0      	; 0x2f450 <_ZN14HardwareSerial3endEv+0x50>
   2f450:	22 0f       	add	r18, r18
   2f452:	33 1f       	adc	r19, r19
   2f454:	0a 94       	dec	r0
   2f456:	02 f4       	brpl	.+0      	; 0x2f458 <_ZN14HardwareSerial3endEv+0x58>
   2f458:	20 95       	com	r18
   2f45a:	24 23       	and	r18, r20
   2f45c:	2c 93       	st	X, r18
   2f45e:	a6 89       	ldd	r26, Z+22	; 0x16
   2f460:	b7 89       	ldd	r27, Z+23	; 0x17
   2f462:	4c 91       	ld	r20, X
   2f464:	9c 01       	movw	r18, r24
   2f466:	06 8c       	ldd	r0, Z+30	; 0x1e
   2f468:	00 c0       	rjmp	.+0      	; 0x2f46a <_ZN14HardwareSerial3endEv+0x6a>
   2f46a:	22 0f       	add	r18, r18
   2f46c:	33 1f       	adc	r19, r19
   2f46e:	0a 94       	dec	r0
   2f470:	02 f4       	brpl	.+0      	; 0x2f472 <_ZN14HardwareSerial3endEv+0x72>
   2f472:	20 95       	com	r18
   2f474:	24 23       	and	r18, r20
   2f476:	2c 93       	st	X, r18
   2f478:	a6 89       	ldd	r26, Z+22	; 0x16
   2f47a:	b7 89       	ldd	r27, Z+23	; 0x17
   2f47c:	2c 91       	ld	r18, X
   2f47e:	07 8c       	ldd	r0, Z+31	; 0x1f
   2f480:	00 c0       	rjmp	.+0      	; 0x2f482 <_ZN14HardwareSerial3endEv+0x82>
   2f482:	88 0f       	add	r24, r24
   2f484:	99 1f       	adc	r25, r25
   2f486:	0a 94       	dec	r0
   2f488:	02 f4       	brpl	.+0      	; 0x2f48a <_ZN14HardwareSerial3endEv+0x8a>
   2f48a:	80 95       	com	r24
   2f48c:	82 23       	and	r24, r18
   2f48e:	8c 93       	st	X, r24
   2f490:	84 85       	ldd	r24, Z+12	; 0x0c
   2f492:	95 85       	ldd	r25, Z+13	; 0x0d
   2f494:	fc 01       	movw	r30, r24
   2f496:	ee 5b       	subi	r30, 0xBE	; 190
   2f498:	ff 4f       	sbci	r31, 0xFF	; 255
   2f49a:	20 81       	ld	r18, Z
   2f49c:	31 81       	ldd	r19, Z+1	; 0x01
   2f49e:	32 97       	sbiw	r30, 0x02	; 2
   2f4a0:	31 83       	std	Z+1, r19	; 0x01
   2f4a2:	20 83       	st	Z, r18
   2f4a4:	df 91       	pop	r29
   2f4a6:	cf 91       	pop	r28
   2f4a8:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerialcvbEv:

0005e8aa <_ZN14HardwareSerialcvbEv>:
   5e8aa:	81 e0       	ldi	r24, 0x01	; 1
   5e8ac:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I_rx_buffer:

000bd158 <_GLOBAL__sub_I_rx_buffer>:
   bd158:	10 92 00 00 	sts	0x0000, r1
   bd15c:	10 92 00 00 	sts	0x0000, r1
   bd160:	88 ee       	ldi	r24, 0xE8	; 232
   bd162:	93 e0       	ldi	r25, 0x03	; 3
   bd164:	a0 e0       	ldi	r26, 0x00	; 0
   bd166:	b0 e0       	ldi	r27, 0x00	; 0
   bd168:	80 93 00 00 	sts	0x0000, r24
   bd16c:	90 93 00 00 	sts	0x0000, r25
   bd170:	a0 93 00 00 	sts	0x0000, r26
   bd174:	b0 93 00 00 	sts	0x0000, r27
   bd178:	80 e0       	ldi	r24, 0x00	; 0
   bd17a:	90 e0       	ldi	r25, 0x00	; 0
   bd17c:	90 93 00 00 	sts	0x0000, r25
   bd180:	80 93 00 00 	sts	0x0000, r24
   bd184:	80 e0       	ldi	r24, 0x00	; 0
   bd186:	90 e0       	ldi	r25, 0x00	; 0
   bd188:	90 93 00 00 	sts	0x0000, r25
   bd18c:	80 93 00 00 	sts	0x0000, r24
   bd190:	80 e0       	ldi	r24, 0x00	; 0
   bd192:	90 e0       	ldi	r25, 0x00	; 0
   bd194:	90 93 00 00 	sts	0x0000, r25
   bd198:	80 93 00 00 	sts	0x0000, r24
   bd19c:	85 ec       	ldi	r24, 0xC5	; 197
   bd19e:	90 e0       	ldi	r25, 0x00	; 0
   bd1a0:	90 93 00 00 	sts	0x0000, r25
   bd1a4:	80 93 00 00 	sts	0x0000, r24
   bd1a8:	84 ec       	ldi	r24, 0xC4	; 196
   bd1aa:	90 e0       	ldi	r25, 0x00	; 0
   bd1ac:	90 93 00 00 	sts	0x0000, r25
   bd1b0:	80 93 00 00 	sts	0x0000, r24
   bd1b4:	80 ec       	ldi	r24, 0xC0	; 192
   bd1b6:	90 e0       	ldi	r25, 0x00	; 0
   bd1b8:	90 93 00 00 	sts	0x0000, r25
   bd1bc:	80 93 00 00 	sts	0x0000, r24
   bd1c0:	81 ec       	ldi	r24, 0xC1	; 193
   bd1c2:	90 e0       	ldi	r25, 0x00	; 0
   bd1c4:	90 93 00 00 	sts	0x0000, r25
   bd1c8:	80 93 00 00 	sts	0x0000, r24
   bd1cc:	82 ec       	ldi	r24, 0xC2	; 194
   bd1ce:	90 e0       	ldi	r25, 0x00	; 0
   bd1d0:	90 93 00 00 	sts	0x0000, r25
   bd1d4:	80 93 00 00 	sts	0x0000, r24
   bd1d8:	86 ec       	ldi	r24, 0xC6	; 198
   bd1da:	90 e0       	ldi	r25, 0x00	; 0
   bd1dc:	90 93 00 00 	sts	0x0000, r25
   bd1e0:	80 93 00 00 	sts	0x0000, r24
   bd1e4:	84 e0       	ldi	r24, 0x04	; 4
   bd1e6:	80 93 00 00 	sts	0x0000, r24
   bd1ea:	83 e0       	ldi	r24, 0x03	; 3
   bd1ec:	80 93 00 00 	sts	0x0000, r24
   bd1f0:	87 e0       	ldi	r24, 0x07	; 7
   bd1f2:	80 93 00 00 	sts	0x0000, r24
   bd1f6:	85 e0       	ldi	r24, 0x05	; 5
   bd1f8:	80 93 00 00 	sts	0x0000, r24
   bd1fc:	81 e0       	ldi	r24, 0x01	; 1
   bd1fe:	80 93 00 00 	sts	0x0000, r24
   bd202:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         000009f0  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      000013a1  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZNK9IPAddress7printToER5Print 00000074  00000000  00000000  00001dd5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9IPAddressC2Ev 00000014  00000000  00000000  00001e49  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN9IPAddressC2Ehhhh 00000018  00000000  00000000  00001e5d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9IPAddressC2Em 00000014  00000000  00000000  00001e75  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9IPAddressC2EPKh 00000020  00000000  00000000  00001e89  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9IPAddressaSEPKh 00000016  00000000  00000000  00001ea9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text._ZN9IPAddressaSEm 0000000c  00000000  00000000  00001ebf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text._ZN9IPAddresseqEPKh 0000001e  00000000  00000000  00001ecb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev 0000001e  00000000  00000000  00001ee9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .ctors        00000002  00000000  00000000  00001f08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 17 .rodata._ZTV9Printable 00000006  00000000  00000000  00001f0a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 18 .rodata._ZTV9IPAddress 00000006  00000000  00000000  00001f10  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 19 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  00001f16  2**0
                  ALLOC
 20 .comment      00000012  00000000  00000000  00001f16  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
{
    _address[0] = first_octet;
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
    _address[1] = second_octet;
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
    _address[2] = third_octet;
  14:	6c 01       	movw	r12, r24
  16:	7b 01       	movw	r14, r22
    _address[3] = fourth_octet;
  18:	c0 e0       	ldi	r28, 0x00	; 0
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	00 e0       	ldi	r16, 0x00	; 0
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	f6 01       	movw	r30, r12
  22:	ec 0f       	add	r30, r28
  24:	fd 1f       	adc	r31, r29
  26:	4a e0       	ldi	r20, 0x0A	; 10
  28:	50 e0       	ldi	r21, 0x00	; 0
  2a:	62 81       	ldd	r22, Z+2	; 0x02
  2c:	c7 01       	movw	r24, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  32:	5c 01       	movw	r10, r24
  34:	6e e2       	ldi	r22, 0x2E	; 46
  36:	c7 01       	movw	r24, r14
  38:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  3c:	8a 0d       	add	r24, r10
  3e:	9b 1d       	adc	r25, r11
  40:	08 0f       	add	r16, r24
  42:	19 1f       	adc	r17, r25
  44:	21 96       	adiw	r28, 0x01	; 1
  46:	c3 30       	cpi	r28, 0x03	; 3
  48:	d1 05       	cpc	r29, r1
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZNK9IPAddress7printToER5Print+0x4c>
  4c:	4a e0       	ldi	r20, 0x0A	; 10
  4e:	50 e0       	ldi	r21, 0x00	; 0
  50:	f6 01       	movw	r30, r12
  52:	65 81       	ldd	r22, Z+5	; 0x05
  54:	c7 01       	movw	r24, r14
  56:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  5a:	80 0f       	add	r24, r16
  5c:	91 1f       	adc	r25, r17
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	ff 90       	pop	r15
  68:	ef 90       	pop	r14
  6a:	df 90       	pop	r13
  6c:	cf 90       	pop	r12
  6e:	bf 90       	pop	r11
  70:	af 90       	pop	r10
  72:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ev:

00000074 <_ZN9IPAddressC1Ev>:
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	31 83       	std	Z+1, r19	; 0x01
  7c:	20 83       	st	Z, r18
  7e:	12 82       	std	Z+2, r1	; 0x02
  80:	13 82       	std	Z+3, r1	; 0x03
  82:	14 82       	std	Z+4, r1	; 0x04
  84:	15 82       	std	Z+5, r1	; 0x05
  86:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ehhhh:

000000fc <_ZN9IPAddressC1Ehhhh>:
  fc:	0f 93       	push	r16
  fe:	fc 01       	movw	r30, r24
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	91 83       	std	Z+1, r25	; 0x01
 106:	80 83       	st	Z, r24
 108:	62 83       	std	Z+2, r22	; 0x02
 10a:	43 83       	std	Z+3, r20	; 0x03
 10c:	24 83       	std	Z+4, r18	; 0x04
 10e:	05 83       	std	Z+5, r16	; 0x05
 110:	0f 91       	pop	r16
 112:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Em:

00000210 <_ZN9IPAddressC1Em>:
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	31 83       	std	Z+1, r19	; 0x01
 218:	20 83       	st	Z, r18
 21a:	42 83       	std	Z+2, r20	; 0x02
 21c:	53 83       	std	Z+3, r21	; 0x03
 21e:	64 83       	std	Z+4, r22	; 0x04
 220:	75 83       	std	Z+5, r23	; 0x05
 222:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2EPKh:

00000434 <_ZN9IPAddressC1EPKh>:
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	31 83       	std	Z+1, r19	; 0x01
 43c:	20 83       	st	Z, r18
 43e:	fb 01       	movw	r30, r22
 440:	40 81       	ld	r20, Z
 442:	51 81       	ldd	r21, Z+1	; 0x01
 444:	62 81       	ldd	r22, Z+2	; 0x02
 446:	73 81       	ldd	r23, Z+3	; 0x03
 448:	fc 01       	movw	r30, r24
 44a:	42 83       	std	Z+2, r20	; 0x02
 44c:	53 83       	std	Z+3, r21	; 0x03
 44e:	64 83       	std	Z+4, r22	; 0x04
 450:	75 83       	std	Z+5, r23	; 0x05
 452:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEPKh:

00000888 <_ZN9IPAddressaSEPKh>:
 888:	fb 01       	movw	r30, r22
 88a:	40 81       	ld	r20, Z
 88c:	51 81       	ldd	r21, Z+1	; 0x01
 88e:	62 81       	ldd	r22, Z+2	; 0x02
 890:	73 81       	ldd	r23, Z+3	; 0x03
 892:	fc 01       	movw	r30, r24
 894:	42 83       	std	Z+2, r20	; 0x02
 896:	53 83       	std	Z+3, r21	; 0x03
 898:	64 83       	std	Z+4, r22	; 0x04
 89a:	75 83       	std	Z+5, r23	; 0x05
 89c:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEm:

00001126 <_ZN9IPAddressaSEm>:
    1126:	fc 01       	movw	r30, r24
    1128:	42 83       	std	Z+2, r20	; 0x02
    112a:	53 83       	std	Z+3, r21	; 0x03
    112c:	64 83       	std	Z+4, r22	; 0x04
    112e:	75 83       	std	Z+5, r23	; 0x05
    1130:	08 95       	ret

Disassembly of section .text._ZN9IPAddresseqEPKh:

00002258 <_ZN9IPAddresseqEPKh>:
    2258:	9b 01       	movw	r18, r22
    225a:	bc 01       	movw	r22, r24
    225c:	6e 5f       	subi	r22, 0xFE	; 254
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	44 e0       	ldi	r20, 0x04	; 4
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	c9 01       	movw	r24, r18
    2266:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    226a:	21 e0       	ldi	r18, 0x01	; 1
    226c:	89 2b       	or	r24, r25
    226e:	01 f0       	breq	.+0      	; 0x2270 <_ZN9IPAddresseqEPKh+0x18>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	82 2f       	mov	r24, r18
    2274:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev:

000044ce <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	90 93 00 00 	sts	0x0000, r25
    44d6:	80 93 00 00 	sts	0x0000, r24
    44da:	10 92 00 00 	sts	0x0000, r1
    44de:	10 92 00 00 	sts	0x0000, r1
    44e2:	10 92 00 00 	sts	0x0000, r1
    44e6:	10 92 00 00 	sts	0x0000, r1
    44ea:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         000012c0  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      0000182d  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZN5Print5writeEPKhj 00000050  00000000  00000000  00002b31  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Print5writeEPKc 0000002c  00000000  00000000  00002b81  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN5Print5printEPK19__FlashStringHelper 0000004a  00000000  00000000  00002bad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN5Print5printERK6String 0000001c  00000000  00000000  00002bf7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._ZN5Print5printEPKc 00000004  00000000  00000000  00002c13  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Print5printEc 0000000e  00000000  00000000  00002c17  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text._ZN5Print5printERK9Printable 00000014  00000000  00000000  00002c25  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text._ZN5Print7printlnEv 00000028  00000000  00000000  00002c39  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000024  00000000  00000000  00002c61  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print7printlnERK6String 00000024  00000000  00000000  00002c85  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print7printlnEPKc 00000024  00000000  00000000  00002ca9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print7printlnEc 00000024  00000000  00000000  00002ccd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print7printlnERK9Printable 00000024  00000000  00000000  00002cf1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print11printNumberEmh 000000b2  00000000  00000000  00002d15  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print5printEli 00000094  00000000  00000000  00002dc7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print5printEii 00000010  00000000  00000000  00002e5b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print7printlnEii 00000030  00000000  00000000  00002e6b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print7printlnEli 00000024  00000000  00000000  00002e9b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print5printEmi 0000001a  00000000  00000000  00002ebf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print5printEhi 0000000e  00000000  00000000  00002ed9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print7printlnEhi 0000002e  00000000  00000000  00002ee7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print5printEji 0000000c  00000000  00000000  00002f15  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print7printlnEji 0000002c  00000000  00000000  00002f21  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print7printlnEmi 00000024  00000000  00000000  00002f4d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .rodata.str1.1 0000000e  00000000  00000000  00002f71  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 32 .text._ZN5Print10printFloatEdh 000001d6  00000000  00000000  00002f7f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN5Print5printEdi 00000004  00000000  00000000  00003155  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN5Print7printlnEdi 00000024  00000000  00000000  00003159  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .rodata._ZTV5Print 00000008  00000000  00000000  0000317d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 36 .comment      00000012  00000000  00000000  00003185  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	6c 01       	movw	r12, r24
  12:	7a 01       	movw	r14, r20
  14:	eb 01       	movw	r28, r22
  return n;
}
  16:	e6 0e       	add	r14, r22
  18:	f7 1e       	adc	r15, r23
  1a:	00 e0       	ldi	r16, 0x00	; 0
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	ce 15       	cp	r28, r14
  20:	df 05       	cpc	r29, r15
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN5Print5writeEPKhj+0x24>
  24:	69 91       	ld	r22, Y+
  26:	d6 01       	movw	r26, r12
  28:	ed 91       	ld	r30, X+
  2a:	fc 91       	ld	r31, X
  2c:	01 90       	ld	r0, Z+
  2e:	f0 81       	ld	r31, Z
  30:	e0 2d       	mov	r30, r0
  32:	c6 01       	movw	r24, r12
  34:	09 95       	icall
  36:	08 0f       	add	r16, r24
  38:	19 1f       	adc	r17, r25
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN5Print5writeEPKhj+0x3c>
  3c:	c8 01       	movw	r24, r16
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	1f 91       	pop	r17
  44:	0f 91       	pop	r16
  46:	ff 90       	pop	r15
  48:	ef 90       	pop	r14
  4a:	df 90       	pop	r13
  4c:	cf 90       	pop	r12
  4e:	08 95       	ret

Disassembly of section .text._ZN5Print5writeEPKc:

00000050 <_ZN5Print5writeEPKc>:
  50:	61 15       	cp	r22, r1
  52:	71 05       	cpc	r23, r1
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN5Print5writeEPKc+0x6>
  56:	db 01       	movw	r26, r22
  58:	0d 90       	ld	r0, X+
  5a:	00 20       	and	r0, r0
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN5Print5writeEPKc+0xe>
  5e:	ad 01       	movw	r20, r26
  60:	41 50       	subi	r20, 0x01	; 1
  62:	51 09       	sbc	r21, r1
  64:	46 1b       	sub	r20, r22
  66:	57 0b       	sbc	r21, r23
  68:	dc 01       	movw	r26, r24
  6a:	ed 91       	ld	r30, X+
  6c:	fc 91       	ld	r31, X
  6e:	02 80       	ldd	r0, Z+2	; 0x02
  70:	f3 81       	ldd	r31, Z+3	; 0x03
  72:	e0 2d       	mov	r30, r0
  74:	09 94       	ijmp
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

000000cc <_ZN5Print5printEPK19__FlashStringHelper>:
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	8c 01       	movw	r16, r24
  da:	fb 01       	movw	r30, r22
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	64 91       	lpm	r22, Z
  e2:	7f 01       	movw	r14, r30
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	e8 1a       	sub	r14, r24
  e8:	f8 0a       	sbc	r15, r24
  ea:	66 23       	and	r22, r22
  ec:	01 f0       	breq	.+0      	; 0xee <_ZN5Print5printEPK19__FlashStringHelper+0x22>
  ee:	d8 01       	movw	r26, r16
  f0:	ed 91       	ld	r30, X+
  f2:	fc 91       	ld	r31, X
  f4:	01 90       	ld	r0, Z+
  f6:	f0 81       	ld	r31, Z
  f8:	e0 2d       	mov	r30, r0
  fa:	c8 01       	movw	r24, r16
  fc:	09 95       	icall
  fe:	c8 0f       	add	r28, r24
 100:	d9 1f       	adc	r29, r25
 102:	f7 01       	movw	r30, r14
 104:	00 c0       	rjmp	.+0      	; 0x106 <_ZN5Print5printEPK19__FlashStringHelper+0x3a>
 106:	ce 01       	movw	r24, r28
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	ef 90       	pop	r14
 114:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK6String:

000001e2 <_ZN5Print5printERK6String>:
 1e2:	dc 01       	movw	r26, r24
 1e4:	ed 91       	ld	r30, X+
 1e6:	fc 91       	ld	r31, X
 1e8:	db 01       	movw	r26, r22
 1ea:	14 96       	adiw	r26, 0x04	; 4
 1ec:	4d 91       	ld	r20, X+
 1ee:	5c 91       	ld	r21, X
 1f0:	15 97       	sbiw	r26, 0x05	; 5
 1f2:	6d 91       	ld	r22, X+
 1f4:	7c 91       	ld	r23, X
 1f6:	02 80       	ldd	r0, Z+2	; 0x02
 1f8:	f3 81       	ldd	r31, Z+3	; 0x03
 1fa:	e0 2d       	mov	r30, r0
 1fc:	09 94       	ijmp

Disassembly of section .text._ZN5Print5printEPKc:

000003e0 <_ZN5Print5printEPKc>:
 3e0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print5printEc:

000007c4 <_ZN5Print5printEc>:
 7c4:	dc 01       	movw	r26, r24
 7c6:	ed 91       	ld	r30, X+
 7c8:	fc 91       	ld	r31, X
 7ca:	01 90       	ld	r0, Z+
 7cc:	f0 81       	ld	r31, Z
 7ce:	e0 2d       	mov	r30, r0
 7d0:	09 94       	ijmp

Disassembly of section .text._ZN5Print5printERK9Printable:

00000f96 <_ZN5Print5printERK9Printable>:
 f96:	db 01       	movw	r26, r22
 f98:	ed 91       	ld	r30, X+
 f9a:	fc 91       	ld	r31, X
 f9c:	11 97       	sbiw	r26, 0x01	; 1
 f9e:	01 90       	ld	r0, Z+
 fa0:	f0 81       	ld	r31, Z
 fa2:	e0 2d       	mov	r30, r0
 fa4:	bc 01       	movw	r22, r24
 fa6:	cd 01       	movw	r24, r26
 fa8:	09 94       	ijmp

Disassembly of section .text._ZN5Print7printlnEv:

00001f40 <_ZN5Print7printlnEv>:
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	ec 01       	movw	r28, r24
    1f4a:	6d e0       	ldi	r22, 0x0D	; 13
    1f4c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1f50:	8c 01       	movw	r16, r24
    1f52:	6a e0       	ldi	r22, 0x0A	; 10
    1f54:	ce 01       	movw	r24, r28
    1f56:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1f5a:	80 0f       	add	r24, r16
    1f5c:	91 1f       	adc	r25, r17
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00003ea8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3ea8:	0f 93       	push	r16
    3eaa:	1f 93       	push	r17
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	ec 01       	movw	r28, r24
    3eb2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    3eb6:	8c 01       	movw	r16, r24
    3eb8:	ce 01       	movw	r24, r28
    3eba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    3ebe:	80 0f       	add	r24, r16
    3ec0:	91 1f       	adc	r25, r17
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK6String:

00007d74 <_ZN5Print7printlnERK6String>:
    7d74:	0f 93       	push	r16
    7d76:	1f 93       	push	r17
    7d78:	cf 93       	push	r28
    7d7a:	df 93       	push	r29
    7d7c:	ec 01       	movw	r28, r24
    7d7e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    7d82:	8c 01       	movw	r16, r24
    7d84:	ce 01       	movw	r24, r28
    7d86:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    7d8a:	80 0f       	add	r24, r16
    7d8c:	91 1f       	adc	r25, r17
    7d8e:	df 91       	pop	r29
    7d90:	cf 91       	pop	r28
    7d92:	1f 91       	pop	r17
    7d94:	0f 91       	pop	r16
    7d96:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPKc:

0000fb0c <_ZN5Print7printlnEPKc>:
    fb0c:	0f 93       	push	r16
    fb0e:	1f 93       	push	r17
    fb10:	cf 93       	push	r28
    fb12:	df 93       	push	r29
    fb14:	ec 01       	movw	r28, r24
    fb16:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    fb1a:	8c 01       	movw	r16, r24
    fb1c:	ce 01       	movw	r24, r28
    fb1e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    fb22:	80 0f       	add	r24, r16
    fb24:	91 1f       	adc	r25, r17
    fb26:	df 91       	pop	r29
    fb28:	cf 91       	pop	r28
    fb2a:	1f 91       	pop	r17
    fb2c:	0f 91       	pop	r16
    fb2e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEc:

0001f63c <_ZN5Print7printlnEc>:
   1f63c:	0f 93       	push	r16
   1f63e:	1f 93       	push	r17
   1f640:	cf 93       	push	r28
   1f642:	df 93       	push	r29
   1f644:	ec 01       	movw	r28, r24
   1f646:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   1f64a:	8c 01       	movw	r16, r24
   1f64c:	ce 01       	movw	r24, r28
   1f64e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   1f652:	80 0f       	add	r24, r16
   1f654:	91 1f       	adc	r25, r17
   1f656:	df 91       	pop	r29
   1f658:	cf 91       	pop	r28
   1f65a:	1f 91       	pop	r17
   1f65c:	0f 91       	pop	r16
   1f65e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK9Printable:

0003ec9c <_ZN5Print7printlnERK9Printable>:
   3ec9c:	0f 93       	push	r16
   3ec9e:	1f 93       	push	r17
   3eca0:	cf 93       	push	r28
   3eca2:	df 93       	push	r29
   3eca4:	ec 01       	movw	r28, r24
   3eca6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   3ecaa:	8c 01       	movw	r16, r24
   3ecac:	ce 01       	movw	r24, r28
   3ecae:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   3ecb2:	80 0f       	add	r24, r16
   3ecb4:	91 1f       	adc	r25, r17
   3ecb6:	df 91       	pop	r29
   3ecb8:	cf 91       	pop	r28
   3ecba:	1f 91       	pop	r17
   3ecbc:	0f 91       	pop	r16
   3ecbe:	08 95       	ret

Disassembly of section .text._ZN5Print11printNumberEmh:

0007d95c <_ZN5Print11printNumberEmh>:
   7d95c:	8f 92       	push	r8
   7d95e:	9f 92       	push	r9
   7d960:	af 92       	push	r10
   7d962:	bf 92       	push	r11
   7d964:	cf 92       	push	r12
   7d966:	df 92       	push	r13
   7d968:	ef 92       	push	r14
   7d96a:	ff 92       	push	r15
   7d96c:	0f 93       	push	r16
   7d96e:	1f 93       	push	r17
   7d970:	cf 93       	push	r28
   7d972:	df 93       	push	r29
   7d974:	cd b7       	in	r28, 0x3d	; 61
   7d976:	de b7       	in	r29, 0x3e	; 62
   7d978:	a1 97       	sbiw	r28, 0x21	; 33
   7d97a:	0f b6       	in	r0, 0x3f	; 63
   7d97c:	f8 94       	cli
   7d97e:	de bf       	out	0x3e, r29	; 62
   7d980:	0f be       	out	0x3f, r0	; 63
   7d982:	cd bf       	out	0x3d, r28	; 61
   7d984:	7c 01       	movw	r14, r24
   7d986:	c4 2e       	mov	r12, r20
   7d988:	e5 2f       	mov	r30, r21
   7d98a:	cb 01       	movw	r24, r22
   7d98c:	d2 2e       	mov	r13, r18
   7d98e:	19 a2       	std	Y+33, r1	; 0x21
   7d990:	21 e0       	ldi	r18, 0x01	; 1
   7d992:	2d 15       	cp	r18, r13
   7d994:	00 f0       	brcs	.+0      	; 0x7d996 <_ZN5Print11printNumberEmh+0x3a>
   7d996:	2a e0       	ldi	r18, 0x0A	; 10
   7d998:	d2 2e       	mov	r13, r18
   7d99a:	8e 01       	movw	r16, r28
   7d99c:	0f 5d       	subi	r16, 0xDF	; 223
   7d99e:	1f 4f       	sbci	r17, 0xFF	; 255
   7d9a0:	8d 2c       	mov	r8, r13
   7d9a2:	91 2c       	mov	r9, r1
   7d9a4:	a1 2c       	mov	r10, r1
   7d9a6:	b1 2c       	mov	r11, r1
   7d9a8:	6c 2d       	mov	r22, r12
   7d9aa:	7e 2f       	mov	r23, r30
   7d9ac:	a5 01       	movw	r20, r10
   7d9ae:	94 01       	movw	r18, r8
   7d9b0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   7d9b4:	8c 2d       	mov	r24, r12
   7d9b6:	d2 9e       	mul	r13, r18
   7d9b8:	80 19       	sub	r24, r0
   7d9ba:	11 24       	eor	r1, r1
   7d9bc:	01 50       	subi	r16, 0x01	; 1
   7d9be:	11 09       	sbc	r17, r1
   7d9c0:	8a 30       	cpi	r24, 0x0A	; 10
   7d9c2:	04 f4       	brge	.+0      	; 0x7d9c4 <_ZN5Print11printNumberEmh+0x68>
   7d9c4:	80 5d       	subi	r24, 0xD0	; 208
   7d9c6:	00 c0       	rjmp	.+0      	; 0x7d9c8 <_ZN5Print11printNumberEmh+0x6c>
   7d9c8:	89 5c       	subi	r24, 0xC9	; 201
   7d9ca:	f8 01       	movw	r30, r16
   7d9cc:	80 83       	st	Z, r24
   7d9ce:	21 15       	cp	r18, r1
   7d9d0:	31 05       	cpc	r19, r1
   7d9d2:	41 05       	cpc	r20, r1
   7d9d4:	51 05       	cpc	r21, r1
   7d9d6:	01 f0       	breq	.+0      	; 0x7d9d8 <_ZN5Print11printNumberEmh+0x7c>
   7d9d8:	c2 2e       	mov	r12, r18
   7d9da:	e3 2f       	mov	r30, r19
   7d9dc:	ca 01       	movw	r24, r20
   7d9de:	00 c0       	rjmp	.+0      	; 0x7d9e0 <_ZN5Print11printNumberEmh+0x84>
   7d9e0:	b8 01       	movw	r22, r16
   7d9e2:	c7 01       	movw	r24, r14
   7d9e4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   7d9e8:	a1 96       	adiw	r28, 0x21	; 33
   7d9ea:	0f b6       	in	r0, 0x3f	; 63
   7d9ec:	f8 94       	cli
   7d9ee:	de bf       	out	0x3e, r29	; 62
   7d9f0:	0f be       	out	0x3f, r0	; 63
   7d9f2:	cd bf       	out	0x3d, r28	; 61
   7d9f4:	df 91       	pop	r29
   7d9f6:	cf 91       	pop	r28
   7d9f8:	1f 91       	pop	r17
   7d9fa:	0f 91       	pop	r16
   7d9fc:	ff 90       	pop	r15
   7d9fe:	ef 90       	pop	r14
   7da00:	df 90       	pop	r13
   7da02:	cf 90       	pop	r12
   7da04:	bf 90       	pop	r11
   7da06:	af 90       	pop	r10
   7da08:	9f 90       	pop	r9
   7da0a:	8f 90       	pop	r8
   7da0c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEli:

000fb36a <_ZN5Print5printEli>:
   fb36a:	cf 92       	push	r12
   fb36c:	df 92       	push	r13
   fb36e:	ef 92       	push	r14
   fb370:	ff 92       	push	r15
   fb372:	0f 93       	push	r16
   fb374:	1f 93       	push	r17
   fb376:	cf 93       	push	r28
   fb378:	df 93       	push	r29
   fb37a:	ec 01       	movw	r28, r24
   fb37c:	6a 01       	movw	r12, r20
   fb37e:	7b 01       	movw	r14, r22
   fb380:	21 15       	cp	r18, r1
   fb382:	31 05       	cpc	r19, r1
   fb384:	01 f4       	brne	.+0      	; 0xfb386 <_ZN5Print5printEli+0x1c>
   fb386:	e8 81       	ld	r30, Y
   fb388:	f9 81       	ldd	r31, Y+1	; 0x01
   fb38a:	01 90       	ld	r0, Z+
   fb38c:	f0 81       	ld	r31, Z
   fb38e:	e0 2d       	mov	r30, r0
   fb390:	64 2f       	mov	r22, r20
   fb392:	df 91       	pop	r29
   fb394:	cf 91       	pop	r28
   fb396:	1f 91       	pop	r17
   fb398:	0f 91       	pop	r16
   fb39a:	ff 90       	pop	r15
   fb39c:	ef 90       	pop	r14
   fb39e:	df 90       	pop	r13
   fb3a0:	cf 90       	pop	r12
   fb3a2:	09 94       	ijmp
   fb3a4:	2a 30       	cpi	r18, 0x0A	; 10
   fb3a6:	31 05       	cpc	r19, r1
   fb3a8:	01 f4       	brne	.+0      	; 0xfb3aa <_ZN5Print5printEli+0x40>
   fb3aa:	77 ff       	sbrs	r23, 7
   fb3ac:	00 c0       	rjmp	.+0      	; 0xfb3ae <_ZN5Print5printEli+0x44>
   fb3ae:	6d e2       	ldi	r22, 0x2D	; 45
   fb3b0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   fb3b4:	8c 01       	movw	r16, r24
   fb3b6:	44 27       	eor	r20, r20
   fb3b8:	55 27       	eor	r21, r21
   fb3ba:	ba 01       	movw	r22, r20
   fb3bc:	4c 19       	sub	r20, r12
   fb3be:	5d 09       	sbc	r21, r13
   fb3c0:	6e 09       	sbc	r22, r14
   fb3c2:	7f 09       	sbc	r23, r15
   fb3c4:	2a e0       	ldi	r18, 0x0A	; 10
   fb3c6:	ce 01       	movw	r24, r28
   fb3c8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   fb3cc:	80 0f       	add	r24, r16
   fb3ce:	91 1f       	adc	r25, r17
   fb3d0:	df 91       	pop	r29
   fb3d2:	cf 91       	pop	r28
   fb3d4:	1f 91       	pop	r17
   fb3d6:	0f 91       	pop	r16
   fb3d8:	ff 90       	pop	r15
   fb3da:	ef 90       	pop	r14
   fb3dc:	df 90       	pop	r13
   fb3de:	cf 90       	pop	r12
   fb3e0:	08 95       	ret
   fb3e2:	2a e0       	ldi	r18, 0x0A	; 10
   fb3e4:	b7 01       	movw	r22, r14
   fb3e6:	a6 01       	movw	r20, r12
   fb3e8:	ce 01       	movw	r24, r28
   fb3ea:	df 91       	pop	r29
   fb3ec:	cf 91       	pop	r28
   fb3ee:	1f 91       	pop	r17
   fb3f0:	0f 91       	pop	r16
   fb3f2:	ff 90       	pop	r15
   fb3f4:	ef 90       	pop	r14
   fb3f6:	df 90       	pop	r13
   fb3f8:	cf 90       	pop	r12
   fb3fa:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print5printEii:

001f6768 <_ZN5Print5printEii>:
  1f6768:	9a 01       	movw	r18, r20
  1f676a:	ab 01       	movw	r20, r22
  1f676c:	66 27       	eor	r22, r22
  1f676e:	57 fd       	sbrc	r21, 7
  1f6770:	60 95       	com	r22
  1f6772:	76 2f       	mov	r23, r22
  1f6774:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print7printlnEii:

003ecee0 <_ZN5Print7printlnEii>:
  3ecee0:	0f 93       	push	r16
  3ecee2:	1f 93       	push	r17
  3ecee4:	cf 93       	push	r28
  3ecee6:	df 93       	push	r29
  3ecee8:	ec 01       	movw	r28, r24
  3eceea:	9a 01       	movw	r18, r20
  3eceec:	ab 01       	movw	r20, r22
  3eceee:	66 27       	eor	r22, r22
  3ecef0:	57 fd       	sbrc	r21, 7
  3ecef2:	60 95       	com	r22
  3ecef4:	76 2f       	mov	r23, r22
  3ecef6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3ecefa:	8c 01       	movw	r16, r24
  3ecefc:	ce 01       	movw	r24, r28
  3ecefe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3ecf02:	80 0f       	add	r24, r16
  3ecf04:	91 1f       	adc	r25, r17
  3ecf06:	df 91       	pop	r29
  3ecf08:	cf 91       	pop	r28
  3ecf0a:	1f 91       	pop	r17
  3ecf0c:	0f 91       	pop	r16
  3ecf0e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEli:

007d9df0 <_ZN5Print7printlnEli>:
  7d9df0:	0f 93       	push	r16
  7d9df2:	1f 93       	push	r17
  7d9df4:	cf 93       	push	r28
  7d9df6:	df 93       	push	r29
  7d9df8:	ec 01       	movw	r28, r24
  7d9dfa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  7d9dfe:	8c 01       	movw	r16, r24
  7d9e00:	ce 01       	movw	r24, r28
  7d9e02:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  7d9e06:	80 0f       	add	r24, r16
  7d9e08:	91 1f       	adc	r25, r17
  7d9e0a:	df 91       	pop	r29
  7d9e0c:	cf 91       	pop	r28
  7d9e0e:	1f 91       	pop	r17
  7d9e10:	0f 91       	pop	r16
  7d9e12:	08 95       	ret

Disassembly of section .text._ZN5Print5printEmi:

00fb3c04 <_ZN5Print5printEmi>:
  fb3c04:	21 15       	cp	r18, r1
  fb3c06:	31 05       	cpc	r19, r1
  fb3c08:	01 f4       	brne	.+0      	; 0xfb3c0a <_ZN5Print5printEmi+0x6>
  fb3c0a:	dc 01       	movw	r26, r24
  fb3c0c:	ed 91       	ld	r30, X+
  fb3c0e:	fc 91       	ld	r31, X
  fb3c10:	01 90       	ld	r0, Z+
  fb3c12:	f0 81       	ld	r31, Z
  fb3c14:	e0 2d       	mov	r30, r0
  fb3c16:	64 2f       	mov	r22, r20
  fb3c18:	09 94       	ijmp
  fb3c1a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print5printEhi:

01f67822 <_ZN5Print5printEhi>:
 1f67822:	9a 01       	movw	r18, r20
 1f67824:	46 2f       	mov	r20, r22
 1f67826:	50 e0       	ldi	r21, 0x00	; 0
 1f67828:	60 e0       	ldi	r22, 0x00	; 0
 1f6782a:	70 e0       	ldi	r23, 0x00	; 0
 1f6782c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print7printlnEhi:

03ecf052 <_ZN5Print7printlnEhi>:
 3ecf052:	0f 93       	push	r16
 3ecf054:	1f 93       	push	r17
 3ecf056:	cf 93       	push	r28
 3ecf058:	df 93       	push	r29
 3ecf05a:	ec 01       	movw	r28, r24
 3ecf05c:	9a 01       	movw	r18, r20
 3ecf05e:	46 2f       	mov	r20, r22
 3ecf060:	50 e0       	ldi	r21, 0x00	; 0
 3ecf062:	60 e0       	ldi	r22, 0x00	; 0
 3ecf064:	70 e0       	ldi	r23, 0x00	; 0
 3ecf066:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3ecf06a:	8c 01       	movw	r16, r24
 3ecf06c:	ce 01       	movw	r24, r28
 3ecf06e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3ecf072:	80 0f       	add	r24, r16
 3ecf074:	91 1f       	adc	r25, r17
 3ecf076:	df 91       	pop	r29
 3ecf078:	cf 91       	pop	r28
 3ecf07a:	1f 91       	pop	r17
 3ecf07c:	0f 91       	pop	r16
 3ecf07e:	08 95       	ret

Disassembly of section .text._ZN5Print5printEji:

07d9e0d2 <_ZN5Print5printEji>:
 7d9e0d2:	9a 01       	movw	r18, r20
 7d9e0d4:	ab 01       	movw	r20, r22
 7d9e0d6:	60 e0       	ldi	r22, 0x00	; 0
 7d9e0d8:	70 e0       	ldi	r23, 0x00	; 0
 7d9e0da:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print7printlnEji:

0fb3c1b0 <_ZN5Print7printlnEji>:
 fb3c1b0:	0f 93       	push	r16
 fb3c1b2:	1f 93       	push	r17
 fb3c1b4:	cf 93       	push	r28
 fb3c1b6:	df 93       	push	r29
 fb3c1b8:	ec 01       	movw	r28, r24
 fb3c1ba:	9a 01       	movw	r18, r20
 fb3c1bc:	ab 01       	movw	r20, r22
 fb3c1be:	60 e0       	ldi	r22, 0x00	; 0
 fb3c1c0:	70 e0       	ldi	r23, 0x00	; 0
 fb3c1c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 fb3c1c6:	8c 01       	movw	r16, r24
 fb3c1c8:	ce 01       	movw	r24, r28
 fb3c1ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 fb3c1ce:	80 0f       	add	r24, r16
 fb3c1d0:	91 1f       	adc	r25, r17
 fb3c1d2:	df 91       	pop	r29
 fb3c1d4:	cf 91       	pop	r28
 fb3c1d6:	1f 91       	pop	r17
 fb3c1d8:	0f 91       	pop	r16
 fb3c1da:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEmi:

1f67838c <_ZN5Print7printlnEmi>:
1f67838c:	0f 93       	push	r16
1f67838e:	1f 93       	push	r17
1f678390:	cf 93       	push	r28
1f678392:	df 93       	push	r29
1f678394:	ec 01       	movw	r28, r24
1f678396:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1f67839a:	8c 01       	movw	r16, r24
1f67839c:	ce 01       	movw	r24, r28
1f67839e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1f6783a2:	80 0f       	add	r24, r16
1f6783a4:	91 1f       	adc	r25, r17
1f6783a6:	df 91       	pop	r29
1f6783a8:	cf 91       	pop	r28
1f6783aa:	1f 91       	pop	r17
1f6783ac:	0f 91       	pop	r16
1f6783ae:	08 95       	ret

Disassembly of section .text._ZN5Print10printFloatEdh:

7d9e0e86 <_ZN5Print10printFloatEdh>:
7d9e0e86:	4f 92       	push	r4
7d9e0e88:	5f 92       	push	r5
7d9e0e8a:	6f 92       	push	r6
7d9e0e8c:	7f 92       	push	r7
7d9e0e8e:	8f 92       	push	r8
7d9e0e90:	9f 92       	push	r9
7d9e0e92:	af 92       	push	r10
7d9e0e94:	bf 92       	push	r11
7d9e0e96:	cf 92       	push	r12
7d9e0e98:	df 92       	push	r13
7d9e0e9a:	ef 92       	push	r14
7d9e0e9c:	ff 92       	push	r15
7d9e0e9e:	0f 93       	push	r16
7d9e0ea0:	1f 93       	push	r17
7d9e0ea2:	cf 93       	push	r28
7d9e0ea4:	df 93       	push	r29
7d9e0ea6:	ec 01       	movw	r28, r24
7d9e0ea8:	6a 01       	movw	r12, r20
7d9e0eaa:	7b 01       	movw	r14, r22
7d9e0eac:	b2 2e       	mov	r11, r18
7d9e0eae:	9a 01       	movw	r18, r20
7d9e0eb0:	ab 01       	movw	r20, r22
7d9e0eb2:	c7 01       	movw	r24, r14
7d9e0eb4:	b6 01       	movw	r22, r12
7d9e0eb6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0eba:	88 23       	and	r24, r24
7d9e0ebc:	01 f0       	breq	.+0      	; 0x7d9e0ebe <_ZN5Print10printFloatEdh+0x38>
7d9e0ebe:	60 e0       	ldi	r22, 0x00	; 0
7d9e0ec0:	70 e0       	ldi	r23, 0x00	; 0
7d9e0ec2:	00 c0       	rjmp	.+0      	; 0x7d9e0ec4 <_ZN5Print10printFloatEdh+0x3e>
7d9e0ec4:	26 01       	movw	r4, r12
7d9e0ec6:	37 01       	movw	r6, r14
7d9e0ec8:	e8 94       	clt
7d9e0eca:	77 f8       	bld	r7, 7
7d9e0ecc:	2f ef       	ldi	r18, 0xFF	; 255
7d9e0ece:	3f ef       	ldi	r19, 0xFF	; 255
7d9e0ed0:	4f e7       	ldi	r20, 0x7F	; 127
7d9e0ed2:	5f e7       	ldi	r21, 0x7F	; 127
7d9e0ed4:	c3 01       	movw	r24, r6
7d9e0ed6:	b2 01       	movw	r22, r4
7d9e0ed8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0edc:	81 11       	cpse	r24, r1
7d9e0ede:	00 c0       	rjmp	.+0      	; 0x7d9e0ee0 <_ZN5Print10printFloatEdh+0x5a>
7d9e0ee0:	2f ef       	ldi	r18, 0xFF	; 255
7d9e0ee2:	3f ef       	ldi	r19, 0xFF	; 255
7d9e0ee4:	4f e7       	ldi	r20, 0x7F	; 127
7d9e0ee6:	5f e7       	ldi	r21, 0x7F	; 127
7d9e0ee8:	c3 01       	movw	r24, r6
7d9e0eea:	b2 01       	movw	r22, r4
7d9e0eec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0ef0:	18 16       	cp	r1, r24
7d9e0ef2:	04 f4       	brge	.+0      	; 0x7d9e0ef4 <_ZN5Print10printFloatEdh+0x6e>
7d9e0ef4:	60 e0       	ldi	r22, 0x00	; 0
7d9e0ef6:	70 e0       	ldi	r23, 0x00	; 0
7d9e0ef8:	00 c0       	rjmp	.+0      	; 0x7d9e0efa <_ZN5Print10printFloatEdh+0x74>
7d9e0efa:	2f ef       	ldi	r18, 0xFF	; 255
7d9e0efc:	3f ef       	ldi	r19, 0xFF	; 255
7d9e0efe:	4f e7       	ldi	r20, 0x7F	; 127
7d9e0f00:	5f e4       	ldi	r21, 0x4F	; 79
7d9e0f02:	c7 01       	movw	r24, r14
7d9e0f04:	b6 01       	movw	r22, r12
7d9e0f06:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0f0a:	18 16       	cp	r1, r24
7d9e0f0c:	04 f4       	brge	.+0      	; 0x7d9e0f0e <_ZN5Print10printFloatEdh+0x88>
7d9e0f0e:	60 e0       	ldi	r22, 0x00	; 0
7d9e0f10:	70 e0       	ldi	r23, 0x00	; 0
7d9e0f12:	ce 01       	movw	r24, r28
7d9e0f14:	df 91       	pop	r29
7d9e0f16:	cf 91       	pop	r28
7d9e0f18:	1f 91       	pop	r17
7d9e0f1a:	0f 91       	pop	r16
7d9e0f1c:	ff 90       	pop	r15
7d9e0f1e:	ef 90       	pop	r14
7d9e0f20:	df 90       	pop	r13
7d9e0f22:	cf 90       	pop	r12
7d9e0f24:	bf 90       	pop	r11
7d9e0f26:	af 90       	pop	r10
7d9e0f28:	9f 90       	pop	r9
7d9e0f2a:	8f 90       	pop	r8
7d9e0f2c:	7f 90       	pop	r7
7d9e0f2e:	6f 90       	pop	r6
7d9e0f30:	5f 90       	pop	r5
7d9e0f32:	4f 90       	pop	r4
7d9e0f34:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
7d9e0f38:	2f ef       	ldi	r18, 0xFF	; 255
7d9e0f3a:	3f ef       	ldi	r19, 0xFF	; 255
7d9e0f3c:	4f e7       	ldi	r20, 0x7F	; 127
7d9e0f3e:	5f ec       	ldi	r21, 0xCF	; 207
7d9e0f40:	c7 01       	movw	r24, r14
7d9e0f42:	b6 01       	movw	r22, r12
7d9e0f44:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0f48:	87 fd       	sbrc	r24, 7
7d9e0f4a:	00 c0       	rjmp	.+0      	; 0x7d9e0f4c <_ZN5Print10printFloatEdh+0xc6>
7d9e0f4c:	20 e0       	ldi	r18, 0x00	; 0
7d9e0f4e:	30 e0       	ldi	r19, 0x00	; 0
7d9e0f50:	a9 01       	movw	r20, r18
7d9e0f52:	c7 01       	movw	r24, r14
7d9e0f54:	b6 01       	movw	r22, r12
7d9e0f56:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0f5a:	87 ff       	sbrs	r24, 7
7d9e0f5c:	00 c0       	rjmp	.+0      	; 0x7d9e0f5e <_ZN5Print10printFloatEdh+0xd8>
7d9e0f5e:	6d e2       	ldi	r22, 0x2D	; 45
7d9e0f60:	ce 01       	movw	r24, r28
7d9e0f62:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0f66:	8c 01       	movw	r16, r24
7d9e0f68:	f7 fa       	bst	r15, 7
7d9e0f6a:	f0 94       	com	r15
7d9e0f6c:	f7 f8       	bld	r15, 7
7d9e0f6e:	f0 94       	com	r15
7d9e0f70:	00 c0       	rjmp	.+0      	; 0x7d9e0f72 <_ZN5Print10printFloatEdh+0xec>
7d9e0f72:	00 e0       	ldi	r16, 0x00	; 0
7d9e0f74:	10 e0       	ldi	r17, 0x00	; 0
7d9e0f76:	a1 2c       	mov	r10, r1
7d9e0f78:	60 e0       	ldi	r22, 0x00	; 0
7d9e0f7a:	70 e0       	ldi	r23, 0x00	; 0
7d9e0f7c:	80 e0       	ldi	r24, 0x00	; 0
7d9e0f7e:	9f e3       	ldi	r25, 0x3F	; 63
7d9e0f80:	ab 14       	cp	r10, r11
7d9e0f82:	01 f0       	breq	.+0      	; 0x7d9e0f84 <_ZN5Print10printFloatEdh+0xfe>
7d9e0f84:	20 e0       	ldi	r18, 0x00	; 0
7d9e0f86:	30 e0       	ldi	r19, 0x00	; 0
7d9e0f88:	40 e2       	ldi	r20, 0x20	; 32
7d9e0f8a:	51 e4       	ldi	r21, 0x41	; 65
7d9e0f8c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0f90:	a3 94       	inc	r10
7d9e0f92:	00 c0       	rjmp	.+0      	; 0x7d9e0f94 <_ZN5Print10printFloatEdh+0x10e>
7d9e0f94:	9b 01       	movw	r18, r22
7d9e0f96:	ac 01       	movw	r20, r24
7d9e0f98:	c7 01       	movw	r24, r14
7d9e0f9a:	b6 01       	movw	r22, r12
7d9e0f9c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0fa0:	6b 01       	movw	r12, r22
7d9e0fa2:	7c 01       	movw	r14, r24
7d9e0fa4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0fa8:	2b 01       	movw	r4, r22
7d9e0faa:	3c 01       	movw	r6, r24
7d9e0fac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0fb0:	9b 01       	movw	r18, r22
7d9e0fb2:	ac 01       	movw	r20, r24
7d9e0fb4:	c7 01       	movw	r24, r14
7d9e0fb6:	b6 01       	movw	r22, r12
7d9e0fb8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0fbc:	6b 01       	movw	r12, r22
7d9e0fbe:	7c 01       	movw	r14, r24
7d9e0fc0:	2a e0       	ldi	r18, 0x0A	; 10
7d9e0fc2:	b3 01       	movw	r22, r6
7d9e0fc4:	a2 01       	movw	r20, r4
7d9e0fc6:	ce 01       	movw	r24, r28
7d9e0fc8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0fcc:	08 0f       	add	r16, r24
7d9e0fce:	19 1f       	adc	r17, r25
7d9e0fd0:	bb 20       	and	r11, r11
7d9e0fd2:	01 f0       	breq	.+0      	; 0x7d9e0fd4 <_ZN5Print10printFloatEdh+0x14e>
7d9e0fd4:	60 e0       	ldi	r22, 0x00	; 0
7d9e0fd6:	70 e0       	ldi	r23, 0x00	; 0
7d9e0fd8:	ce 01       	movw	r24, r28
7d9e0fda:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0fde:	08 0f       	add	r16, r24
7d9e0fe0:	19 1f       	adc	r17, r25
7d9e0fe2:	7b 2c       	mov	r7, r11
7d9e0fe4:	77 20       	and	r7, r7
7d9e0fe6:	01 f0       	breq	.+0      	; 0x7d9e0fe8 <_ZN5Print10printFloatEdh+0x162>
7d9e0fe8:	20 e0       	ldi	r18, 0x00	; 0
7d9e0fea:	30 e0       	ldi	r19, 0x00	; 0
7d9e0fec:	40 e2       	ldi	r20, 0x20	; 32
7d9e0fee:	51 e4       	ldi	r21, 0x41	; 65
7d9e0ff0:	c7 01       	movw	r24, r14
7d9e0ff2:	b6 01       	movw	r22, r12
7d9e0ff4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e0ff8:	6b 01       	movw	r12, r22
7d9e0ffa:	7c 01       	movw	r14, r24
7d9e0ffc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e1000:	4b 01       	movw	r8, r22
7d9e1002:	aa 24       	eor	r10, r10
7d9e1004:	97 fc       	sbrc	r9, 7
7d9e1006:	a0 94       	com	r10
7d9e1008:	ba 2c       	mov	r11, r10
7d9e100a:	2a e0       	ldi	r18, 0x0A	; 10
7d9e100c:	30 e0       	ldi	r19, 0x00	; 0
7d9e100e:	b5 01       	movw	r22, r10
7d9e1010:	a4 01       	movw	r20, r8
7d9e1012:	ce 01       	movw	r24, r28
7d9e1014:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e1018:	08 0f       	add	r16, r24
7d9e101a:	19 1f       	adc	r17, r25
7d9e101c:	c5 01       	movw	r24, r10
7d9e101e:	b4 01       	movw	r22, r8
7d9e1020:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e1024:	9b 01       	movw	r18, r22
7d9e1026:	ac 01       	movw	r20, r24
7d9e1028:	c7 01       	movw	r24, r14
7d9e102a:	b6 01       	movw	r22, r12
7d9e102c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7d9e1030:	6b 01       	movw	r12, r22
7d9e1032:	7c 01       	movw	r14, r24
7d9e1034:	7a 94       	dec	r7
7d9e1036:	00 c0       	rjmp	.+0      	; 0x7d9e1038 <_ZN5Print10printFloatEdh+0x1b2>
7d9e1038:	c8 01       	movw	r24, r16
7d9e103a:	df 91       	pop	r29
7d9e103c:	cf 91       	pop	r28
7d9e103e:	1f 91       	pop	r17
7d9e1040:	0f 91       	pop	r16
7d9e1042:	ff 90       	pop	r15
7d9e1044:	ef 90       	pop	r14
7d9e1046:	df 90       	pop	r13
7d9e1048:	cf 90       	pop	r12
7d9e104a:	bf 90       	pop	r11
7d9e104c:	af 90       	pop	r10
7d9e104e:	9f 90       	pop	r9
7d9e1050:	8f 90       	pop	r8
7d9e1052:	7f 90       	pop	r7
7d9e1054:	6f 90       	pop	r6
7d9e1056:	5f 90       	pop	r5
7d9e1058:	4f 90       	pop	r4
7d9e105a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEdi:

fb3c1ee2 <_ZN5Print5printEdi>:
fb3c1ee2:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN5Print7printlnEdi:

f6783dc8 <_ZN5Print7printlnEdi>:
f6783dc8:	0f 93       	push	r16
f6783dca:	1f 93       	push	r17
f6783dcc:	cf 93       	push	r28
f6783dce:	df 93       	push	r29
f6783dd0:	ec 01       	movw	r28, r24
f6783dd2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f6783dd6:	8c 01       	movw	r16, r24
f6783dd8:	ce 01       	movw	r24, r28
f6783dda:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f6783dde:	80 0f       	add	r24, r16
f6783de0:	91 1f       	adc	r25, r17
f6783de2:	df 91       	pop	r29
f6783de4:	cf 91       	pop	r28
f6783de6:	1f 91       	pop	r17
f6783de8:	0f 91       	pop	r16
f6783dea:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000010a4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001568  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6Stream9timedReadEv 0000005c  00000000  00000000  00002640  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6Stream9timedPeekEv 0000005c  00000000  00000000  0000269c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6Stream13peekNextDigitEv 00000038  00000000  00000000  000026f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream10setTimeoutEm 0000000c  00000000  00000000  00002730  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN6Stream9findUntilEPcjS0_j 000000c6  00000000  00000000  0000273c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream4findEPcj 00000016  00000000  00000000  00002802  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream9findUntilEPcS0_ 00000034  00000000  00000000  00002818  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .rodata.str1.1 00000001  00000000  00000000  0000284c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .text._ZN6Stream4findEPc 00000008  00000000  00000000  0000284d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6Stream8parseIntEc 000000de  00000000  00000000  00002855  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream8parseIntEv 00000006  00000000  00000000  00002933  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream10parseFloatEc 0000011e  00000000  00000000  00002939  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream10parseFloatEv 00000006  00000000  00000000  00002a57  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream9readBytesEPcj 00000046  00000000  00000000  00002a5d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6Stream14readBytesUntilEcPcj 0000006a  00000000  00000000  00002aa3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6Stream10readStringEv 00000034  00000000  00000000  00002b0d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6Stream15readStringUntilEc 00000050  00000000  00000000  00002b41  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .comment      00000012  00000000  00000000  00002b91  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
   e:	68 87       	std	Y+8, r22	; 0x08
  10:	79 87       	std	Y+9, r23	; 0x09
  String ret;
  12:	8a 87       	std	Y+10, r24	; 0x0a
  14:	9b 87       	std	Y+11, r25	; 0x0b
  16:	e8 81       	ld	r30, Y
  18:	f9 81       	ldd	r31, Y+1	; 0x01
  int c = timedRead();
  1a:	06 80       	ldd	r0, Z+6	; 0x06
  1c:	f7 81       	ldd	r31, Z+7	; 0x07
  1e:	e0 2d       	mov	r30, r0
  while (c >= 0 && c != terminator)
  20:	ce 01       	movw	r24, r28
  22:	09 95       	icall
  24:	97 ff       	sbrs	r25, 7
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream9timedReadEv+0x28>
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  2c:	08 85       	ldd	r16, Y+8	; 0x08
  2e:	19 85       	ldd	r17, Y+9	; 0x09
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
  30:	2a 85       	ldd	r18, Y+10	; 0x0a
  32:	3b 85       	ldd	r19, Y+11	; 0x0b
  34:	60 1b       	sub	r22, r16
  36:	71 0b       	sbc	r23, r17
  {
    ret += (char)c;
    c = timedRead();
  38:	82 0b       	sbc	r24, r18
  3a:	93 0b       	sbc	r25, r19
  3c:	0c 81       	ldd	r16, Y+4	; 0x04
  3e:	1d 81       	ldd	r17, Y+5	; 0x05
  }
  return ret;
}
  40:	2e 81       	ldd	r18, Y+6	; 0x06
  42:	3f 81       	ldd	r19, Y+7	; 0x07
  44:	60 17       	cp	r22, r16
  46:	71 07       	cpc	r23, r17
  48:	82 07       	cpc	r24, r18
  4a:	93 07       	cpc	r25, r19
  4c:	00 f0       	brcs	.+0      	; 0x4e <_ZN6Stream9timedReadEv+0x4e>
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	9f ef       	ldi	r25, 0xFF	; 255
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedPeekEv:

0000005c <_ZN6Stream9timedPeekEv>:
  5c:	0f 93       	push	r16
  5e:	1f 93       	push	r17
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
  64:	ec 01       	movw	r28, r24
  66:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  6a:	68 87       	std	Y+8, r22	; 0x08
  6c:	79 87       	std	Y+9, r23	; 0x09
  6e:	8a 87       	std	Y+10, r24	; 0x0a
  70:	9b 87       	std	Y+11, r25	; 0x0b
  72:	e8 81       	ld	r30, Y
  74:	f9 81       	ldd	r31, Y+1	; 0x01
  76:	00 84       	ldd	r0, Z+8	; 0x08
  78:	f1 85       	ldd	r31, Z+9	; 0x09
  7a:	e0 2d       	mov	r30, r0
  7c:	ce 01       	movw	r24, r28
  7e:	09 95       	icall
  80:	97 ff       	sbrs	r25, 7
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN6Stream9timedPeekEv+0x28>
  84:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  88:	08 85       	ldd	r16, Y+8	; 0x08
  8a:	19 85       	ldd	r17, Y+9	; 0x09
  8c:	2a 85       	ldd	r18, Y+10	; 0x0a
  8e:	3b 85       	ldd	r19, Y+11	; 0x0b
  90:	60 1b       	sub	r22, r16
  92:	71 0b       	sbc	r23, r17
  94:	82 0b       	sbc	r24, r18
  96:	93 0b       	sbc	r25, r19
  98:	0c 81       	ldd	r16, Y+4	; 0x04
  9a:	1d 81       	ldd	r17, Y+5	; 0x05
  9c:	2e 81       	ldd	r18, Y+6	; 0x06
  9e:	3f 81       	ldd	r19, Y+7	; 0x07
  a0:	60 17       	cp	r22, r16
  a2:	71 07       	cpc	r23, r17
  a4:	82 07       	cpc	r24, r18
  a6:	93 07       	cpc	r25, r19
  a8:	00 f0       	brcs	.+0      	; 0xaa <_ZN6Stream9timedPeekEv+0x4e>
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	9f ef       	ldi	r25, 0xFF	; 255
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret

Disassembly of section .text._ZN6Stream13peekNextDigitEv:

00000114 <_ZN6Stream13peekNextDigitEv>:
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 120:	97 fd       	sbrc	r25, 7
 122:	00 c0       	rjmp	.+0      	; 0x124 <_ZN6Stream13peekNextDigitEv+0x10>
 124:	8d 32       	cpi	r24, 0x2D	; 45
 126:	91 05       	cpc	r25, r1
 128:	01 f0       	breq	.+0      	; 0x12a <_ZN6Stream13peekNextDigitEv+0x16>
 12a:	9c 01       	movw	r18, r24
 12c:	20 53       	subi	r18, 0x30	; 48
 12e:	31 09       	sbc	r19, r1
 130:	2a 30       	cpi	r18, 0x0A	; 10
 132:	31 05       	cpc	r19, r1
 134:	00 f0       	brcs	.+0      	; 0x136 <_ZN6Stream13peekNextDigitEv+0x22>
 136:	e8 81       	ld	r30, Y
 138:	f9 81       	ldd	r31, Y+1	; 0x01
 13a:	06 80       	ldd	r0, Z+6	; 0x06
 13c:	f7 81       	ldd	r31, Z+7	; 0x07
 13e:	e0 2d       	mov	r30, r0
 140:	ce 01       	movw	r24, r28
 142:	09 95       	icall
 144:	00 c0       	rjmp	.+0      	; 0x146 <_ZN6Stream13peekNextDigitEv+0x32>
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000260 <_ZN6Stream10setTimeoutEm>:
 260:	fc 01       	movw	r30, r24
 262:	44 83       	std	Z+4, r20	; 0x04
 264:	55 83       	std	Z+5, r21	; 0x05
 266:	66 83       	std	Z+6, r22	; 0x06
 268:	77 83       	std	Z+7, r23	; 0x07
 26a:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

000004cc <_ZN6Stream9findUntilEPcjS0_j>:
 4cc:	6f 92       	push	r6
 4ce:	7f 92       	push	r7
 4d0:	8f 92       	push	r8
 4d2:	9f 92       	push	r9
 4d4:	af 92       	push	r10
 4d6:	bf 92       	push	r11
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	5c 01       	movw	r10, r24
 4ea:	6b 01       	movw	r12, r22
 4ec:	4a 01       	movw	r8, r20
 4ee:	39 01       	movw	r6, r18
 4f0:	fb 01       	movw	r30, r22
 4f2:	80 81       	ld	r24, Z
 4f4:	88 23       	and	r24, r24
 4f6:	01 f0       	breq	.+0      	; 0x4f8 <_ZN6Stream9findUntilEPcjS0_j+0x2c>
 4f8:	e1 2c       	mov	r14, r1
 4fa:	f1 2c       	mov	r15, r1
 4fc:	c0 e0       	ldi	r28, 0x00	; 0
 4fe:	d0 e0       	ldi	r29, 0x00	; 0
 500:	c5 01       	movw	r24, r10
 502:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 506:	18 16       	cp	r1, r24
 508:	19 06       	cpc	r1, r25
 50a:	04 f4       	brge	.+0      	; 0x50c <_ZN6Stream9findUntilEPcjS0_j+0x40>
 50c:	f6 01       	movw	r30, r12
 50e:	ec 0f       	add	r30, r28
 510:	fd 1f       	adc	r31, r29
 512:	20 81       	ld	r18, Z
 514:	33 27       	eor	r19, r19
 516:	27 fd       	sbrc	r18, 7
 518:	30 95       	com	r19
 51a:	82 17       	cp	r24, r18
 51c:	93 07       	cpc	r25, r19
 51e:	01 f0       	breq	.+0      	; 0x520 <_ZN6Stream9findUntilEPcjS0_j+0x54>
 520:	c0 e0       	ldi	r28, 0x00	; 0
 522:	d0 e0       	ldi	r29, 0x00	; 0
 524:	f6 01       	movw	r30, r12
 526:	ec 0f       	add	r30, r28
 528:	fd 1f       	adc	r31, r29
 52a:	20 81       	ld	r18, Z
 52c:	33 27       	eor	r19, r19
 52e:	27 fd       	sbrc	r18, 7
 530:	30 95       	com	r19
 532:	82 17       	cp	r24, r18
 534:	93 07       	cpc	r25, r19
 536:	01 f4       	brne	.+0      	; 0x538 <_ZN6Stream9findUntilEPcjS0_j+0x6c>
 538:	21 96       	adiw	r28, 0x01	; 1
 53a:	c8 15       	cp	r28, r8
 53c:	d9 05       	cpc	r29, r9
 53e:	00 f4       	brcc	.+0      	; 0x540 <_ZN6Stream9findUntilEPcjS0_j+0x74>
 540:	01 15       	cp	r16, r1
 542:	11 05       	cpc	r17, r1
 544:	01 f0       	breq	.+0      	; 0x546 <_ZN6Stream9findUntilEPcjS0_j+0x7a>
 546:	f3 01       	movw	r30, r6
 548:	ee 0d       	add	r30, r14
 54a:	ff 1d       	adc	r31, r15
 54c:	20 81       	ld	r18, Z
 54e:	33 27       	eor	r19, r19
 550:	27 fd       	sbrc	r18, 7
 552:	30 95       	com	r19
 554:	82 17       	cp	r24, r18
 556:	93 07       	cpc	r25, r19
 558:	01 f4       	brne	.+0      	; 0x55a <_ZN6Stream9findUntilEPcjS0_j+0x8e>
 55a:	ff ef       	ldi	r31, 0xFF	; 255
 55c:	ef 1a       	sub	r14, r31
 55e:	ff 0a       	sbc	r15, r31
 560:	e0 16       	cp	r14, r16
 562:	f1 06       	cpc	r15, r17
 564:	00 f0       	brcs	.+0      	; 0x566 <_ZN6Stream9findUntilEPcjS0_j+0x9a>
 566:	00 c0       	rjmp	.+0      	; 0x568 <_ZN6Stream9findUntilEPcjS0_j+0x9c>
 568:	e1 2c       	mov	r14, r1
 56a:	f1 2c       	mov	r15, r1
 56c:	00 c0       	rjmp	.+0      	; 0x56e <_ZN6Stream9findUntilEPcjS0_j+0xa2>
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	00 c0       	rjmp	.+0      	; 0x572 <_ZN6Stream9findUntilEPcjS0_j+0xa6>
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	cf 90       	pop	r12
 584:	bf 90       	pop	r11
 586:	af 90       	pop	r10
 588:	9f 90       	pop	r9
 58a:	8f 90       	pop	r8
 58c:	7f 90       	pop	r7
 58e:	6f 90       	pop	r6
 590:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPcj:

00000a5e <_ZN6Stream4findEPcj>:
 a5e:	0f 93       	push	r16
 a60:	1f 93       	push	r17
 a62:	00 e0       	ldi	r16, 0x00	; 0
 a64:	10 e0       	ldi	r17, 0x00	; 0
 a66:	20 e0       	ldi	r18, 0x00	; 0
 a68:	30 e0       	ldi	r19, 0x00	; 0
 a6a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a6e:	1f 91       	pop	r17
 a70:	0f 91       	pop	r16
 a72:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

000014d2 <_ZN6Stream9findUntilEPcS0_>:
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	9a 01       	movw	r18, r20
    14d8:	fa 01       	movw	r30, r20
    14da:	01 90       	ld	r0, Z+
    14dc:	00 20       	and	r0, r0
    14de:	01 f4       	brne	.+0      	; 0x14e0 <_ZN6Stream9findUntilEPcS0_+0xe>
    14e0:	8f 01       	movw	r16, r30
    14e2:	01 50       	subi	r16, 0x01	; 1
    14e4:	11 09       	sbc	r17, r1
    14e6:	04 1b       	sub	r16, r20
    14e8:	15 0b       	sbc	r17, r21
    14ea:	fb 01       	movw	r30, r22
    14ec:	01 90       	ld	r0, Z+
    14ee:	00 20       	and	r0, r0
    14f0:	01 f4       	brne	.+0      	; 0x14f2 <_ZN6Stream9findUntilEPcS0_+0x20>
    14f2:	af 01       	movw	r20, r30
    14f4:	41 50       	subi	r20, 0x01	; 1
    14f6:	51 09       	sbc	r21, r1
    14f8:	46 1b       	sub	r20, r22
    14fa:	57 0b       	sbc	r21, r23
    14fc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPc:

000053b1 <_ZN6Stream4findEPc>:
    53b1:	40 e0       	ldi	r20, 0x00	; 0
    53b3:	50 e0       	ldi	r21, 0x00	; 0
    53b5:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6Stream8parseIntEc:

0000a76a <_ZN6Stream8parseIntEc>:
    a76a:	cf 92       	push	r12
    a76c:	df 92       	push	r13
    a76e:	ff 92       	push	r15
    a770:	0f 93       	push	r16
    a772:	1f 93       	push	r17
    a774:	cf 93       	push	r28
    a776:	df 93       	push	r29
    a778:	00 d0       	rcall	.+0      	; 0xa77a <_ZN6Stream8parseIntEc+0x10>
    a77a:	00 d0       	rcall	.+0      	; 0xa77c <_ZN6Stream8parseIntEc+0x12>
    a77c:	cd b7       	in	r28, 0x3d	; 61
    a77e:	de b7       	in	r29, 0x3e	; 62
    a780:	6c 01       	movw	r12, r24
    a782:	06 2f       	mov	r16, r22
    a784:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    a788:	fc 01       	movw	r30, r24
    a78a:	97 fd       	sbrc	r25, 7
    a78c:	00 c0       	rjmp	.+0      	; 0xa78e <_ZN6Stream8parseIntEc+0x24>
    a78e:	20 e0       	ldi	r18, 0x00	; 0
    a790:	30 e0       	ldi	r19, 0x00	; 0
    a792:	a9 01       	movw	r20, r18
    a794:	f1 2c       	mov	r15, r1
    a796:	11 27       	eor	r17, r17
    a798:	07 fd       	sbrc	r16, 7
    a79a:	10 95       	com	r17
    a79c:	e0 17       	cp	r30, r16
    a79e:	f1 07       	cpc	r31, r17
    a7a0:	01 f0       	breq	.+0      	; 0xa7a2 <_ZN6Stream8parseIntEc+0x38>
    a7a2:	ed 32       	cpi	r30, 0x2D	; 45
    a7a4:	f1 05       	cpc	r31, r1
    a7a6:	01 f0       	breq	.+0      	; 0xa7a8 <_ZN6Stream8parseIntEc+0x3e>
    a7a8:	cf 01       	movw	r24, r30
    a7aa:	c0 97       	sbiw	r24, 0x30	; 48
    a7ac:	0a 97       	sbiw	r24, 0x0a	; 10
    a7ae:	00 f4       	brcc	.+0      	; 0xa7b0 <_ZN6Stream8parseIntEc+0x46>
    a7b0:	aa e0       	ldi	r26, 0x0A	; 10
    a7b2:	b0 e0       	ldi	r27, 0x00	; 0
    a7b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    a7b8:	9b 01       	movw	r18, r22
    a7ba:	ac 01       	movw	r20, r24
    a7bc:	cf 01       	movw	r24, r30
    a7be:	aa 27       	eor	r26, r26
    a7c0:	97 fd       	sbrc	r25, 7
    a7c2:	a0 95       	com	r26
    a7c4:	ba 2f       	mov	r27, r26
    a7c6:	28 0f       	add	r18, r24
    a7c8:	39 1f       	adc	r19, r25
    a7ca:	4a 1f       	adc	r20, r26
    a7cc:	5b 1f       	adc	r21, r27
    a7ce:	20 53       	subi	r18, 0x30	; 48
    a7d0:	31 09       	sbc	r19, r1
    a7d2:	41 09       	sbc	r20, r1
    a7d4:	51 09       	sbc	r21, r1
    a7d6:	00 c0       	rjmp	.+0      	; 0xa7d8 <_ZN6Stream8parseIntEc+0x6e>
    a7d8:	ff 24       	eor	r15, r15
    a7da:	f3 94       	inc	r15
    a7dc:	d6 01       	movw	r26, r12
    a7de:	ed 91       	ld	r30, X+
    a7e0:	fc 91       	ld	r31, X
    a7e2:	06 80       	ldd	r0, Z+6	; 0x06
    a7e4:	f7 81       	ldd	r31, Z+7	; 0x07
    a7e6:	e0 2d       	mov	r30, r0
    a7e8:	c6 01       	movw	r24, r12
    a7ea:	29 83       	std	Y+1, r18	; 0x01
    a7ec:	3a 83       	std	Y+2, r19	; 0x02
    a7ee:	4b 83       	std	Y+3, r20	; 0x03
    a7f0:	5c 83       	std	Y+4, r21	; 0x04
    a7f2:	09 95       	icall
    a7f4:	c6 01       	movw	r24, r12
    a7f6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    a7fa:	fc 01       	movw	r30, r24
    a7fc:	c0 97       	sbiw	r24, 0x30	; 48
    a7fe:	29 81       	ldd	r18, Y+1	; 0x01
    a800:	3a 81       	ldd	r19, Y+2	; 0x02
    a802:	4b 81       	ldd	r20, Y+3	; 0x03
    a804:	5c 81       	ldd	r21, Y+4	; 0x04
    a806:	0a 97       	sbiw	r24, 0x0a	; 10
    a808:	00 f0       	brcs	.+0      	; 0xa80a <_ZN6Stream8parseIntEc+0xa0>
    a80a:	e0 17       	cp	r30, r16
    a80c:	f1 07       	cpc	r31, r17
    a80e:	01 f0       	breq	.+0      	; 0xa810 <_ZN6Stream8parseIntEc+0xa6>
    a810:	ff 20       	and	r15, r15
    a812:	01 f0       	breq	.+0      	; 0xa814 <_ZN6Stream8parseIntEc+0xaa>
    a814:	66 27       	eor	r22, r22
    a816:	77 27       	eor	r23, r23
    a818:	cb 01       	movw	r24, r22
    a81a:	62 1b       	sub	r22, r18
    a81c:	73 0b       	sbc	r23, r19
    a81e:	84 0b       	sbc	r24, r20
    a820:	95 0b       	sbc	r25, r21
    a822:	00 c0       	rjmp	.+0      	; 0xa824 <_ZN6Stream8parseIntEc+0xba>
    a824:	60 e0       	ldi	r22, 0x00	; 0
    a826:	70 e0       	ldi	r23, 0x00	; 0
    a828:	cb 01       	movw	r24, r22
    a82a:	00 c0       	rjmp	.+0      	; 0xa82c <_ZN6Stream8parseIntEc+0xc2>
    a82c:	ca 01       	movw	r24, r20
    a82e:	b9 01       	movw	r22, r18
    a830:	0f 90       	pop	r0
    a832:	0f 90       	pop	r0
    a834:	0f 90       	pop	r0
    a836:	0f 90       	pop	r0
    a838:	df 91       	pop	r29
    a83a:	cf 91       	pop	r28
    a83c:	1f 91       	pop	r17
    a83e:	0f 91       	pop	r16
    a840:	ff 90       	pop	r15
    a842:	df 90       	pop	r13
    a844:	cf 90       	pop	r12
    a846:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEv:

00014fb2 <_ZN6Stream8parseIntEv>:
   14fb2:	61 e0       	ldi	r22, 0x01	; 1
   14fb4:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6Stream10parseFloatEc:

00029f6a <_ZN6Stream10parseFloatEc>:
   29f6a:	7f 92       	push	r7
   29f6c:	8f 92       	push	r8
   29f6e:	9f 92       	push	r9
   29f70:	af 92       	push	r10
   29f72:	bf 92       	push	r11
   29f74:	cf 92       	push	r12
   29f76:	df 92       	push	r13
   29f78:	ef 92       	push	r14
   29f7a:	ff 92       	push	r15
   29f7c:	0f 93       	push	r16
   29f7e:	1f 93       	push	r17
   29f80:	cf 93       	push	r28
   29f82:	df 93       	push	r29
   29f84:	ec 01       	movw	r28, r24
   29f86:	76 2e       	mov	r7, r22
   29f88:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   29f8c:	e8 2f       	mov	r30, r24
   29f8e:	87 fd       	sbrc	r24, 7
   29f90:	00 c0       	rjmp	.+0      	; 0x29f92 <_ZN6Stream10parseFloatEc+0x28>
   29f92:	81 2c       	mov	r8, r1
   29f94:	91 2c       	mov	r9, r1
   29f96:	80 e8       	ldi	r24, 0x80	; 128
   29f98:	a8 2e       	mov	r10, r24
   29f9a:	8f e3       	ldi	r24, 0x3F	; 63
   29f9c:	b8 2e       	mov	r11, r24
   29f9e:	c1 2c       	mov	r12, r1
   29fa0:	d1 2c       	mov	r13, r1
   29fa2:	76 01       	movw	r14, r12
   29fa4:	10 e0       	ldi	r17, 0x00	; 0
   29fa6:	00 e0       	ldi	r16, 0x00	; 0
   29fa8:	e7 15       	cp	r30, r7
   29faa:	01 f0       	breq	.+0      	; 0x29fac <_ZN6Stream10parseFloatEc+0x42>
   29fac:	ed 32       	cpi	r30, 0x2D	; 45
   29fae:	01 f0       	breq	.+0      	; 0x29fb0 <_ZN6Stream10parseFloatEc+0x46>
   29fb0:	ee 32       	cpi	r30, 0x2E	; 46
   29fb2:	01 f0       	breq	.+0      	; 0x29fb4 <_ZN6Stream10parseFloatEc+0x4a>
   29fb4:	80 ed       	ldi	r24, 0xD0	; 208
   29fb6:	8e 0f       	add	r24, r30
   29fb8:	8a 30       	cpi	r24, 0x0A	; 10
   29fba:	00 f4       	brcc	.+0      	; 0x29fbc <_ZN6Stream10parseFloatEc+0x52>
   29fbc:	aa e0       	ldi	r26, 0x0A	; 10
   29fbe:	b0 e0       	ldi	r27, 0x00	; 0
   29fc0:	a7 01       	movw	r20, r14
   29fc2:	96 01       	movw	r18, r12
   29fc4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   29fc8:	6b 01       	movw	r12, r22
   29fca:	7c 01       	movw	r14, r24
   29fcc:	4e 2f       	mov	r20, r30
   29fce:	55 27       	eor	r21, r21
   29fd0:	47 fd       	sbrc	r20, 7
   29fd2:	50 95       	com	r21
   29fd4:	65 2f       	mov	r22, r21
   29fd6:	75 2f       	mov	r23, r21
   29fd8:	c4 0e       	add	r12, r20
   29fda:	d5 1e       	adc	r13, r21
   29fdc:	e6 1e       	adc	r14, r22
   29fde:	f7 1e       	adc	r15, r23
   29fe0:	80 e3       	ldi	r24, 0x30	; 48
   29fe2:	c8 1a       	sub	r12, r24
   29fe4:	d1 08       	sbc	r13, r1
   29fe6:	e1 08       	sbc	r14, r1
   29fe8:	f1 08       	sbc	r15, r1
   29fea:	11 23       	and	r17, r17
   29fec:	01 f0       	breq	.+0      	; 0x29fee <_ZN6Stream10parseFloatEc+0x84>
   29fee:	2d ec       	ldi	r18, 0xCD	; 205
   29ff0:	3c ec       	ldi	r19, 0xCC	; 204
   29ff2:	4c ec       	ldi	r20, 0xCC	; 204
   29ff4:	5d e3       	ldi	r21, 0x3D	; 61
   29ff6:	c5 01       	movw	r24, r10
   29ff8:	b4 01       	movw	r22, r8
   29ffa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   29ffe:	4b 01       	movw	r8, r22
   2a000:	5c 01       	movw	r10, r24
   2a002:	00 c0       	rjmp	.+0      	; 0x2a004 <_ZN6Stream10parseFloatEc+0x9a>
   2a004:	01 e0       	ldi	r16, 0x01	; 1
   2a006:	00 c0       	rjmp	.+0      	; 0x2a008 <_ZN6Stream10parseFloatEc+0x9e>
   2a008:	11 e0       	ldi	r17, 0x01	; 1
   2a00a:	e8 81       	ld	r30, Y
   2a00c:	f9 81       	ldd	r31, Y+1	; 0x01
   2a00e:	06 80       	ldd	r0, Z+6	; 0x06
   2a010:	f7 81       	ldd	r31, Z+7	; 0x07
   2a012:	e0 2d       	mov	r30, r0
   2a014:	ce 01       	movw	r24, r28
   2a016:	09 95       	icall
   2a018:	ce 01       	movw	r24, r28
   2a01a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   2a01e:	e8 2f       	mov	r30, r24
   2a020:	90 ed       	ldi	r25, 0xD0	; 208
   2a022:	98 0f       	add	r25, r24
   2a024:	9a 30       	cpi	r25, 0x0A	; 10
   2a026:	00 f4       	brcc	.+0      	; 0x2a028 <_ZN6Stream10parseFloatEc+0xbe>
   2a028:	00 c0       	rjmp	.+0      	; 0x2a02a <_ZN6Stream10parseFloatEc+0xc0>
   2a02a:	8e 32       	cpi	r24, 0x2E	; 46
   2a02c:	01 f4       	brne	.+0      	; 0x2a02e <_ZN6Stream10parseFloatEc+0xc4>
   2a02e:	00 c0       	rjmp	.+0      	; 0x2a030 <_ZN6Stream10parseFloatEc+0xc6>
   2a030:	87 15       	cp	r24, r7
   2a032:	01 f4       	brne	.+0      	; 0x2a034 <_ZN6Stream10parseFloatEc+0xca>
   2a034:	00 c0       	rjmp	.+0      	; 0x2a036 <_ZN6Stream10parseFloatEc+0xcc>
   2a036:	00 23       	and	r16, r16
   2a038:	01 f0       	breq	.+0      	; 0x2a03a <_ZN6Stream10parseFloatEc+0xd0>
   2a03a:	f0 94       	com	r15
   2a03c:	e0 94       	com	r14
   2a03e:	d0 94       	com	r13
   2a040:	c0 94       	com	r12
   2a042:	c1 1c       	adc	r12, r1
   2a044:	d1 1c       	adc	r13, r1
   2a046:	e1 1c       	adc	r14, r1
   2a048:	f1 1c       	adc	r15, r1
   2a04a:	c7 01       	movw	r24, r14
   2a04c:	b6 01       	movw	r22, r12
   2a04e:	11 23       	and	r17, r17
   2a050:	01 f0       	breq	.+0      	; 0x2a052 <_ZN6Stream10parseFloatEc+0xe8>
   2a052:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   2a056:	a5 01       	movw	r20, r10
   2a058:	94 01       	movw	r18, r8
   2a05a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   2a05e:	00 c0       	rjmp	.+0      	; 0x2a060 <_ZN6Stream10parseFloatEc+0xf6>
   2a060:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   2a064:	00 c0       	rjmp	.+0      	; 0x2a066 <_ZN6Stream10parseFloatEc+0xfc>
   2a066:	60 e0       	ldi	r22, 0x00	; 0
   2a068:	70 e0       	ldi	r23, 0x00	; 0
   2a06a:	cb 01       	movw	r24, r22
   2a06c:	df 91       	pop	r29
   2a06e:	cf 91       	pop	r28
   2a070:	1f 91       	pop	r17
   2a072:	0f 91       	pop	r16
   2a074:	ff 90       	pop	r15
   2a076:	ef 90       	pop	r14
   2a078:	df 90       	pop	r13
   2a07a:	cf 90       	pop	r12
   2a07c:	bf 90       	pop	r11
   2a07e:	af 90       	pop	r10
   2a080:	9f 90       	pop	r9
   2a082:	8f 90       	pop	r8
   2a084:	7f 90       	pop	r7
   2a086:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEv:

00053ff2 <_ZN6Stream10parseFloatEv>:
   53ff2:	61 e0       	ldi	r22, 0x01	; 1
   53ff4:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6Stream9readBytesEPcj:

000a7fea <_ZN6Stream9readBytesEPcj>:
   a7fea:	cf 92       	push	r12
   a7fec:	df 92       	push	r13
   a7fee:	ef 92       	push	r14
   a7ff0:	ff 92       	push	r15
   a7ff2:	0f 93       	push	r16
   a7ff4:	1f 93       	push	r17
   a7ff6:	cf 93       	push	r28
   a7ff8:	df 93       	push	r29
   a7ffa:	7c 01       	movw	r14, r24
   a7ffc:	6a 01       	movw	r12, r20
   a7ffe:	eb 01       	movw	r28, r22
   a8000:	00 e0       	ldi	r16, 0x00	; 0
   a8002:	10 e0       	ldi	r17, 0x00	; 0
   a8004:	0c 15       	cp	r16, r12
   a8006:	1d 05       	cpc	r17, r13
   a8008:	01 f0       	breq	.+0      	; 0xa800a <_ZN6Stream9readBytesEPcj+0x20>
   a800a:	c7 01       	movw	r24, r14
   a800c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   a8010:	97 fd       	sbrc	r25, 7
   a8012:	00 c0       	rjmp	.+0      	; 0xa8014 <_ZN6Stream9readBytesEPcj+0x2a>
   a8014:	89 93       	st	Y+, r24
   a8016:	0f 5f       	subi	r16, 0xFF	; 255
   a8018:	1f 4f       	sbci	r17, 0xFF	; 255
   a801a:	00 c0       	rjmp	.+0      	; 0xa801c <_ZN6Stream9readBytesEPcj+0x32>
   a801c:	c8 01       	movw	r24, r16
   a801e:	df 91       	pop	r29
   a8020:	cf 91       	pop	r28
   a8022:	1f 91       	pop	r17
   a8024:	0f 91       	pop	r16
   a8026:	ff 90       	pop	r15
   a8028:	ef 90       	pop	r14
   a802a:	df 90       	pop	r13
   a802c:	cf 90       	pop	r12
   a802e:	08 95       	ret

Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

0015001a <_ZN6Stream14readBytesUntilEcPcj>:
  15001a:	af 92       	push	r10
  15001c:	bf 92       	push	r11
  15001e:	cf 92       	push	r12
  150020:	df 92       	push	r13
  150022:	ef 92       	push	r14
  150024:	ff 92       	push	r15
  150026:	0f 93       	push	r16
  150028:	1f 93       	push	r17
  15002a:	cf 93       	push	r28
  15002c:	df 93       	push	r29
  15002e:	6c 01       	movw	r12, r24
  150030:	79 01       	movw	r14, r18
  150032:	21 15       	cp	r18, r1
  150034:	31 05       	cpc	r19, r1
  150036:	01 f0       	breq	.+0      	; 0x150038 <_ZN6Stream14readBytesUntilEcPcj+0x1e>
  150038:	8a 01       	movw	r16, r20
  15003a:	c0 e0       	ldi	r28, 0x00	; 0
  15003c:	d0 e0       	ldi	r29, 0x00	; 0
  15003e:	a6 2e       	mov	r10, r22
  150040:	bb 24       	eor	r11, r11
  150042:	a7 fc       	sbrc	r10, 7
  150044:	b0 94       	com	r11
  150046:	c6 01       	movw	r24, r12
  150048:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  15004c:	97 fd       	sbrc	r25, 7
  15004e:	00 c0       	rjmp	.+0      	; 0x150050 <_ZN6Stream14readBytesUntilEcPcj+0x36>
  150050:	8a 15       	cp	r24, r10
  150052:	9b 05       	cpc	r25, r11
  150054:	01 f0       	breq	.+0      	; 0x150056 <_ZN6Stream14readBytesUntilEcPcj+0x3c>
  150056:	f8 01       	movw	r30, r16
  150058:	81 93       	st	Z+, r24
  15005a:	8f 01       	movw	r16, r30
  15005c:	21 96       	adiw	r28, 0x01	; 1
  15005e:	ce 15       	cp	r28, r14
  150060:	df 05       	cpc	r29, r15
  150062:	01 f4       	brne	.+0      	; 0x150064 <_ZN6Stream14readBytesUntilEcPcj+0x4a>
  150064:	00 c0       	rjmp	.+0      	; 0x150066 <_ZN6Stream14readBytesUntilEcPcj+0x4c>
  150066:	80 e0       	ldi	r24, 0x00	; 0
  150068:	90 e0       	ldi	r25, 0x00	; 0
  15006a:	00 c0       	rjmp	.+0      	; 0x15006c <_ZN6Stream14readBytesUntilEcPcj+0x52>
  15006c:	ce 01       	movw	r24, r28
  15006e:	df 91       	pop	r29
  150070:	cf 91       	pop	r28
  150072:	1f 91       	pop	r17
  150074:	0f 91       	pop	r16
  150076:	ff 90       	pop	r15
  150078:	ef 90       	pop	r14
  15007a:	df 90       	pop	r13
  15007c:	cf 90       	pop	r12
  15007e:	bf 90       	pop	r11
  150080:	af 90       	pop	r10
  150082:	08 95       	ret

Disassembly of section .text._ZN6Stream10readStringEv:

002a009e <_ZN6Stream10readStringEv>:
  2a009e:	0f 93       	push	r16
  2a00a0:	1f 93       	push	r17
  2a00a2:	cf 93       	push	r28
  2a00a4:	df 93       	push	r29
  2a00a6:	ec 01       	movw	r28, r24
  2a00a8:	8b 01       	movw	r16, r22
  2a00aa:	60 e0       	ldi	r22, 0x00	; 0
  2a00ac:	70 e0       	ldi	r23, 0x00	; 0
  2a00ae:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2a00b2:	c8 01       	movw	r24, r16
  2a00b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2a00b8:	97 fd       	sbrc	r25, 7
  2a00ba:	00 c0       	rjmp	.+0      	; 0x2a00bc <_ZN6Stream10readStringEv+0x1e>
  2a00bc:	68 2f       	mov	r22, r24
  2a00be:	ce 01       	movw	r24, r28
  2a00c0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2a00c4:	00 c0       	rjmp	.+0      	; 0x2a00c6 <_ZN6Stream10readStringEv+0x28>
  2a00c6:	ce 01       	movw	r24, r28
  2a00c8:	df 91       	pop	r29
  2a00ca:	cf 91       	pop	r28
  2a00cc:	1f 91       	pop	r17
  2a00ce:	0f 91       	pop	r16
  2a00d0:	08 95       	ret

Disassembly of section .text._ZN6Stream15readStringUntilEc:

00540170 <_ZN6Stream15readStringUntilEc>:
  540170:	ef 92       	push	r14
  540172:	ff 92       	push	r15
  540174:	0f 93       	push	r16
  540176:	1f 93       	push	r17
  540178:	cf 93       	push	r28
  54017a:	df 93       	push	r29
  54017c:	ec 01       	movw	r28, r24
  54017e:	8b 01       	movw	r16, r22
  540180:	e4 2e       	mov	r14, r20
  540182:	60 e0       	ldi	r22, 0x00	; 0
  540184:	70 e0       	ldi	r23, 0x00	; 0
  540186:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  54018a:	c8 01       	movw	r24, r16
  54018c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  540190:	ff 24       	eor	r15, r15
  540192:	e7 fc       	sbrc	r14, 7
  540194:	f0 94       	com	r15
  540196:	97 fd       	sbrc	r25, 7
  540198:	00 c0       	rjmp	.+0      	; 0x54019a <_ZN6Stream15readStringUntilEc+0x2a>
  54019a:	8e 15       	cp	r24, r14
  54019c:	9f 05       	cpc	r25, r15
  54019e:	01 f0       	breq	.+0      	; 0x5401a0 <_ZN6Stream15readStringUntilEc+0x30>
  5401a0:	68 2f       	mov	r22, r24
  5401a2:	ce 01       	movw	r24, r28
  5401a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  5401a8:	c8 01       	movw	r24, r16
  5401aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  5401ae:	00 c0       	rjmp	.+0      	; 0x5401b0 <_ZN6Stream15readStringUntilEc+0x40>
  5401b0:	ce 01       	movw	r24, r28
  5401b2:	df 91       	pop	r29
  5401b4:	cf 91       	pop	r28
  5401b6:	1f 91       	pop	r17
  5401b8:	0f 91       	pop	r16
  5401ba:	ff 90       	pop	r15
  5401bc:	ef 90       	pop	r14
  5401be:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000d2c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001294  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z4tonehjm 00000410  00000000  00000000  00001ff4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z12disableTimerh 00000040  00000000  00000000  00002404  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6noToneh 0000002a  00000000  00000000  00002444  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_7 000000b8  00000000  00000000  0000246e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data._ZL21tone_pin_to_timer_PGM 00000001  00000000  00000000  00002526  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data._ZL9tone_pins 00000001  00000000  00000000  00002527  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss.timer2_pin_mask 00000001  00000000  00000000  00002528  2**0
                  ALLOC
 12 .bss.timer2_pin_port 00000002  00000000  00000000  00002528  2**0
                  ALLOC
 13 .bss.timer2_toggle_count 00000004  00000000  00000000  00002528  2**0
                  ALLOC
 14 .bss.timer1_pin_mask 00000001  00000000  00000000  00002528  2**0
                  ALLOC
 15 .bss.timer1_pin_port 00000002  00000000  00000000  00002528  2**0
                  ALLOC
 16 .bss.timer1_toggle_count 00000004  00000000  00000000  00002528  2**0
                  ALLOC
 17 .bss.timer0_pin_mask 00000001  00000000  00000000  00002528  2**0
                  ALLOC
 18 .bss.timer0_pin_port 00000002  00000000  00000000  00002528  2**0
                  ALLOC
 19 .bss.timer0_toggle_count 00000004  00000000  00000000  00002528  2**0
                  ALLOC
 20 .comment      00000012  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	3f 92       	push	r3
   2:	4f 92       	push	r4
   4:	5f 92       	push	r5
   6:	6f 92       	push	r6
   8:	7f 92       	push	r7
   a:	8f 92       	push	r8
   c:	9f 92       	push	r9
   e:	af 92       	push	r10
  10:	bf 92       	push	r11
  12:	cf 92       	push	r12
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	cf 93       	push	r28
  20:	df 93       	push	r29

  if (timer2_toggle_count != 0)
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z4tonehjm+0x24>
  24:	00 d0       	rcall	.+0      	; 0x26 <_Z4tonehjm+0x26>
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	8b 01       	movw	r16, r22
  2c:	29 01       	movw	r4, r18
  2e:	3a 01       	movw	r6, r20
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	98 17       	cp	r25, r24
  36:	01 f0       	breq	.+0      	; 0x38 <_Z4tonehjm+0x38>
  38:	9f 3f       	cpi	r25, 0xFF	; 255
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3a:	01 f0       	breq	.+0      	; 0x3c <_Z4tonehjm+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_Z4tonehjm+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_Z4tonehjm+0x40>
  40:	e0 e0       	ldi	r30, 0x00	; 0
  42:	f0 e0       	ldi	r31, 0x00	; 0
  44:	34 90       	lpm	r3, Z
  46:	00 c0       	rjmp	.+0      	; 0x48 <_Z4tonehjm+0x48>
  48:	80 93 00 00 	sts	0x0000, r24

    if (timer2_toggle_count > 0)
  4c:	e0 e0       	ldi	r30, 0x00	; 0
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	e4 91       	lpm	r30, Z
  52:	ef 3f       	cpi	r30, 0xFF	; 255
  54:	01 f4       	brne	.+0      	; 0x56 <_Z4tonehjm+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <_Z4tonehjm+0x58>
  58:	e1 30       	cpi	r30, 0x01	; 1
  5a:	01 f0       	breq	.+0      	; 0x5c <_Z4tonehjm+0x5c>
  5c:	e2 30       	cpi	r30, 0x02	; 2
  5e:	01 f4       	brne	.+0      	; 0x60 <_Z4tonehjm+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_Z4tonehjm+0x62>
  62:	e1 11       	cpse	r30, r1
  64:	00 c0       	rjmp	.+0      	; 0x66 <_Z4tonehjm+0x66>
      timer2_toggle_count--;
  66:	14 bc       	out	0x24, r1	; 36
  68:	15 bc       	out	0x25, r1	; 37
  6a:	94 b5       	in	r25, 0x24	; 36
  6c:	92 60       	ori	r25, 0x02	; 2
  6e:	94 bd       	out	0x24, r25	; 36
  70:	95 b5       	in	r25, 0x25	; 37
  72:	91 60       	ori	r25, 0x01	; 1
  74:	95 bd       	out	0x25, r25	; 37
  76:	28 2f       	mov	r18, r24
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	f9 01       	movw	r30, r18
  7c:	e0 50       	subi	r30, 0x00	; 0
  7e:	f0 40       	sbci	r31, 0x00	; 0
  80:	e4 91       	lpm	r30, Z
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	ee 0f       	add	r30, r30
  86:	ff 1f       	adc	r31, r31
  88:	e0 50       	subi	r30, 0x00	; 0
  8a:	f0 40       	sbci	r31, 0x00	; 0
  8c:	45 91       	lpm	r20, Z+
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  8e:	54 91       	lpm	r21, Z
  90:	50 93 00 00 	sts	0x0000, r21
  94:	40 93 00 00 	sts	0x0000, r20
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  98:	f9 01       	movw	r30, r18
  9a:	e0 50       	subi	r30, 0x00	; 0
  9c:	f0 40       	sbci	r31, 0x00	; 0
  9e:	24 91       	lpm	r18, Z
  a0:	20 93 00 00 	sts	0x0000, r18
  a4:	31 2c       	mov	r3, r1
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_Z4tonehjm+0xa8>
  a8:	10 92 80 00 	sts	0x0080, r1
  ac:	10 92 81 00 	sts	0x0081, r1
  b0:	90 91 81 00 	lds	r25, 0x0081
  b4:	98 60       	ori	r25, 0x08	; 8
  b6:	90 93 81 00 	sts	0x0081, r25
  ba:	90 91 81 00 	lds	r25, 0x0081
  be:	91 60       	ori	r25, 0x01	; 1
  c0:	90 93 81 00 	sts	0x0081, r25
  c4:	28 2f       	mov	r18, r24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	e0 50       	subi	r30, 0x00	; 0
  cc:	f0 40       	sbci	r31, 0x00	; 0
  ce:	e4 91       	lpm	r30, Z
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	f0 40       	sbci	r31, 0x00	; 0
  da:	45 91       	lpm	r20, Z+
  dc:	54 91       	lpm	r21, Z
  de:	50 93 00 00 	sts	0x0000, r21
  e2:	40 93 00 00 	sts	0x0000, r20
  e6:	f9 01       	movw	r30, r18
  e8:	e0 50       	subi	r30, 0x00	; 0
  ea:	f0 40       	sbci	r31, 0x00	; 0
  ec:	24 91       	lpm	r18, Z
  ee:	20 93 00 00 	sts	0x0000, r18
  f2:	33 24       	eor	r3, r3
  f4:	33 94       	inc	r3
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z4tonehjm+0xf8>
  f8:	10 92 b0 00 	sts	0x00B0, r1
  fc:	10 92 b1 00 	sts	0x00B1, r1
 100:	90 91 b0 00 	lds	r25, 0x00B0
 104:	92 60       	ori	r25, 0x02	; 2
 106:	90 93 b0 00 	sts	0x00B0, r25
 10a:	90 91 b1 00 	lds	r25, 0x00B1
 10e:	91 60       	ori	r25, 0x01	; 1
 110:	90 93 b1 00 	sts	0x00B1, r25
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	f0 40       	sbci	r31, 0x00	; 0
 11e:	e4 91       	lpm	r30, Z
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	e0 50       	subi	r30, 0x00	; 0
 128:	f0 40       	sbci	r31, 0x00	; 0
 12a:	45 91       	lpm	r20, Z+
 12c:	54 91       	lpm	r21, Z
 12e:	50 93 00 00 	sts	0x0000, r21
 132:	40 93 00 00 	sts	0x0000, r20
 136:	f9 01       	movw	r30, r18
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	f0 40       	sbci	r31, 0x00	; 0
 13c:	24 91       	lpm	r18, Z
 13e:	20 93 00 00 	sts	0x0000, r18
 142:	52 e0       	ldi	r21, 0x02	; 2
 144:	35 2e       	mov	r3, r21
 146:	00 c0       	rjmp	.+0      	; 0x148 <_Z4tonehjm+0x148>
 148:	3e 2e       	mov	r3, r30
 14a:	37 fc       	sbrc	r3, 7
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_Z4tonehjm+0x14e>
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 154:	48 01       	movw	r8, r16
 156:	a1 2c       	mov	r10, r1
 158:	b1 2c       	mov	r11, r1
 15a:	83 2d       	mov	r24, r3
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	01 f0       	breq	.+0      	; 0x160 <_Z4tonehjm+0x160>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z4tonehjm+0x162>
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	72 e1       	ldi	r23, 0x12	; 18
 166:	8a e7       	ldi	r24, 0x7A	; 122
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a5 01       	movw	r20, r10
 16c:	94 01       	movw	r18, r8
 16e:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 172:	29 83       	std	Y+1, r18	; 0x01
 174:	3a 83       	std	Y+2, r19	; 0x02
 176:	4b 83       	std	Y+3, r20	; 0x03
 178:	5c 83       	std	Y+4, r21	; 0x04
 17a:	69 01       	movw	r12, r18
 17c:	7a 01       	movw	r14, r20
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	c8 1a       	sub	r12, r24
 182:	d1 08       	sbc	r13, r1
 184:	e1 08       	sbc	r14, r1
 186:	f1 08       	sbc	r15, r1
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	c9 16       	cp	r12, r25
 18c:	d1 04       	cpc	r13, r1
 18e:	e1 04       	cpc	r14, r1
 190:	f1 04       	cpc	r15, r1
 192:	01 f0       	breq	.+0      	; 0x194 <_Z4tonehjm+0x194>
 194:	00 f4       	brcc	.+0      	; 0x196 <_Z4tonehjm+0x196>
 196:	00 c0       	rjmp	.+0      	; 0x198 <_Z4tonehjm+0x198>
 198:	60 e4       	ldi	r22, 0x40	; 64
 19a:	72 e4       	ldi	r23, 0x42	; 66
 19c:	8f e0       	ldi	r24, 0x0F	; 15
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	a5 01       	movw	r20, r10
 1a2:	94 01       	movw	r18, r8
 1a4:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1a8:	69 01       	movw	r12, r18
 1aa:	7a 01       	movw	r14, r20
 1ac:	e1 e0       	ldi	r30, 0x01	; 1
 1ae:	ce 1a       	sub	r12, r30
 1b0:	d1 08       	sbc	r13, r1
 1b2:	e1 08       	sbc	r14, r1
 1b4:	f1 08       	sbc	r15, r1
 1b6:	f2 e0       	ldi	r31, 0x02	; 2
 1b8:	3f 12       	cpse	r3, r31
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <_Z4tonehjm+0x1bc>
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	c8 16       	cp	r12, r24
 1c0:	d1 04       	cpc	r13, r1
 1c2:	e1 04       	cpc	r14, r1
 1c4:	f1 04       	cpc	r15, r1
 1c6:	01 f0       	breq	.+0      	; 0x1c8 <_Z4tonehjm+0x1c8>
 1c8:	00 f4       	brcc	.+0      	; 0x1ca <_Z4tonehjm+0x1ca>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_Z4tonehjm+0x1cc>
 1cc:	60 e9       	ldi	r22, 0x90	; 144
 1ce:	70 ed       	ldi	r23, 0xD0	; 208
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	a5 01       	movw	r20, r10
 1d6:	94 01       	movw	r18, r8
 1d8:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1dc:	69 01       	movw	r12, r18
 1de:	7a 01       	movw	r14, r20
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	c9 1a       	sub	r12, r25
 1e4:	d1 08       	sbc	r13, r1
 1e6:	e1 08       	sbc	r14, r1
 1e8:	f1 08       	sbc	r15, r1
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_Z4tonehjm+0x1ee>
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	ef ef       	ldi	r30, 0xFF	; 255
 1f2:	ce 16       	cp	r12, r30
 1f4:	d1 04       	cpc	r13, r1
 1f6:	e1 04       	cpc	r14, r1
 1f8:	f1 04       	cpc	r15, r1
 1fa:	01 f0       	breq	.+0      	; 0x1fc <_Z4tonehjm+0x1fc>
 1fc:	00 f4       	brcc	.+0      	; 0x1fe <_Z4tonehjm+0x1fe>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z4tonehjm+0x200>
 200:	68 e4       	ldi	r22, 0x48	; 72
 202:	78 ee       	ldi	r23, 0xE8	; 232
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	a5 01       	movw	r20, r10
 20a:	94 01       	movw	r18, r8
 20c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 210:	69 01       	movw	r12, r18
 212:	7a 01       	movw	r14, r20
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	cf 1a       	sub	r12, r31
 218:	d1 08       	sbc	r13, r1
 21a:	e1 08       	sbc	r14, r1
 21c:	f1 08       	sbc	r15, r1
 21e:	33 20       	and	r3, r3
 220:	01 f0       	breq	.+0      	; 0x222 <_Z4tonehjm+0x222>
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	38 12       	cpse	r3, r24
 226:	00 c0       	rjmp	.+0      	; 0x228 <_Z4tonehjm+0x228>
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	c9 16       	cp	r12, r25
 22c:	d1 04       	cpc	r13, r1
 22e:	e1 04       	cpc	r14, r1
 230:	f1 04       	cpc	r15, r1
 232:	01 f0       	breq	.+0      	; 0x234 <_Z4tonehjm+0x234>
 234:	00 f4       	brcc	.+0      	; 0x236 <_Z4tonehjm+0x236>
 236:	00 c0       	rjmp	.+0      	; 0x238 <_Z4tonehjm+0x238>
 238:	64 e2       	ldi	r22, 0x24	; 36
 23a:	74 ef       	ldi	r23, 0xF4	; 244
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	a5 01       	movw	r20, r10
 242:	94 01       	movw	r18, r8
 244:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 248:	69 01       	movw	r12, r18
 24a:	7a 01       	movw	r14, r20
 24c:	e1 e0       	ldi	r30, 0x01	; 1
 24e:	ce 1a       	sub	r12, r30
 250:	d1 08       	sbc	r13, r1
 252:	e1 08       	sbc	r14, r1
 254:	f1 08       	sbc	r15, r1
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	00 c0       	rjmp	.+0      	; 0x25a <_Z4tonehjm+0x25a>
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	00 c0       	rjmp	.+0      	; 0x25e <_Z4tonehjm+0x25e>
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	ff ef       	ldi	r31, 0xFF	; 255
 262:	cf 16       	cp	r12, r31
 264:	d1 04       	cpc	r13, r1
 266:	e1 04       	cpc	r14, r1
 268:	f1 04       	cpc	r15, r1
 26a:	01 f0       	breq	.+0      	; 0x26c <_Z4tonehjm+0x26c>
 26c:	00 f0       	brcs	.+0      	; 0x26e <_Z4tonehjm+0x26e>
 26e:	62 e1       	ldi	r22, 0x12	; 18
 270:	7a e7       	ldi	r23, 0x7A	; 122
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	a5 01       	movw	r20, r10
 278:	94 01       	movw	r18, r8
 27a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 27e:	69 01       	movw	r12, r18
 280:	7a 01       	movw	r14, r20
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	c8 1a       	sub	r12, r24
 286:	d1 08       	sbc	r13, r1
 288:	e1 08       	sbc	r14, r1
 28a:	f1 08       	sbc	r15, r1
 28c:	31 10       	cpse	r3, r1
 28e:	00 c0       	rjmp	.+0      	; 0x290 <_Z4tonehjm+0x290>
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	00 c0       	rjmp	.+0      	; 0x294 <_Z4tonehjm+0x294>
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	9f ef       	ldi	r25, 0xFF	; 255
 298:	c9 16       	cp	r12, r25
 29a:	d1 04       	cpc	r13, r1
 29c:	e1 04       	cpc	r14, r1
 29e:	f1 04       	cpc	r15, r1
 2a0:	01 f0       	breq	.+0      	; 0x2a2 <_Z4tonehjm+0x2a2>
 2a2:	00 f0       	brcs	.+0      	; 0x2a4 <_Z4tonehjm+0x2a4>
 2a4:	c9 80       	ldd	r12, Y+1	; 0x01
 2a6:	da 80       	ldd	r13, Y+2	; 0x02
 2a8:	eb 80       	ldd	r14, Y+3	; 0x03
 2aa:	fc 80       	ldd	r15, Y+4	; 0x04
 2ac:	9a e0       	ldi	r25, 0x0A	; 10
 2ae:	f6 94       	lsr	r15
 2b0:	e7 94       	ror	r14
 2b2:	d7 94       	ror	r13
 2b4:	c7 94       	ror	r12
 2b6:	9a 95       	dec	r25
 2b8:	01 f4       	brne	.+0      	; 0x2ba <_Z4tonehjm+0x2ba>
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	ce 1a       	sub	r12, r30
 2be:	d1 08       	sbc	r13, r1
 2c0:	e1 08       	sbc	r14, r1
 2c2:	f1 08       	sbc	r15, r1
 2c4:	33 20       	and	r3, r3
 2c6:	01 f0       	breq	.+0      	; 0x2c8 <_Z4tonehjm+0x2c8>
 2c8:	87 e0       	ldi	r24, 0x07	; 7
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <_Z4tonehjm+0x2cc>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	33 20       	and	r3, r3
 2d0:	01 f0       	breq	.+0      	; 0x2d2 <_Z4tonehjm+0x2d2>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <_Z4tonehjm+0x2d4>
 2d4:	85 e0       	ldi	r24, 0x05	; 5
 2d6:	85 bd       	out	0x25, r24	; 37
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <_Z4tonehjm+0x2da>
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	80 93 b1 00 	sts	0x00B1, r24
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <_Z4tonehjm+0x2e2>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	72 e1       	ldi	r23, 0x12	; 18
 2e6:	8a e7       	ldi	r24, 0x7A	; 122
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a5 01       	movw	r20, r10
 2ec:	94 01       	movw	r18, r8
 2ee:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2f2:	69 01       	movw	r12, r18
 2f4:	7a 01       	movw	r14, r20
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	cf 1a       	sub	r12, r31
 2fa:	d1 08       	sbc	r13, r1
 2fc:	e1 08       	sbc	r14, r1
 2fe:	f1 08       	sbc	r15, r1
 300:	c1 14       	cp	r12, r1
 302:	d1 04       	cpc	r13, r1
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	e8 06       	cpc	r14, r24
 308:	f1 04       	cpc	r15, r1
 30a:	00 f0       	brcs	.+0      	; 0x30c <_Z4tonehjm+0x30c>
 30c:	68 e4       	ldi	r22, 0x48	; 72
 30e:	78 ee       	ldi	r23, 0xE8	; 232
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	a5 01       	movw	r20, r10
 316:	94 01       	movw	r18, r8
 318:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 31c:	69 01       	movw	r12, r18
 31e:	7a 01       	movw	r14, r20
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	c9 1a       	sub	r12, r25
 324:	d1 08       	sbc	r13, r1
 326:	e1 08       	sbc	r14, r1
 328:	f1 08       	sbc	r15, r1
 32a:	93 e0       	ldi	r25, 0x03	; 3
 32c:	00 c0       	rjmp	.+0      	; 0x32e <_Z4tonehjm+0x32e>
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	e1 e0       	ldi	r30, 0x01	; 1
 332:	3e 12       	cpse	r3, r30
 334:	00 c0       	rjmp	.+0      	; 0x336 <_Z4tonehjm+0x336>
 336:	80 91 81 00 	lds	r24, 0x0081
 33a:	88 7f       	andi	r24, 0xF8	; 248
 33c:	89 2b       	or	r24, r25
 33e:	80 93 81 00 	sts	0x0081, r24
 342:	41 14       	cp	r4, r1
 344:	51 04       	cpc	r5, r1
 346:	61 04       	cpc	r6, r1
 348:	71 04       	cpc	r7, r1
 34a:	01 f0       	breq	.+0      	; 0x34c <_Z4tonehjm+0x34c>
 34c:	d8 01       	movw	r26, r16
 34e:	aa 0f       	add	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	a3 01       	movw	r20, r6
 354:	92 01       	movw	r18, r4
 356:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 35a:	28 ee       	ldi	r18, 0xE8	; 232
 35c:	33 e0       	ldi	r19, 0x03	; 3
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 366:	00 c0       	rjmp	.+0      	; 0x368 <_Z4tonehjm+0x368>
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	3f ef       	ldi	r19, 0xFF	; 255
 36c:	a9 01       	movw	r20, r18
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	3f 16       	cp	r3, r31
 372:	01 f0       	breq	.+0      	; 0x374 <_Z4tonehjm+0x374>
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	38 16       	cp	r3, r24
 378:	01 f0       	breq	.+0      	; 0x37a <_Z4tonehjm+0x37a>
 37a:	31 10       	cpse	r3, r1
 37c:	00 c0       	rjmp	.+0      	; 0x37e <_Z4tonehjm+0x37e>
 37e:	c7 bc       	out	0x27, r12	; 39
 380:	20 93 00 00 	sts	0x0000, r18
 384:	30 93 00 00 	sts	0x0000, r19
 388:	40 93 00 00 	sts	0x0000, r20
 38c:	50 93 00 00 	sts	0x0000, r21
 390:	80 91 6e 00 	lds	r24, 0x006E
 394:	82 60       	ori	r24, 0x02	; 2
 396:	80 93 6e 00 	sts	0x006E, r24
 39a:	00 c0       	rjmp	.+0      	; 0x39c <_Z4tonehjm+0x39c>
 39c:	d0 92 89 00 	sts	0x0089, r13
 3a0:	c0 92 88 00 	sts	0x0088, r12
 3a4:	20 93 00 00 	sts	0x0000, r18
 3a8:	30 93 00 00 	sts	0x0000, r19
 3ac:	40 93 00 00 	sts	0x0000, r20
 3b0:	50 93 00 00 	sts	0x0000, r21
 3b4:	80 91 6f 00 	lds	r24, 0x006F
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	80 93 6f 00 	sts	0x006F, r24
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <_Z4tonehjm+0x3c0>
 3c0:	c0 92 b3 00 	sts	0x00B3, r12
 3c4:	20 93 00 00 	sts	0x0000, r18
 3c8:	30 93 00 00 	sts	0x0000, r19
 3cc:	40 93 00 00 	sts	0x0000, r20
 3d0:	50 93 00 00 	sts	0x0000, r21
 3d4:	80 91 70 00 	lds	r24, 0x0070
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	80 93 70 00 	sts	0x0070, r24
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <_Z4tonehjm+0x3e0>
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <_Z4tonehjm+0x3e4>
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	df 90       	pop	r13
 3fa:	cf 90       	pop	r12
 3fc:	bf 90       	pop	r11
 3fe:	af 90       	pop	r10
 400:	9f 90       	pop	r9
 402:	8f 90       	pop	r8
 404:	7f 90       	pop	r7
 406:	6f 90       	pop	r6
 408:	5f 90       	pop	r5
 40a:	4f 90       	pop	r4
 40c:	3f 90       	pop	r3
 40e:	08 95       	ret

Disassembly of section .text._Z12disableTimerh:

00000410 <_Z12disableTimerh>:
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	01 f0       	breq	.+0      	; 0x414 <_Z12disableTimerh+0x4>
 414:	00 f0       	brcs	.+0      	; 0x416 <_Z12disableTimerh+0x6>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	01 f0       	breq	.+0      	; 0x41a <_Z12disableTimerh+0xa>
 41a:	08 95       	ret
 41c:	10 92 6e 00 	sts	0x006E, r1
 420:	08 95       	ret
 422:	80 91 6f 00 	lds	r24, 0x006F
 426:	8d 7f       	andi	r24, 0xFD	; 253
 428:	80 93 6f 00 	sts	0x006F, r24
 42c:	08 95       	ret
 42e:	80 91 70 00 	lds	r24, 0x0070
 432:	8d 7f       	andi	r24, 0xFD	; 253
 434:	80 93 70 00 	sts	0x0070, r24
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	80 93 b0 00 	sts	0x00B0, r24
 43e:	80 91 b1 00 	lds	r24, 0x00B1
 442:	88 7f       	andi	r24, 0xF8	; 248
 444:	84 60       	ori	r24, 0x04	; 4
 446:	80 93 b1 00 	sts	0x00B1, r24
 44a:	10 92 b3 00 	sts	0x00B3, r1
 44e:	08 95       	ret

Disassembly of section .text._Z6noToneh:

00000860 <_Z6noToneh>:
 860:	cf 93       	push	r28
 862:	c8 2f       	mov	r28, r24
 864:	80 91 00 00 	lds	r24, 0x0000
 868:	8c 13       	cpse	r24, r28
 86a:	00 c0       	rjmp	.+0      	; 0x86c <_Z6noToneh+0xc>
 86c:	e0 e0       	ldi	r30, 0x00	; 0
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	84 91       	lpm	r24, Z
 872:	9f ef       	ldi	r25, 0xFF	; 255
 874:	90 93 00 00 	sts	0x0000, r25
 878:	00 c0       	rjmp	.+0      	; 0x87a <_Z6noToneh+0x1a>
 87a:	8f ef       	ldi	r24, 0xFF	; 255
 87c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	8c 2f       	mov	r24, r28
 884:	cf 91       	pop	r28
 886:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.__vector_7:

000010ea <__vector_7>:
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
    110c:	80 91 00 00 	lds	r24, 0x0000
    1110:	90 91 00 00 	lds	r25, 0x0000
    1114:	a0 91 00 00 	lds	r26, 0x0000
    1118:	b0 91 00 00 	lds	r27, 0x0000
    111c:	89 2b       	or	r24, r25
    111e:	8a 2b       	or	r24, r26
    1120:	8b 2b       	or	r24, r27
    1122:	01 f0       	breq	.+0      	; 0x1124 <__vector_7+0x3a>
    1124:	90 91 00 00 	lds	r25, 0x0000
    1128:	e0 91 00 00 	lds	r30, 0x0000
    112c:	f0 91 00 00 	lds	r31, 0x0000
    1130:	80 81       	ld	r24, Z
    1132:	89 27       	eor	r24, r25
    1134:	80 83       	st	Z, r24
    1136:	80 91 00 00 	lds	r24, 0x0000
    113a:	90 91 00 00 	lds	r25, 0x0000
    113e:	a0 91 00 00 	lds	r26, 0x0000
    1142:	b0 91 00 00 	lds	r27, 0x0000
    1146:	18 16       	cp	r1, r24
    1148:	19 06       	cpc	r1, r25
    114a:	1a 06       	cpc	r1, r26
    114c:	1b 06       	cpc	r1, r27
    114e:	04 f4       	brge	.+0      	; 0x1150 <__vector_7+0x66>
    1150:	80 91 00 00 	lds	r24, 0x0000
    1154:	90 91 00 00 	lds	r25, 0x0000
    1158:	a0 91 00 00 	lds	r26, 0x0000
    115c:	b0 91 00 00 	lds	r27, 0x0000
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	a1 09       	sbc	r26, r1
    1164:	b1 09       	sbc	r27, r1
    1166:	80 93 00 00 	sts	0x0000, r24
    116a:	90 93 00 00 	sts	0x0000, r25
    116e:	a0 93 00 00 	sts	0x0000, r26
    1172:	b0 93 00 00 	sts	0x0000, r27
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <__vector_7+0x8e>
    1178:	80 91 00 00 	lds	r24, 0x0000
    117c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000066c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000109c  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007d4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f95  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.attachInterrupt 00000040  00000000  00000000  0000179d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.detachInterrupt 00000020  00000000  00000000  000017dd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__vector_1 0000005a  00000000  00000000  000017fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_2 0000005a  00000000  00000000  00001857  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .bss.intFunc  00000004  00000000  00000000  000018b1  2**0
                  ALLOC
 10 .comment      00000012  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY

Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:
ISR(INT0_vect) {
  if(intFunc[EXTERNAL_INT_0])
    intFunc[EXTERNAL_INT_0]();
}

ISR(INT1_vect) {
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <attachInterrupt+0x4>
   4:	e8 2f       	mov	r30, r24
   6:	f0 e0       	ldi	r31, 0x00	; 0
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e0 50       	subi	r30, 0x00	; 0
   e:	f0 40       	sbci	r31, 0x00	; 0
  10:	71 83       	std	Z+1, r23	; 0x01
  12:	60 83       	st	Z, r22
  14:	81 30       	cpi	r24, 0x01	; 1
  16:	01 f0       	breq	.+0      	; 0x18 <attachInterrupt+0x18>
  18:	80 91 69 00 	lds	r24, 0x0069
  1c:	8c 7f       	andi	r24, 0xFC	; 252
  1e:	84 2b       	or	r24, r20
  20:	80 93 69 00 	sts	0x0069, r24
  if(intFunc[EXTERNAL_INT_1])
  24:	e8 9a       	sbi	0x1d, 0	; 29
  26:	08 95       	ret
  28:	80 91 69 00 	lds	r24, 0x0069
  2c:	44 0f       	add	r20, r20
    intFunc[EXTERNAL_INT_1]();
  2e:	55 1f       	adc	r21, r21
  30:	44 0f       	add	r20, r20
  32:	55 1f       	adc	r21, r21
  34:	83 7f       	andi	r24, 0xF3	; 243
  36:	84 2b       	or	r24, r20
}
  38:	80 93 69 00 	sts	0x0069, r24
  3c:	e9 9a       	sbi	0x1d, 1	; 29
  3e:	08 95       	ret

Disassembly of section .text.detachInterrupt:

00000040 <detachInterrupt>:
  40:	82 30       	cpi	r24, 0x02	; 2
  42:	00 f4       	brcc	.+0      	; 0x44 <detachInterrupt+0x4>
  44:	81 30       	cpi	r24, 0x01	; 1
  46:	01 f0       	breq	.+0      	; 0x48 <detachInterrupt+0x8>
  48:	e8 98       	cbi	0x1d, 0	; 29
  4a:	00 c0       	rjmp	.+0      	; 0x4c <detachInterrupt+0xc>
  4c:	e9 98       	cbi	0x1d, 1	; 29
  4e:	e8 2f       	mov	r30, r24
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	ee 0f       	add	r30, r30
  54:	ff 1f       	adc	r31, r31
  56:	e0 50       	subi	r30, 0x00	; 0
  58:	f0 40       	sbci	r31, 0x00	; 0
  5a:	11 82       	std	Z+1, r1	; 0x01
  5c:	10 82       	st	Z, r1
  5e:	08 95       	ret

Disassembly of section .text.__vector_1:

000000a0 <__vector_1>:
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
  c2:	80 91 00 00 	lds	r24, 0x0000
  c6:	90 91 00 00 	lds	r25, 0x0000
  ca:	89 2b       	or	r24, r25
  cc:	01 f0       	breq	.+0      	; 0xce <__vector_1+0x2e>
  ce:	e0 91 00 00 	lds	r30, 0x0000
  d2:	f0 91 00 00 	lds	r31, 0x0000
  d6:	09 95       	icall
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	7f 91       	pop	r23
  e6:	6f 91       	pop	r22
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

Disassembly of section .text.__vector_2:

0000019a <__vector_2>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
 1bc:	80 91 00 00 	lds	r24, 0x0000
 1c0:	90 91 00 00 	lds	r25, 0x0000
 1c4:	89 2b       	or	r24, r25
 1c6:	01 f0       	breq	.+0      	; 0x1c8 <__vector_2+0x2e>
 1c8:	e0 91 00 00 	lds	r30, 0x0000
 1cc:	f0 91 00 00 	lds	r31, 0x0000
 1d0:	09 95       	icall
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000528  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000adc  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z10randomSeedj 00000010  00000000  00000000  00001038  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z6randoml 00000048  00000000  00000000  00001048  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6randomll 00000038  00000000  00000000  00001090  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z3maplllll 0000008e  00000000  00000000  000010c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z8makeWordj 00000002  00000000  00000000  00001156  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._Z8makeWordhh 0000000a  00000000  00000000  00001158  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .comment      00000012  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Z10randomSeedj:

00000000 <_Z10randomSeedj>:
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
   0:	00 97       	sbiw	r24, 0x00	; 0
   2:	01 f0       	breq	.+0      	; 0x4 <_Z10randomSeedj+0x4>
   4:	bc 01       	movw	r22, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0c 94 00 00 	jmp	0	; 0x0 <_Z10randomSeedj>
   e:	08 95       	ret

Disassembly of section .text._Z6randoml:

00000010 <_Z6randoml>:
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	00 d0       	rcall	.+0      	; 0x16 <_Z6randoml+0x6>
  16:	00 d0       	rcall	.+0      	; 0x18 <_Z6randoml+0x8>
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	9b 01       	movw	r18, r22
  1e:	ac 01       	movw	r20, r24
  20:	61 15       	cp	r22, r1
  22:	71 05       	cpc	r23, r1
  24:	81 05       	cpc	r24, r1
  26:	91 05       	cpc	r25, r1
  28:	01 f0       	breq	.+0      	; 0x2a <_Z6randoml+0x1a>
  2a:	69 83       	std	Y+1, r22	; 0x01
  2c:	3a 83       	std	Y+2, r19	; 0x02
  2e:	4b 83       	std	Y+3, r20	; 0x03
  30:	5c 83       	std	Y+4, r21	; 0x04
  32:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  36:	29 81       	ldd	r18, Y+1	; 0x01
  38:	3a 81       	ldd	r19, Y+2	; 0x02
  3a:	4b 81       	ldd	r20, Y+3	; 0x03
  3c:	5c 81       	ldd	r21, Y+4	; 0x04
  3e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_Z6randoml+0x34>
  44:	60 e0       	ldi	r22, 0x00	; 0
  46:	70 e0       	ldi	r23, 0x00	; 0
  48:	cb 01       	movw	r24, r22
  4a:	0f 90       	pop	r0
  4c:	0f 90       	pop	r0
  4e:	0f 90       	pop	r0
  50:	0f 90       	pop	r0
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text._Z6randomll:

00000068 <_Z6randomll>:
  68:	cf 92       	push	r12
  6a:	df 92       	push	r13
  6c:	ef 92       	push	r14
  6e:	ff 92       	push	r15
  70:	6b 01       	movw	r12, r22
  72:	7c 01       	movw	r14, r24
  74:	62 17       	cp	r22, r18
  76:	73 07       	cpc	r23, r19
  78:	84 07       	cpc	r24, r20
  7a:	95 07       	cpc	r25, r21
  7c:	04 f4       	brge	.+0      	; 0x7e <_Z6randomll+0x16>
  7e:	ca 01       	movw	r24, r20
  80:	b9 01       	movw	r22, r18
  82:	6c 19       	sub	r22, r12
  84:	7d 09       	sbc	r23, r13
  86:	8e 09       	sbc	r24, r14
  88:	9f 09       	sbc	r25, r15
  8a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  8e:	6c 0d       	add	r22, r12
  90:	7d 1d       	adc	r23, r13
  92:	8e 1d       	adc	r24, r14
  94:	9f 1d       	adc	r25, r15
  96:	ff 90       	pop	r15
  98:	ef 90       	pop	r14
  9a:	df 90       	pop	r13
  9c:	cf 90       	pop	r12
  9e:	08 95       	ret

Disassembly of section .text._Z3maplllll:

00000108 <_Z3maplllll>:
 108:	4f 92       	push	r4
 10a:	5f 92       	push	r5
 10c:	6f 92       	push	r6
 10e:	7f 92       	push	r7
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	29 01       	movw	r4, r18
 12a:	3a 01       	movw	r6, r20
 12c:	62 1b       	sub	r22, r18
 12e:	73 0b       	sbc	r23, r19
 130:	84 0b       	sbc	r24, r20
 132:	95 0b       	sbc	r25, r21
 134:	29 89       	ldd	r18, Y+17	; 0x11
 136:	3a 89       	ldd	r19, Y+18	; 0x12
 138:	4b 89       	ldd	r20, Y+19	; 0x13
 13a:	5c 89       	ldd	r21, Y+20	; 0x14
 13c:	2a 19       	sub	r18, r10
 13e:	3b 09       	sbc	r19, r11
 140:	4c 09       	sbc	r20, r12
 142:	5d 09       	sbc	r21, r13
 144:	29 8b       	std	Y+17, r18	; 0x11
 146:	3a 8b       	std	Y+18, r19	; 0x12
 148:	4b 8b       	std	Y+19, r20	; 0x13
 14a:	5c 8b       	std	Y+20, r21	; 0x14
 14c:	9b 01       	movw	r18, r22
 14e:	ac 01       	movw	r20, r24
 150:	69 89       	ldd	r22, Y+17	; 0x11
 152:	7a 89       	ldd	r23, Y+18	; 0x12
 154:	8b 89       	ldd	r24, Y+19	; 0x13
 156:	9c 89       	ldd	r25, Y+20	; 0x14
 158:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15c:	e4 18       	sub	r14, r4
 15e:	f5 08       	sbc	r15, r5
 160:	06 09       	sbc	r16, r6
 162:	17 09       	sbc	r17, r7
 164:	a8 01       	movw	r20, r16
 166:	97 01       	movw	r18, r14
 168:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 16c:	2a 0d       	add	r18, r10
 16e:	3b 1d       	adc	r19, r11
 170:	4c 1d       	adc	r20, r12
 172:	5d 1d       	adc	r21, r13
 174:	ca 01       	movw	r24, r20
 176:	b9 01       	movw	r22, r18
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	cf 90       	pop	r12
 188:	bf 90       	pop	r11
 18a:	af 90       	pop	r10
 18c:	7f 90       	pop	r7
 18e:	6f 90       	pop	r6
 190:	5f 90       	pop	r5
 192:	4f 90       	pop	r4
 194:	08 95       	ret

Disassembly of section .text._Z8makeWordj:

0000029e <_Z8makeWordj>:
 29e:	08 95       	ret

Disassembly of section .text._Z8makeWordhh:

0000053e <_Z8makeWordhh>:
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	9b 01       	movw	r18, r22
 542:	38 2b       	or	r19, r24
 544:	c9 01       	movw	r24, r18
 546:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  00000000  00000000  00000044  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  00000000  00000000  0000004c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .text         00000000  00000000  00000000  00000054  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data         00000000  00000000  00000000  00000054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000000  00000000  00000000  00000054  2**0
                  ALLOC
  7 .stab         00002c34  00000000  00000000  00000054  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .stabstr      000024d2  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .text.itoa    00000004  00000000  00000000  0000515a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.ltoa    00000004  00000000  00000000  0000515e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.utoa    00000004  00000000  00000000  00005162  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.ultoa   00000004  00000000  00000000  00005166  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6StringD2Ev 0000000a  00000000  00000000  0000516a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6String10invalidateEv 00000024  00000000  00000000  00005174  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6String12changeBufferEj 00000034  00000000  00000000  00005198  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6String7reserveEj 00000038  00000000  00000000  000051cc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6String4copyEPKcj 00000042  00000000  00000000  00005204  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6StringC2EPKc 0000002c  00000000  00000000  00005246  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6String4copyEPK19__FlashStringHelperj 00000042  00000000  00000000  00005272  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6StringaSERKS_ 0000002e  00000000  00000000  000052b4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6StringC2ERKS_ 00000012  00000000  00000000  000052e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN6StringaSEPKc 00000030  00000000  00000000  000052f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN6StringC2Ec 00000030  00000000  00000000  00005324  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN6StringC2Ehh 0000005a  00000000  00000000  00005354  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN6StringC2Eih 00000058  00000000  00000000  000053ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN6StringC2Ejh 00000058  00000000  00000000  00005406  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN6StringC2Elh 0000005a  00000000  00000000  0000545e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN6StringC2Emh 0000005a  00000000  00000000  000054b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN6StringC2Efh 00000060  00000000  00000000  00005512  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN6StringC2Edh 00000060  00000000  00000000  00005572  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN6StringaSEPK19__FlashStringHelper 00000042  00000000  00000000  000055d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN6StringC2EPK19__FlashStringHelper 00000012  00000000  00000000  00005614  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN6String6concatEPKcj 00000058  00000000  00000000  00005626  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN6String6concatERKS_ 0000000e  00000000  00000000  0000567e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN6String6concatEPKc 00000020  00000000  00000000  0000568c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN6String6concatEc 00000026  00000000  00000000  000056ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN6String6concatEh 0000005a  00000000  00000000  000056d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN6String6concatEi 00000064  00000000  00000000  0000572c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN6String6concatEj 00000064  00000000  00000000  00005790  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZN6String6concatEl 00000066  00000000  00000000  000057f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZN6String6concatEm 00000066  00000000  00000000  0000585a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZN6String6concatEf 00000064  00000000  00000000  000058c0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZN6String6concatEd 00000064  00000000  00000000  00005924  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZN6String6concatEPK19__FlashStringHelper 0000005e  00000000  00000000  00005988  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZplRK15StringSumHelperRK6String 00000026  00000000  00000000  000059e6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZplRK15StringSumHelperPKc 00000034  00000000  00000000  00005a0c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZplRK15StringSumHelperc 0000001c  00000000  00000000  00005a40  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZplRK15StringSumHelperh 0000001c  00000000  00000000  00005a5c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZplRK15StringSumHelperi 0000001c  00000000  00000000  00005a78  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZplRK15StringSumHelperj 0000001c  00000000  00000000  00005a94  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZplRK15StringSumHelperl 0000001c  00000000  00000000  00005ab0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZplRK15StringSumHelperm 0000001c  00000000  00000000  00005acc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZplRK15StringSumHelperf 0000001c  00000000  00000000  00005ae8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZplRK15StringSumHelperd 0000001c  00000000  00000000  00005b04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZplRK15StringSumHelperPK19__FlashStringHelper 0000001c  00000000  00000000  00005b20  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZNK6String9compareToERKS_ 00000060  00000000  00000000  00005b3c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZNK6String6equalsERKS_ 00000026  00000000  00000000  00005b9c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZNK6String6equalsEPKc 0000003e  00000000  00000000  00005bc2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZNK6StringltERKS_ 0000000e  00000000  00000000  00005c00  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZNK6StringgtERKS_ 00000012  00000000  00000000  00005c0e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text._ZNK6StringleERKS_ 00000012  00000000  00000000  00005c20  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text._ZNK6StringgeERKS_ 00000010  00000000  00000000  00005c32  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZNK6String16equalsIgnoreCaseERKS_ 00000072  00000000  00000000  00005c42  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZNK6String10startsWithERKS_j 00000048  00000000  00000000  00005cb4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZNK6String10startsWithERKS_ 0000001e  00000000  00000000  00005cfc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZNK6String8endsWithERKS_ 00000042  00000000  00000000  00005d1a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZN6String9setCharAtEjc 0000001c  00000000  00000000  00005d5c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZN6StringixEj 00000024  00000000  00000000  00005d78  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .text._ZNK6StringixEj 00000022  00000000  00000000  00005d9c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 70 .text._ZNK6String6charAtEj 00000004  00000000  00000000  00005dbe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 71 .text._ZNK6String8getBytesEPhjj 00000054  00000000  00000000  00005dc2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 72 .text._ZNK6String7indexOfEcj 00000038  00000000  00000000  00005e16  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 73 .text._ZNK6String7indexOfEc 00000008  00000000  00000000  00005e4e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 74 .text._ZNK6String7indexOfERKS_j 00000038  00000000  00000000  00005e56  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 75 .text._ZNK6String7indexOfERKS_ 00000008  00000000  00000000  00005e8e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 76 .text._ZNK6String11lastIndexOfEcj 00000066  00000000  00000000  00005e96  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 77 .text._ZNK6String11lastIndexOfEc 0000000e  00000000  00000000  00005efc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 78 .text._ZNK6String11lastIndexOfERKS_j 0000009c  00000000  00000000  00005f0a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 79 .text._ZNK6String11lastIndexOfERKS_ 00000014  00000000  00000000  00005fa6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 80 .rodata.str1.1 00000001  00000000  00000000  00005fba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 81 .text._ZNK6String9substringEjj 0000008a  00000000  00000000  00005fbb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 82 .text._ZN6String7replaceEcc 0000001c  00000000  00000000  00006045  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 83 .text._ZN6String7replaceERKS_S1_ 000001e6  00000000  00000000  00006061  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 84 .text._ZN6String6removeEjj 00000060  00000000  00000000  00006247  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 85 .text._ZN6String6removeEj 00000016  00000000  00000000  000062a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 86 .text._ZN6String11toLowerCaseEv 00000028  00000000  00000000  000062bd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 87 .text._ZN6String11toUpperCaseEv 00000028  00000000  00000000  000062e5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 88 .text._ZN6String4trimEv 000000be  00000000  00000000  0000630d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 89 .text._ZNK6String5toIntEv 00000016  00000000  00000000  000063cb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 90 .text._ZNK6String7toFloatEv 00000016  00000000  00000000  000063e1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 91 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  000063f7  2**0
                  ALLOC
 92 .comment      00000012  00000000  00000000  000063f7  2**0
                  CONTENTS, READONLY

Disassembly of section .text.itoa:

00000000 <itoa>:
	return 0;
}

float String::toFloat(void) const
{
	if (buffer) return float(atof(buffer));
   0:	0c 94 00 00 	jmp	0	; 0x0 <itoa>

Disassembly of section .text.ltoa:

00000000 <ltoa>:
   4:	0c 94       	Address 0x0000000000000004 is out of bounds.
.word	0xffff	; ????
	...

Disassembly of section .text.utoa:

0000000c <utoa>:
   c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.ultoa:

0000001c <ultoa>:
	return 0;
}
  1c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6StringD2Ev:

0000003c <_ZN6StringD1Ev>:
  3c:	fc 01       	movw	r30, r24
  3e:	80 81       	ld	r24, Z
  40:	91 81       	ldd	r25, Z+1	; 0x01
  42:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6String10invalidateEv:

00000082 <_ZN6String10invalidateEv>:
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	ec 01       	movw	r28, r24
  88:	88 81       	ld	r24, Y
  8a:	99 81       	ldd	r25, Y+1	; 0x01
  8c:	00 97       	sbiw	r24, 0x00	; 0
  8e:	01 f0       	breq	.+0      	; 0x90 <_ZN6String10invalidateEv+0xe>
  90:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  94:	19 82       	std	Y+1, r1	; 0x01
  96:	18 82       	st	Y, r1
  98:	1d 82       	std	Y+5, r1	; 0x05
  9a:	1c 82       	std	Y+4, r1	; 0x04
  9c:	1b 82       	std	Y+3, r1	; 0x03
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

Disassembly of section .text._ZN6String12changeBufferEj:

00000128 <_ZN6String12changeBufferEj>:
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
 132:	8b 01       	movw	r16, r22
 134:	6f 5f       	subi	r22, 0xFF	; 255
 136:	7f 4f       	sbci	r23, 0xFF	; 255
 138:	88 81       	ld	r24, Y
 13a:	99 81       	ldd	r25, Y+1	; 0x01
 13c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	01 f0       	breq	.+0      	; 0x144 <_ZN6String12changeBufferEj+0x1c>
 144:	99 83       	std	Y+1, r25	; 0x01
 146:	88 83       	st	Y, r24
 148:	1b 83       	std	Y+3, r17	; 0x03
 14a:	0a 83       	std	Y+2, r16	; 0x02
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_ZN6String12changeBufferEj+0x28>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

Disassembly of section .text._ZN6String7reserveEj:

00000284 <_ZN6String7reserveEj>:
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
 28a:	88 81       	ld	r24, Y
 28c:	99 81       	ldd	r25, Y+1	; 0x01
 28e:	89 2b       	or	r24, r25
 290:	01 f0       	breq	.+0      	; 0x292 <_ZN6String7reserveEj+0xe>
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	9b 81       	ldd	r25, Y+3	; 0x03
 296:	86 17       	cp	r24, r22
 298:	97 07       	cpc	r25, r23
 29a:	00 f4       	brcc	.+0      	; 0x29c <_ZN6String7reserveEj+0x18>
 29c:	ce 01       	movw	r24, r28
 29e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2a2:	88 23       	and	r24, r24
 2a4:	01 f0       	breq	.+0      	; 0x2a6 <_ZN6String7reserveEj+0x22>
 2a6:	8c 81       	ldd	r24, Y+4	; 0x04
 2a8:	9d 81       	ldd	r25, Y+5	; 0x05
 2aa:	89 2b       	or	r24, r25
 2ac:	01 f4       	brne	.+0      	; 0x2ae <_ZN6String7reserveEj+0x2a>
 2ae:	e8 81       	ld	r30, Y
 2b0:	f9 81       	ldd	r31, Y+1	; 0x01
 2b2:	10 82       	st	Z, r1
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPKcj:

00000540 <_ZN6String4copyEPKcj>:
 540:	ef 92       	push	r14
 542:	ff 92       	push	r15
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ec 01       	movw	r28, r24
 54e:	7b 01       	movw	r14, r22
 550:	8a 01       	movw	r16, r20
 552:	ba 01       	movw	r22, r20
 554:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 558:	81 11       	cpse	r24, r1
 55a:	00 c0       	rjmp	.+0      	; 0x55c <_ZN6String4copyEPKcj+0x1c>
 55c:	ce 01       	movw	r24, r28
 55e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 562:	00 c0       	rjmp	.+0      	; 0x564 <_ZN6String4copyEPKcj+0x24>
 564:	1d 83       	std	Y+5, r17	; 0x05
 566:	0c 83       	std	Y+4, r16	; 0x04
 568:	b7 01       	movw	r22, r14
 56a:	88 81       	ld	r24, Y
 56c:	99 81       	ldd	r25, Y+1	; 0x01
 56e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 572:	ce 01       	movw	r24, r28
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPKc:

00000ac2 <_ZN6StringC1EPKc>:
 ac2:	fc 01       	movw	r30, r24
 ac4:	11 82       	std	Z+1, r1	; 0x01
 ac6:	10 82       	st	Z, r1
 ac8:	13 82       	std	Z+3, r1	; 0x03
 aca:	12 82       	std	Z+2, r1	; 0x02
 acc:	15 82       	std	Z+5, r1	; 0x05
 ace:	14 82       	std	Z+4, r1	; 0x04
 ad0:	61 15       	cp	r22, r1
 ad2:	71 05       	cpc	r23, r1
 ad4:	01 f0       	breq	.+0      	; 0xad6 <_ZN6StringC1EPKc+0x14>
 ad6:	fb 01       	movw	r30, r22
 ad8:	01 90       	ld	r0, Z+
 ada:	00 20       	and	r0, r0
 adc:	01 f4       	brne	.+0      	; 0xade <_ZN6StringC1EPKc+0x1c>
 ade:	af 01       	movw	r20, r30
 ae0:	41 50       	subi	r20, 0x01	; 1
 ae2:	51 09       	sbc	r21, r1
 ae4:	46 1b       	sub	r20, r22
 ae6:	57 0b       	sbc	r21, r23
 ae8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 aec:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPK19__FlashStringHelperj:

000015b0 <_ZN6String4copyEPK19__FlashStringHelperj>:
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	ec 01       	movw	r28, r24
    15be:	7b 01       	movw	r14, r22
    15c0:	8a 01       	movw	r16, r20
    15c2:	ba 01       	movw	r22, r20
    15c4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    15c8:	81 11       	cpse	r24, r1
    15ca:	00 c0       	rjmp	.+0      	; 0x15cc <_ZN6String4copyEPK19__FlashStringHelperj+0x1c>
    15cc:	ce 01       	movw	r24, r28
    15ce:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    15d2:	00 c0       	rjmp	.+0      	; 0x15d4 <_ZN6String4copyEPK19__FlashStringHelperj+0x24>
    15d4:	1d 83       	std	Y+5, r17	; 0x05
    15d6:	0c 83       	std	Y+4, r16	; 0x04
    15d8:	b7 01       	movw	r22, r14
    15da:	88 81       	ld	r24, Y
    15dc:	99 81       	ldd	r25, Y+1	; 0x01
    15de:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    15e2:	ce 01       	movw	r24, r28
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	08 95       	ret

Disassembly of section .text._ZN6StringaSERKS_:

00002ba2 <_ZN6StringaSERKS_>:
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	ec 01       	movw	r28, r24
    2ba8:	fb 01       	movw	r30, r22
    2baa:	86 17       	cp	r24, r22
    2bac:	97 07       	cpc	r25, r23
    2bae:	01 f0       	breq	.+0      	; 0x2bb0 <_ZN6StringaSERKS_+0xe>
    2bb0:	60 81       	ld	r22, Z
    2bb2:	71 81       	ldd	r23, Z+1	; 0x01
    2bb4:	61 15       	cp	r22, r1
    2bb6:	71 05       	cpc	r23, r1
    2bb8:	01 f0       	breq	.+0      	; 0x2bba <_ZN6StringaSERKS_+0x18>
    2bba:	44 81       	ldd	r20, Z+4	; 0x04
    2bbc:	55 81       	ldd	r21, Z+5	; 0x05
    2bbe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    2bc2:	00 c0       	rjmp	.+0      	; 0x2bc4 <_ZN6StringaSERKS_+0x22>
    2bc4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    2bc8:	ce 01       	movw	r24, r28
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	08 95       	ret

Disassembly of section .text._ZN6StringC2ERKS_:

00005772 <_ZN6StringC1ERKS_>:
    5772:	fc 01       	movw	r30, r24
    5774:	11 82       	std	Z+1, r1	; 0x01
    5776:	10 82       	st	Z, r1
    5778:	13 82       	std	Z+3, r1	; 0x03
    577a:	12 82       	std	Z+2, r1	; 0x02
    577c:	15 82       	std	Z+5, r1	; 0x05
    577e:	14 82       	std	Z+4, r1	; 0x04
    5780:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6StringaSEPKc:

0000aef6 <_ZN6StringaSEPKc>:
    aef6:	cf 93       	push	r28
    aef8:	df 93       	push	r29
    aefa:	ec 01       	movw	r28, r24
    aefc:	61 15       	cp	r22, r1
    aefe:	71 05       	cpc	r23, r1
    af00:	01 f0       	breq	.+0      	; 0xaf02 <_ZN6StringaSEPKc+0xc>
    af02:	fb 01       	movw	r30, r22
    af04:	01 90       	ld	r0, Z+
    af06:	00 20       	and	r0, r0
    af08:	01 f4       	brne	.+0      	; 0xaf0a <_ZN6StringaSEPKc+0x14>
    af0a:	af 01       	movw	r20, r30
    af0c:	41 50       	subi	r20, 0x01	; 1
    af0e:	51 09       	sbc	r21, r1
    af10:	46 1b       	sub	r20, r22
    af12:	57 0b       	sbc	r21, r23
    af14:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    af18:	00 c0       	rjmp	.+0      	; 0xaf1a <_ZN6StringaSEPKc+0x24>
    af1a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    af1e:	ce 01       	movw	r24, r28
    af20:	df 91       	pop	r29
    af22:	cf 91       	pop	r28
    af24:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ec:

00015e1c <_ZN6StringC1Ec>:
   15e1c:	cf 93       	push	r28
   15e1e:	df 93       	push	r29
   15e20:	00 d0       	rcall	.+0      	; 0x15e22 <_ZN6StringC1Ec+0x6>
   15e22:	cd b7       	in	r28, 0x3d	; 61
   15e24:	de b7       	in	r29, 0x3e	; 62
   15e26:	fc 01       	movw	r30, r24
   15e28:	11 82       	std	Z+1, r1	; 0x01
   15e2a:	10 82       	st	Z, r1
   15e2c:	13 82       	std	Z+3, r1	; 0x03
   15e2e:	12 82       	std	Z+2, r1	; 0x02
   15e30:	15 82       	std	Z+5, r1	; 0x05
   15e32:	14 82       	std	Z+4, r1	; 0x04
   15e34:	69 83       	std	Y+1, r22	; 0x01
   15e36:	1a 82       	std	Y+2, r1	; 0x02
   15e38:	be 01       	movw	r22, r28
   15e3a:	6f 5f       	subi	r22, 0xFF	; 255
   15e3c:	7f 4f       	sbci	r23, 0xFF	; 255
   15e3e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   15e42:	0f 90       	pop	r0
   15e44:	0f 90       	pop	r0
   15e46:	df 91       	pop	r29
   15e48:	cf 91       	pop	r28
   15e4a:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ehh:

0002bc68 <_ZN6StringC1Ehh>:
   2bc68:	0f 93       	push	r16
   2bc6a:	1f 93       	push	r17
   2bc6c:	cf 93       	push	r28
   2bc6e:	df 93       	push	r29
   2bc70:	cd b7       	in	r28, 0x3d	; 61
   2bc72:	de b7       	in	r29, 0x3e	; 62
   2bc74:	29 97       	sbiw	r28, 0x09	; 9
   2bc76:	0f b6       	in	r0, 0x3f	; 63
   2bc78:	f8 94       	cli
   2bc7a:	de bf       	out	0x3e, r29	; 62
   2bc7c:	0f be       	out	0x3f, r0	; 63
   2bc7e:	cd bf       	out	0x3d, r28	; 61
   2bc80:	8c 01       	movw	r16, r24
   2bc82:	86 2f       	mov	r24, r22
   2bc84:	f8 01       	movw	r30, r16
   2bc86:	11 82       	std	Z+1, r1	; 0x01
   2bc88:	10 82       	st	Z, r1
   2bc8a:	13 82       	std	Z+3, r1	; 0x03
   2bc8c:	12 82       	std	Z+2, r1	; 0x02
   2bc8e:	15 82       	std	Z+5, r1	; 0x05
   2bc90:	14 82       	std	Z+4, r1	; 0x04
   2bc92:	50 e0       	ldi	r21, 0x00	; 0
   2bc94:	be 01       	movw	r22, r28
   2bc96:	6f 5f       	subi	r22, 0xFF	; 255
   2bc98:	7f 4f       	sbci	r23, 0xFF	; 255
   2bc9a:	90 e0       	ldi	r25, 0x00	; 0
   2bc9c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   2bca0:	be 01       	movw	r22, r28
   2bca2:	6f 5f       	subi	r22, 0xFF	; 255
   2bca4:	7f 4f       	sbci	r23, 0xFF	; 255
   2bca6:	c8 01       	movw	r24, r16
   2bca8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   2bcac:	29 96       	adiw	r28, 0x09	; 9
   2bcae:	0f b6       	in	r0, 0x3f	; 63
   2bcb0:	f8 94       	cli
   2bcb2:	de bf       	out	0x3e, r29	; 62
   2bcb4:	0f be       	out	0x3f, r0	; 63
   2bcb6:	cd bf       	out	0x3d, r28	; 61
   2bcb8:	df 91       	pop	r29
   2bcba:	cf 91       	pop	r28
   2bcbc:	1f 91       	pop	r17
   2bcbe:	0f 91       	pop	r16
   2bcc0:	08 95       	ret

Disassembly of section .text._ZN6StringC2Eih:

0005792a <_ZN6StringC1Eih>:
   5792a:	0f 93       	push	r16
   5792c:	1f 93       	push	r17
   5792e:	cf 93       	push	r28
   57930:	df 93       	push	r29
   57932:	cd b7       	in	r28, 0x3d	; 61
   57934:	de b7       	in	r29, 0x3e	; 62
   57936:	62 97       	sbiw	r28, 0x12	; 18
   57938:	0f b6       	in	r0, 0x3f	; 63
   5793a:	f8 94       	cli
   5793c:	de bf       	out	0x3e, r29	; 62
   5793e:	0f be       	out	0x3f, r0	; 63
   57940:	cd bf       	out	0x3d, r28	; 61
   57942:	8c 01       	movw	r16, r24
   57944:	cb 01       	movw	r24, r22
   57946:	f8 01       	movw	r30, r16
   57948:	11 82       	std	Z+1, r1	; 0x01
   5794a:	10 82       	st	Z, r1
   5794c:	13 82       	std	Z+3, r1	; 0x03
   5794e:	12 82       	std	Z+2, r1	; 0x02
   57950:	15 82       	std	Z+5, r1	; 0x05
   57952:	14 82       	std	Z+4, r1	; 0x04
   57954:	50 e0       	ldi	r21, 0x00	; 0
   57956:	be 01       	movw	r22, r28
   57958:	6f 5f       	subi	r22, 0xFF	; 255
   5795a:	7f 4f       	sbci	r23, 0xFF	; 255
   5795c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   57960:	be 01       	movw	r22, r28
   57962:	6f 5f       	subi	r22, 0xFF	; 255
   57964:	7f 4f       	sbci	r23, 0xFF	; 255
   57966:	c8 01       	movw	r24, r16
   57968:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   5796c:	62 96       	adiw	r28, 0x12	; 18
   5796e:	0f b6       	in	r0, 0x3f	; 63
   57970:	f8 94       	cli
   57972:	de bf       	out	0x3e, r29	; 62
   57974:	0f be       	out	0x3f, r0	; 63
   57976:	cd bf       	out	0x3d, r28	; 61
   57978:	df 91       	pop	r29
   5797a:	cf 91       	pop	r28
   5797c:	1f 91       	pop	r17
   5797e:	0f 91       	pop	r16
   57980:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ejh:

000af2ac <_ZN6StringC1Ejh>:
   af2ac:	0f 93       	push	r16
   af2ae:	1f 93       	push	r17
   af2b0:	cf 93       	push	r28
   af2b2:	df 93       	push	r29
   af2b4:	cd b7       	in	r28, 0x3d	; 61
   af2b6:	de b7       	in	r29, 0x3e	; 62
   af2b8:	61 97       	sbiw	r28, 0x11	; 17
   af2ba:	0f b6       	in	r0, 0x3f	; 63
   af2bc:	f8 94       	cli
   af2be:	de bf       	out	0x3e, r29	; 62
   af2c0:	0f be       	out	0x3f, r0	; 63
   af2c2:	cd bf       	out	0x3d, r28	; 61
   af2c4:	8c 01       	movw	r16, r24
   af2c6:	cb 01       	movw	r24, r22
   af2c8:	f8 01       	movw	r30, r16
   af2ca:	11 82       	std	Z+1, r1	; 0x01
   af2cc:	10 82       	st	Z, r1
   af2ce:	13 82       	std	Z+3, r1	; 0x03
   af2d0:	12 82       	std	Z+2, r1	; 0x02
   af2d2:	15 82       	std	Z+5, r1	; 0x05
   af2d4:	14 82       	std	Z+4, r1	; 0x04
   af2d6:	50 e0       	ldi	r21, 0x00	; 0
   af2d8:	be 01       	movw	r22, r28
   af2da:	6f 5f       	subi	r22, 0xFF	; 255
   af2dc:	7f 4f       	sbci	r23, 0xFF	; 255
   af2de:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   af2e2:	be 01       	movw	r22, r28
   af2e4:	6f 5f       	subi	r22, 0xFF	; 255
   af2e6:	7f 4f       	sbci	r23, 0xFF	; 255
   af2e8:	c8 01       	movw	r24, r16
   af2ea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   af2ee:	61 96       	adiw	r28, 0x11	; 17
   af2f0:	0f b6       	in	r0, 0x3f	; 63
   af2f2:	f8 94       	cli
   af2f4:	de bf       	out	0x3e, r29	; 62
   af2f6:	0f be       	out	0x3f, r0	; 63
   af2f8:	cd bf       	out	0x3d, r28	; 61
   af2fa:	df 91       	pop	r29
   af2fc:	cf 91       	pop	r28
   af2fe:	1f 91       	pop	r17
   af300:	0f 91       	pop	r16
   af302:	08 95       	ret

Disassembly of section .text._ZN6StringC2Elh:

0015e5b0 <_ZN6StringC1Elh>:
  15e5b0:	0f 93       	push	r16
  15e5b2:	1f 93       	push	r17
  15e5b4:	cf 93       	push	r28
  15e5b6:	df 93       	push	r29
  15e5b8:	cd b7       	in	r28, 0x3d	; 61
  15e5ba:	de b7       	in	r29, 0x3e	; 62
  15e5bc:	a2 97       	sbiw	r28, 0x22	; 34
  15e5be:	0f b6       	in	r0, 0x3f	; 63
  15e5c0:	f8 94       	cli
  15e5c2:	de bf       	out	0x3e, r29	; 62
  15e5c4:	0f be       	out	0x3f, r0	; 63
  15e5c6:	cd bf       	out	0x3d, r28	; 61
  15e5c8:	8c 01       	movw	r16, r24
  15e5ca:	cb 01       	movw	r24, r22
  15e5cc:	ba 01       	movw	r22, r20
  15e5ce:	f8 01       	movw	r30, r16
  15e5d0:	11 82       	std	Z+1, r1	; 0x01
  15e5d2:	10 82       	st	Z, r1
  15e5d4:	13 82       	std	Z+3, r1	; 0x03
  15e5d6:	12 82       	std	Z+2, r1	; 0x02
  15e5d8:	15 82       	std	Z+5, r1	; 0x05
  15e5da:	14 82       	std	Z+4, r1	; 0x04
  15e5dc:	30 e0       	ldi	r19, 0x00	; 0
  15e5de:	ae 01       	movw	r20, r28
  15e5e0:	4f 5f       	subi	r20, 0xFF	; 255
  15e5e2:	5f 4f       	sbci	r21, 0xFF	; 255
  15e5e4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  15e5e8:	be 01       	movw	r22, r28
  15e5ea:	6f 5f       	subi	r22, 0xFF	; 255
  15e5ec:	7f 4f       	sbci	r23, 0xFF	; 255
  15e5ee:	c8 01       	movw	r24, r16
  15e5f0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  15e5f4:	a2 96       	adiw	r28, 0x22	; 34
  15e5f6:	0f b6       	in	r0, 0x3f	; 63
  15e5f8:	f8 94       	cli
  15e5fa:	de bf       	out	0x3e, r29	; 62
  15e5fc:	0f be       	out	0x3f, r0	; 63
  15e5fe:	cd bf       	out	0x3d, r28	; 61
  15e600:	df 91       	pop	r29
  15e602:	cf 91       	pop	r28
  15e604:	1f 91       	pop	r17
  15e606:	0f 91       	pop	r16
  15e608:	08 95       	ret

Disassembly of section .text._ZN6StringC2Emh:

002bcbba <_ZN6StringC1Emh>:
  2bcbba:	0f 93       	push	r16
  2bcbbc:	1f 93       	push	r17
  2bcbbe:	cf 93       	push	r28
  2bcbc0:	df 93       	push	r29
  2bcbc2:	cd b7       	in	r28, 0x3d	; 61
  2bcbc4:	de b7       	in	r29, 0x3e	; 62
  2bcbc6:	a1 97       	sbiw	r28, 0x21	; 33
  2bcbc8:	0f b6       	in	r0, 0x3f	; 63
  2bcbca:	f8 94       	cli
  2bcbcc:	de bf       	out	0x3e, r29	; 62
  2bcbce:	0f be       	out	0x3f, r0	; 63
  2bcbd0:	cd bf       	out	0x3d, r28	; 61
  2bcbd2:	8c 01       	movw	r16, r24
  2bcbd4:	cb 01       	movw	r24, r22
  2bcbd6:	ba 01       	movw	r22, r20
  2bcbd8:	f8 01       	movw	r30, r16
  2bcbda:	11 82       	std	Z+1, r1	; 0x01
  2bcbdc:	10 82       	st	Z, r1
  2bcbde:	13 82       	std	Z+3, r1	; 0x03
  2bcbe0:	12 82       	std	Z+2, r1	; 0x02
  2bcbe2:	15 82       	std	Z+5, r1	; 0x05
  2bcbe4:	14 82       	std	Z+4, r1	; 0x04
  2bcbe6:	30 e0       	ldi	r19, 0x00	; 0
  2bcbe8:	ae 01       	movw	r20, r28
  2bcbea:	4f 5f       	subi	r20, 0xFF	; 255
  2bcbec:	5f 4f       	sbci	r21, 0xFF	; 255
  2bcbee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2bcbf2:	be 01       	movw	r22, r28
  2bcbf4:	6f 5f       	subi	r22, 0xFF	; 255
  2bcbf6:	7f 4f       	sbci	r23, 0xFF	; 255
  2bcbf8:	c8 01       	movw	r24, r16
  2bcbfa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2bcbfe:	a1 96       	adiw	r28, 0x21	; 33
  2bcc00:	0f b6       	in	r0, 0x3f	; 63
  2bcc02:	f8 94       	cli
  2bcc04:	de bf       	out	0x3e, r29	; 62
  2bcc06:	0f be       	out	0x3f, r0	; 63
  2bcc08:	cd bf       	out	0x3d, r28	; 61
  2bcc0a:	df 91       	pop	r29
  2bcc0c:	cf 91       	pop	r28
  2bcc0e:	1f 91       	pop	r17
  2bcc10:	0f 91       	pop	r16
  2bcc12:	08 95       	ret

Disassembly of section .text._ZN6StringC2Efh:

005797ce <_ZN6StringC1Efh>:
  5797ce:	ef 92       	push	r14
  5797d0:	ff 92       	push	r15
  5797d2:	0f 93       	push	r16
  5797d4:	1f 93       	push	r17
  5797d6:	cf 93       	push	r28
  5797d8:	df 93       	push	r29
  5797da:	cd b7       	in	r28, 0x3d	; 61
  5797dc:	de b7       	in	r29, 0x3e	; 62
  5797de:	a1 97       	sbiw	r28, 0x21	; 33
  5797e0:	0f b6       	in	r0, 0x3f	; 63
  5797e2:	f8 94       	cli
  5797e4:	de bf       	out	0x3e, r29	; 62
  5797e6:	0f be       	out	0x3f, r0	; 63
  5797e8:	cd bf       	out	0x3d, r28	; 61
  5797ea:	7c 01       	movw	r14, r24
  5797ec:	cb 01       	movw	r24, r22
  5797ee:	ba 01       	movw	r22, r20
  5797f0:	f7 01       	movw	r30, r14
  5797f2:	11 82       	std	Z+1, r1	; 0x01
  5797f4:	10 82       	st	Z, r1
  5797f6:	13 82       	std	Z+3, r1	; 0x03
  5797f8:	12 82       	std	Z+2, r1	; 0x02
  5797fa:	15 82       	std	Z+5, r1	; 0x05
  5797fc:	14 82       	std	Z+4, r1	; 0x04
  5797fe:	42 e0       	ldi	r20, 0x02	; 2
  579800:	42 0f       	add	r20, r18
  579802:	8e 01       	movw	r16, r28
  579804:	0f 5f       	subi	r16, 0xFF	; 255
  579806:	1f 4f       	sbci	r17, 0xFF	; 255
  579808:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  57980c:	bc 01       	movw	r22, r24
  57980e:	c7 01       	movw	r24, r14
  579810:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  579814:	a1 96       	adiw	r28, 0x21	; 33
  579816:	0f b6       	in	r0, 0x3f	; 63
  579818:	f8 94       	cli
  57981a:	de bf       	out	0x3e, r29	; 62
  57981c:	0f be       	out	0x3f, r0	; 63
  57981e:	cd bf       	out	0x3d, r28	; 61
  579820:	df 91       	pop	r29
  579822:	cf 91       	pop	r28
  579824:	1f 91       	pop	r17
  579826:	0f 91       	pop	r16
  579828:	ff 90       	pop	r15
  57982a:	ef 90       	pop	r14
  57982c:	08 95       	ret

Disassembly of section .text._ZN6StringC2Edh:

00af2ffc <_ZN6StringC1Edh>:
  af2ffc:	ef 92       	push	r14
  af2ffe:	ff 92       	push	r15
  af3000:	0f 93       	push	r16
  af3002:	1f 93       	push	r17
  af3004:	cf 93       	push	r28
  af3006:	df 93       	push	r29
  af3008:	cd b7       	in	r28, 0x3d	; 61
  af300a:	de b7       	in	r29, 0x3e	; 62
  af300c:	a1 97       	sbiw	r28, 0x21	; 33
  af300e:	0f b6       	in	r0, 0x3f	; 63
  af3010:	f8 94       	cli
  af3012:	de bf       	out	0x3e, r29	; 62
  af3014:	0f be       	out	0x3f, r0	; 63
  af3016:	cd bf       	out	0x3d, r28	; 61
  af3018:	7c 01       	movw	r14, r24
  af301a:	cb 01       	movw	r24, r22
  af301c:	ba 01       	movw	r22, r20
  af301e:	f7 01       	movw	r30, r14
  af3020:	11 82       	std	Z+1, r1	; 0x01
  af3022:	10 82       	st	Z, r1
  af3024:	13 82       	std	Z+3, r1	; 0x03
  af3026:	12 82       	std	Z+2, r1	; 0x02
  af3028:	15 82       	std	Z+5, r1	; 0x05
  af302a:	14 82       	std	Z+4, r1	; 0x04
  af302c:	42 e0       	ldi	r20, 0x02	; 2
  af302e:	42 0f       	add	r20, r18
  af3030:	8e 01       	movw	r16, r28
  af3032:	0f 5f       	subi	r16, 0xFF	; 255
  af3034:	1f 4f       	sbci	r17, 0xFF	; 255
  af3036:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  af303a:	bc 01       	movw	r22, r24
  af303c:	c7 01       	movw	r24, r14
  af303e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  af3042:	a1 96       	adiw	r28, 0x21	; 33
  af3044:	0f b6       	in	r0, 0x3f	; 63
  af3046:	f8 94       	cli
  af3048:	de bf       	out	0x3e, r29	; 62
  af304a:	0f be       	out	0x3f, r0	; 63
  af304c:	cd bf       	out	0x3d, r28	; 61
  af304e:	df 91       	pop	r29
  af3050:	cf 91       	pop	r28
  af3052:	1f 91       	pop	r17
  af3054:	0f 91       	pop	r16
  af3056:	ff 90       	pop	r15
  af3058:	ef 90       	pop	r14
  af305a:	08 95       	ret

Disassembly of section .text._ZN6StringaSEPK19__FlashStringHelper:

015e6058 <_ZN6StringaSEPK19__FlashStringHelper>:
 15e6058:	0f 93       	push	r16
 15e605a:	1f 93       	push	r17
 15e605c:	cf 93       	push	r28
 15e605e:	df 93       	push	r29
 15e6060:	00 d0       	rcall	.+0      	; 0x15e6062 <_ZN6StringaSEPK19__FlashStringHelper+0xa>
 15e6062:	cd b7       	in	r28, 0x3d	; 61
 15e6064:	de b7       	in	r29, 0x3e	; 62
 15e6066:	8c 01       	movw	r16, r24
 15e6068:	61 15       	cp	r22, r1
 15e606a:	71 05       	cpc	r23, r1
 15e606c:	01 f0       	breq	.+0      	; 0x15e606e <_ZN6StringaSEPK19__FlashStringHelper+0x16>
 15e606e:	cb 01       	movw	r24, r22
 15e6070:	69 83       	std	Y+1, r22	; 0x01
 15e6072:	7a 83       	std	Y+2, r23	; 0x02
 15e6074:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15e6078:	ac 01       	movw	r20, r24
 15e607a:	69 81       	ldd	r22, Y+1	; 0x01
 15e607c:	7a 81       	ldd	r23, Y+2	; 0x02
 15e607e:	c8 01       	movw	r24, r16
 15e6080:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15e6084:	00 c0       	rjmp	.+0      	; 0x15e6086 <_ZN6StringaSEPK19__FlashStringHelper+0x2e>
 15e6086:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15e608a:	c8 01       	movw	r24, r16
 15e608c:	0f 90       	pop	r0
 15e608e:	0f 90       	pop	r0
 15e6090:	df 91       	pop	r29
 15e6092:	cf 91       	pop	r28
 15e6094:	1f 91       	pop	r17
 15e6096:	0f 91       	pop	r16
 15e6098:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPK19__FlashStringHelper:

02bcc0f2 <_ZN6StringC1EPK19__FlashStringHelper>:
 2bcc0f2:	fc 01       	movw	r30, r24
 2bcc0f4:	11 82       	std	Z+1, r1	; 0x01
 2bcc0f6:	10 82       	st	Z, r1
 2bcc0f8:	13 82       	std	Z+3, r1	; 0x03
 2bcc0fa:	12 82       	std	Z+2, r1	; 0x02
 2bcc0fc:	15 82       	std	Z+5, r1	; 0x05
 2bcc0fe:	14 82       	std	Z+4, r1	; 0x04
 2bcc100:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6String6concatEPKcj:

057981f6 <_ZN6String6concatEPKcj>:
 57981f6:	ef 92       	push	r14
 57981f8:	ff 92       	push	r15
 57981fa:	0f 93       	push	r16
 57981fc:	1f 93       	push	r17
 57981fe:	cf 93       	push	r28
 5798200:	df 93       	push	r29
 5798202:	ec 01       	movw	r28, r24
 5798204:	7b 01       	movw	r14, r22
 5798206:	0c 81       	ldd	r16, Y+4	; 0x04
 5798208:	1d 81       	ldd	r17, Y+5	; 0x05
 579820a:	61 15       	cp	r22, r1
 579820c:	71 05       	cpc	r23, r1
 579820e:	01 f4       	brne	.+0      	; 0x5798210 <_ZN6String6concatEPKcj+0x1a>
 5798210:	80 e0       	ldi	r24, 0x00	; 0
 5798212:	00 c0       	rjmp	.+0      	; 0x5798214 <_ZN6String6concatEPKcj+0x1e>
 5798214:	41 15       	cp	r20, r1
 5798216:	51 05       	cpc	r21, r1
 5798218:	01 f0       	breq	.+0      	; 0x579821a <_ZN6String6concatEPKcj+0x24>
 579821a:	04 0f       	add	r16, r20
 579821c:	15 1f       	adc	r17, r21
 579821e:	b8 01       	movw	r22, r16
 5798220:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 5798224:	88 23       	and	r24, r24
 5798226:	01 f0       	breq	.+0      	; 0x5798228 <_ZN6String6concatEPKcj+0x32>
 5798228:	28 81       	ld	r18, Y
 579822a:	39 81       	ldd	r19, Y+1	; 0x01
 579822c:	8c 81       	ldd	r24, Y+4	; 0x04
 579822e:	9d 81       	ldd	r25, Y+5	; 0x05
 5798230:	b7 01       	movw	r22, r14
 5798232:	82 0f       	add	r24, r18
 5798234:	93 1f       	adc	r25, r19
 5798236:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 579823a:	1d 83       	std	Y+5, r17	; 0x05
 579823c:	0c 83       	std	Y+4, r16	; 0x04
 579823e:	81 e0       	ldi	r24, 0x01	; 1
 5798240:	df 91       	pop	r29
 5798242:	cf 91       	pop	r28
 5798244:	1f 91       	pop	r17
 5798246:	0f 91       	pop	r16
 5798248:	ff 90       	pop	r15
 579824a:	ef 90       	pop	r14
 579824c:	08 95       	ret

Disassembly of section .text._ZN6String6concatERKS_:

0af30444 <_ZN6String6concatERKS_>:
 af30444:	fb 01       	movw	r30, r22
 af30446:	44 81       	ldd	r20, Z+4	; 0x04
 af30448:	55 81       	ldd	r21, Z+5	; 0x05
 af3044a:	60 81       	ld	r22, Z
 af3044c:	71 81       	ldd	r23, Z+1	; 0x01
 af3044e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZN6String6concatEPKc:

15e60896 <_ZN6String6concatEPKc>:
15e60896:	61 15       	cp	r22, r1
15e60898:	71 05       	cpc	r23, r1
15e6089a:	01 f0       	breq	.+0      	; 0x15e6089c <_ZN6String6concatEPKc+0x6>
15e6089c:	fb 01       	movw	r30, r22
15e6089e:	01 90       	ld	r0, Z+
15e608a0:	00 20       	and	r0, r0
15e608a2:	01 f4       	brne	.+0      	; 0x15e608a4 <_ZN6String6concatEPKc+0xe>
15e608a4:	af 01       	movw	r20, r30
15e608a6:	41 50       	subi	r20, 0x01	; 1
15e608a8:	51 09       	sbc	r21, r1
15e608aa:	46 1b       	sub	r20, r22
15e608ac:	57 0b       	sbc	r21, r23
15e608ae:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
15e608b2:	80 e0       	ldi	r24, 0x00	; 0
15e608b4:	08 95       	ret

Disassembly of section .text._ZN6String6concatEc:

2bcc114c <_ZN6String6concatEc>:
2bcc114c:	cf 93       	push	r28
2bcc114e:	df 93       	push	r29
2bcc1150:	00 d0       	rcall	.+0      	; 0x2bcc1152 <_ZN6String6concatEc+0x6>
2bcc1152:	cd b7       	in	r28, 0x3d	; 61
2bcc1154:	de b7       	in	r29, 0x3e	; 62
2bcc1156:	69 83       	std	Y+1, r22	; 0x01
2bcc1158:	1a 82       	std	Y+2, r1	; 0x02
2bcc115a:	41 e0       	ldi	r20, 0x01	; 1
2bcc115c:	50 e0       	ldi	r21, 0x00	; 0
2bcc115e:	be 01       	movw	r22, r28
2bcc1160:	6f 5f       	subi	r22, 0xFF	; 255
2bcc1162:	7f 4f       	sbci	r23, 0xFF	; 255
2bcc1164:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2bcc1168:	0f 90       	pop	r0
2bcc116a:	0f 90       	pop	r0
2bcc116c:	df 91       	pop	r29
2bcc116e:	cf 91       	pop	r28
2bcc1170:	08 95       	ret

Disassembly of section .text._ZN6String6concatEh:

579822be <_ZN6String6concatEh>:
579822be:	ef 92       	push	r14
579822c0:	ff 92       	push	r15
579822c2:	0f 93       	push	r16
579822c4:	1f 93       	push	r17
579822c6:	cf 93       	push	r28
579822c8:	df 93       	push	r29
579822ca:	00 d0       	rcall	.+0      	; 0x579822cc <_ZN6String6concatEh+0xe>
579822cc:	00 d0       	rcall	.+0      	; 0x579822ce <_ZN6String6concatEh+0x10>
579822ce:	cd b7       	in	r28, 0x3d	; 61
579822d0:	de b7       	in	r29, 0x3e	; 62
579822d2:	7c 01       	movw	r14, r24
579822d4:	86 2f       	mov	r24, r22
579822d6:	4a e0       	ldi	r20, 0x0A	; 10
579822d8:	50 e0       	ldi	r21, 0x00	; 0
579822da:	8e 01       	movw	r16, r28
579822dc:	0f 5f       	subi	r16, 0xFF	; 255
579822de:	1f 4f       	sbci	r17, 0xFF	; 255
579822e0:	b8 01       	movw	r22, r16
579822e2:	90 e0       	ldi	r25, 0x00	; 0
579822e4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
579822e8:	f8 01       	movw	r30, r16
579822ea:	01 90       	ld	r0, Z+
579822ec:	00 20       	and	r0, r0
579822ee:	01 f4       	brne	.+0      	; 0x579822f0 <_ZN6String6concatEh+0x32>
579822f0:	af 01       	movw	r20, r30
579822f2:	41 50       	subi	r20, 0x01	; 1
579822f4:	51 09       	sbc	r21, r1
579822f6:	40 1b       	sub	r20, r16
579822f8:	51 0b       	sbc	r21, r17
579822fa:	b8 01       	movw	r22, r16
579822fc:	c7 01       	movw	r24, r14
579822fe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
57982302:	0f 90       	pop	r0
57982304:	0f 90       	pop	r0
57982306:	0f 90       	pop	r0
57982308:	0f 90       	pop	r0
5798230a:	df 91       	pop	r29
5798230c:	cf 91       	pop	r28
5798230e:	1f 91       	pop	r17
57982310:	0f 91       	pop	r16
57982312:	ff 90       	pop	r15
57982314:	ef 90       	pop	r14
57982316:	08 95       	ret

Disassembly of section .text._ZN6String6concatEi:

af3045d6 <_ZN6String6concatEi>:
af3045d6:	ef 92       	push	r14
af3045d8:	ff 92       	push	r15
af3045da:	0f 93       	push	r16
af3045dc:	1f 93       	push	r17
af3045de:	cf 93       	push	r28
af3045e0:	df 93       	push	r29
af3045e2:	cd b7       	in	r28, 0x3d	; 61
af3045e4:	de b7       	in	r29, 0x3e	; 62
af3045e6:	28 97       	sbiw	r28, 0x08	; 8
af3045e8:	0f b6       	in	r0, 0x3f	; 63
af3045ea:	f8 94       	cli
af3045ec:	de bf       	out	0x3e, r29	; 62
af3045ee:	0f be       	out	0x3f, r0	; 63
af3045f0:	cd bf       	out	0x3d, r28	; 61
af3045f2:	7c 01       	movw	r14, r24
af3045f4:	cb 01       	movw	r24, r22
af3045f6:	4a e0       	ldi	r20, 0x0A	; 10
af3045f8:	50 e0       	ldi	r21, 0x00	; 0
af3045fa:	8e 01       	movw	r16, r28
af3045fc:	0f 5f       	subi	r16, 0xFF	; 255
af3045fe:	1f 4f       	sbci	r17, 0xFF	; 255
af304600:	b8 01       	movw	r22, r16
af304602:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
af304606:	f8 01       	movw	r30, r16
af304608:	01 90       	ld	r0, Z+
af30460a:	00 20       	and	r0, r0
af30460c:	01 f4       	brne	.+0      	; 0xaf30460e <_ZN6String6concatEi+0x38>
af30460e:	af 01       	movw	r20, r30
af304610:	41 50       	subi	r20, 0x01	; 1
af304612:	51 09       	sbc	r21, r1
af304614:	40 1b       	sub	r20, r16
af304616:	51 0b       	sbc	r21, r17
af304618:	b8 01       	movw	r22, r16
af30461a:	c7 01       	movw	r24, r14
af30461c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
af304620:	28 96       	adiw	r28, 0x08	; 8
af304622:	0f b6       	in	r0, 0x3f	; 63
af304624:	f8 94       	cli
af304626:	de bf       	out	0x3e, r29	; 62
af304628:	0f be       	out	0x3f, r0	; 63
af30462a:	cd bf       	out	0x3d, r28	; 61
af30462c:	df 91       	pop	r29
af30462e:	cf 91       	pop	r28
af304630:	1f 91       	pop	r17
af304632:	0f 91       	pop	r16
af304634:	ff 90       	pop	r15
af304636:	ef 90       	pop	r14
af304638:	08 95       	ret

Disassembly of section .text._ZN6String6concatEj:

5e608c10 <_ZN6String6concatEj>:
5e608c10:	ef 92       	push	r14
5e608c12:	ff 92       	push	r15
5e608c14:	0f 93       	push	r16
5e608c16:	1f 93       	push	r17
5e608c18:	cf 93       	push	r28
5e608c1a:	df 93       	push	r29
5e608c1c:	cd b7       	in	r28, 0x3d	; 61
5e608c1e:	de b7       	in	r29, 0x3e	; 62
5e608c20:	27 97       	sbiw	r28, 0x07	; 7
5e608c22:	0f b6       	in	r0, 0x3f	; 63
5e608c24:	f8 94       	cli
5e608c26:	de bf       	out	0x3e, r29	; 62
5e608c28:	0f be       	out	0x3f, r0	; 63
5e608c2a:	cd bf       	out	0x3d, r28	; 61
5e608c2c:	7c 01       	movw	r14, r24
5e608c2e:	cb 01       	movw	r24, r22
5e608c30:	4a e0       	ldi	r20, 0x0A	; 10
5e608c32:	50 e0       	ldi	r21, 0x00	; 0
5e608c34:	8e 01       	movw	r16, r28
5e608c36:	0f 5f       	subi	r16, 0xFF	; 255
5e608c38:	1f 4f       	sbci	r17, 0xFF	; 255
5e608c3a:	b8 01       	movw	r22, r16
5e608c3c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
5e608c40:	f8 01       	movw	r30, r16
5e608c42:	01 90       	ld	r0, Z+
5e608c44:	00 20       	and	r0, r0
5e608c46:	01 f4       	brne	.+0      	; 0x5e608c48 <_ZN6String6concatEh+0x6c8698a>
5e608c48:	af 01       	movw	r20, r30
5e608c4a:	41 50       	subi	r20, 0x01	; 1
5e608c4c:	51 09       	sbc	r21, r1
5e608c4e:	40 1b       	sub	r20, r16
5e608c50:	51 0b       	sbc	r21, r17
5e608c52:	b8 01       	movw	r22, r16
5e608c54:	c7 01       	movw	r24, r14
5e608c56:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
5e608c5a:	27 96       	adiw	r28, 0x07	; 7
5e608c5c:	0f b6       	in	r0, 0x3f	; 63
5e608c5e:	f8 94       	cli
5e608c60:	de bf       	out	0x3e, r29	; 62
5e608c62:	0f be       	out	0x3f, r0	; 63
5e608c64:	cd bf       	out	0x3d, r28	; 61
5e608c66:	df 91       	pop	r29
5e608c68:	cf 91       	pop	r28
5e608c6a:	1f 91       	pop	r17
5e608c6c:	0f 91       	pop	r16
5e608c6e:	ff 90       	pop	r15
5e608c70:	ef 90       	pop	r14
5e608c72:	08 95       	ret

Disassembly of section .text._ZN6String6concatEl:

bcc11884 <_ZN6String6concatEl>:
bcc11884:	ef 92       	push	r14
bcc11886:	ff 92       	push	r15
bcc11888:	0f 93       	push	r16
bcc1188a:	1f 93       	push	r17
bcc1188c:	cf 93       	push	r28
bcc1188e:	df 93       	push	r29
bcc11890:	cd b7       	in	r28, 0x3d	; 61
bcc11892:	de b7       	in	r29, 0x3e	; 62
bcc11894:	2e 97       	sbiw	r28, 0x0e	; 14
bcc11896:	0f b6       	in	r0, 0x3f	; 63
bcc11898:	f8 94       	cli
bcc1189a:	de bf       	out	0x3e, r29	; 62
bcc1189c:	0f be       	out	0x3f, r0	; 63
bcc1189e:	cd bf       	out	0x3d, r28	; 61
bcc118a0:	7c 01       	movw	r14, r24
bcc118a2:	cb 01       	movw	r24, r22
bcc118a4:	ba 01       	movw	r22, r20
bcc118a6:	2a e0       	ldi	r18, 0x0A	; 10
bcc118a8:	30 e0       	ldi	r19, 0x00	; 0
bcc118aa:	8e 01       	movw	r16, r28
bcc118ac:	0f 5f       	subi	r16, 0xFF	; 255
bcc118ae:	1f 4f       	sbci	r17, 0xFF	; 255
bcc118b0:	a8 01       	movw	r20, r16
bcc118b2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
bcc118b6:	f8 01       	movw	r30, r16
bcc118b8:	01 90       	ld	r0, Z+
bcc118ba:	00 20       	and	r0, r0
bcc118bc:	01 f4       	brne	.+0      	; 0xbcc118be <_ZN6String6concatEi+0xd90d2e8>
bcc118be:	af 01       	movw	r20, r30
bcc118c0:	41 50       	subi	r20, 0x01	; 1
bcc118c2:	51 09       	sbc	r21, r1
bcc118c4:	40 1b       	sub	r20, r16
bcc118c6:	51 0b       	sbc	r21, r17
bcc118c8:	b8 01       	movw	r22, r16
bcc118ca:	c7 01       	movw	r24, r14
bcc118cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
bcc118d0:	2e 96       	adiw	r28, 0x0e	; 14
bcc118d2:	0f b6       	in	r0, 0x3f	; 63
bcc118d4:	f8 94       	cli
bcc118d6:	de bf       	out	0x3e, r29	; 62
bcc118d8:	0f be       	out	0x3f, r0	; 63
bcc118da:	cd bf       	out	0x3d, r28	; 61
bcc118dc:	df 91       	pop	r29
bcc118de:	cf 91       	pop	r28
bcc118e0:	1f 91       	pop	r17
bcc118e2:	0f 91       	pop	r16
bcc118e4:	ff 90       	pop	r15
bcc118e6:	ef 90       	pop	r14
bcc118e8:	08 95       	ret

Disassembly of section .text._ZN6String6concatEm:

7982316e <_ZN6String6concatEm>:
7982316e:	ef 92       	push	r14
79823170:	ff 92       	push	r15
79823172:	0f 93       	push	r16
79823174:	1f 93       	push	r17
79823176:	cf 93       	push	r28
79823178:	df 93       	push	r29
7982317a:	cd b7       	in	r28, 0x3d	; 61
7982317c:	de b7       	in	r29, 0x3e	; 62
7982317e:	2d 97       	sbiw	r28, 0x0d	; 13
79823180:	0f b6       	in	r0, 0x3f	; 63
79823182:	f8 94       	cli
79823184:	de bf       	out	0x3e, r29	; 62
79823186:	0f be       	out	0x3f, r0	; 63
79823188:	cd bf       	out	0x3d, r28	; 61
7982318a:	7c 01       	movw	r14, r24
7982318c:	cb 01       	movw	r24, r22
7982318e:	ba 01       	movw	r22, r20
79823190:	2a e0       	ldi	r18, 0x0A	; 10
79823192:	30 e0       	ldi	r19, 0x00	; 0
79823194:	8e 01       	movw	r16, r28
79823196:	0f 5f       	subi	r16, 0xFF	; 255
79823198:	1f 4f       	sbci	r17, 0xFF	; 255
7982319a:	a8 01       	movw	r20, r16
7982319c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
798231a0:	f8 01       	movw	r30, r16
798231a2:	01 90       	ld	r0, Z+
798231a4:	00 20       	and	r0, r0
798231a6:	01 f4       	brne	.+0      	; 0x798231a8 <_ZN6String6concatEh+0x21ea0eea>
798231a8:	af 01       	movw	r20, r30
798231aa:	41 50       	subi	r20, 0x01	; 1
798231ac:	51 09       	sbc	r21, r1
798231ae:	40 1b       	sub	r20, r16
798231b0:	51 0b       	sbc	r21, r17
798231b2:	b8 01       	movw	r22, r16
798231b4:	c7 01       	movw	r24, r14
798231b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
798231ba:	2d 96       	adiw	r28, 0x0d	; 13
798231bc:	0f b6       	in	r0, 0x3f	; 63
798231be:	f8 94       	cli
798231c0:	de bf       	out	0x3e, r29	; 62
798231c2:	0f be       	out	0x3f, r0	; 63
798231c4:	cd bf       	out	0x3d, r28	; 61
798231c6:	df 91       	pop	r29
798231c8:	cf 91       	pop	r28
798231ca:	1f 91       	pop	r17
798231cc:	0f 91       	pop	r16
798231ce:	ff 90       	pop	r15
798231d0:	ef 90       	pop	r14
798231d2:	08 95       	ret

Disassembly of section .text._ZN6String6concatEf:

f3046342 <_ZN6String6concatEf>:
f3046342:	ef 92       	push	r14
f3046344:	ff 92       	push	r15
f3046346:	0f 93       	push	r16
f3046348:	1f 93       	push	r17
f304634a:	cf 93       	push	r28
f304634c:	df 93       	push	r29
f304634e:	cd b7       	in	r28, 0x3d	; 61
f3046350:	de b7       	in	r29, 0x3e	; 62
f3046352:	64 97       	sbiw	r28, 0x14	; 20
f3046354:	0f b6       	in	r0, 0x3f	; 63
f3046356:	f8 94       	cli
f3046358:	de bf       	out	0x3e, r29	; 62
f304635a:	0f be       	out	0x3f, r0	; 63
f304635c:	cd bf       	out	0x3d, r28	; 61
f304635e:	7c 01       	movw	r14, r24
f3046360:	cb 01       	movw	r24, r22
f3046362:	ba 01       	movw	r22, r20
f3046364:	8e 01       	movw	r16, r28
f3046366:	0f 5f       	subi	r16, 0xFF	; 255
f3046368:	1f 4f       	sbci	r17, 0xFF	; 255
f304636a:	22 e0       	ldi	r18, 0x02	; 2
f304636c:	44 e0       	ldi	r20, 0x04	; 4
f304636e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f3046372:	fc 01       	movw	r30, r24
f3046374:	01 90       	ld	r0, Z+
f3046376:	00 20       	and	r0, r0
f3046378:	01 f4       	brne	.+0      	; 0xf304637a <_ZN6String6concatEi+0x43d41da4>
f304637a:	af 01       	movw	r20, r30
f304637c:	41 50       	subi	r20, 0x01	; 1
f304637e:	51 09       	sbc	r21, r1
f3046380:	48 1b       	sub	r20, r24
f3046382:	59 0b       	sbc	r21, r25
f3046384:	bc 01       	movw	r22, r24
f3046386:	c7 01       	movw	r24, r14
f3046388:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f304638c:	64 96       	adiw	r28, 0x14	; 20
f304638e:	0f b6       	in	r0, 0x3f	; 63
f3046390:	f8 94       	cli
f3046392:	de bf       	out	0x3e, r29	; 62
f3046394:	0f be       	out	0x3f, r0	; 63
f3046396:	cd bf       	out	0x3d, r28	; 61
f3046398:	df 91       	pop	r29
f304639a:	cf 91       	pop	r28
f304639c:	1f 91       	pop	r17
f304639e:	0f 91       	pop	r16
f30463a0:	ff 90       	pop	r15
f30463a2:	ef 90       	pop	r14
f30463a4:	08 95       	ret

Disassembly of section .text._ZN6String6concatEd:

e608c6e8 <_ZN6String6concatEd>:
e608c6e8:	ef 92       	push	r14
e608c6ea:	ff 92       	push	r15
e608c6ec:	0f 93       	push	r16
e608c6ee:	1f 93       	push	r17
e608c6f0:	cf 93       	push	r28
e608c6f2:	df 93       	push	r29
e608c6f4:	cd b7       	in	r28, 0x3d	; 61
e608c6f6:	de b7       	in	r29, 0x3e	; 62
e608c6f8:	64 97       	sbiw	r28, 0x14	; 20
e608c6fa:	0f b6       	in	r0, 0x3f	; 63
e608c6fc:	f8 94       	cli
e608c6fe:	de bf       	out	0x3e, r29	; 62
e608c700:	0f be       	out	0x3f, r0	; 63
e608c702:	cd bf       	out	0x3d, r28	; 61
e608c704:	7c 01       	movw	r14, r24
e608c706:	cb 01       	movw	r24, r22
e608c708:	ba 01       	movw	r22, r20
e608c70a:	8e 01       	movw	r16, r28
e608c70c:	0f 5f       	subi	r16, 0xFF	; 255
e608c70e:	1f 4f       	sbci	r17, 0xFF	; 255
e608c710:	22 e0       	ldi	r18, 0x02	; 2
e608c712:	44 e0       	ldi	r20, 0x04	; 4
e608c714:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e608c718:	fc 01       	movw	r30, r24
e608c71a:	01 90       	ld	r0, Z+
e608c71c:	00 20       	and	r0, r0
e608c71e:	01 f4       	brne	.+0      	; 0xe608c720 <_ZN6String6concatEi+0x36d8814a>
e608c720:	af 01       	movw	r20, r30
e608c722:	41 50       	subi	r20, 0x01	; 1
e608c724:	51 09       	sbc	r21, r1
e608c726:	48 1b       	sub	r20, r24
e608c728:	59 0b       	sbc	r21, r25
e608c72a:	bc 01       	movw	r22, r24
e608c72c:	c7 01       	movw	r24, r14
e608c72e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e608c732:	64 96       	adiw	r28, 0x14	; 20
e608c734:	0f b6       	in	r0, 0x3f	; 63
e608c736:	f8 94       	cli
e608c738:	de bf       	out	0x3e, r29	; 62
e608c73a:	0f be       	out	0x3f, r0	; 63
e608c73c:	cd bf       	out	0x3d, r28	; 61
e608c73e:	df 91       	pop	r29
e608c740:	cf 91       	pop	r28
e608c742:	1f 91       	pop	r17
e608c744:	0f 91       	pop	r16
e608c746:	ff 90       	pop	r15
e608c748:	ef 90       	pop	r14
e608c74a:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPK19__FlashStringHelper:

cc118e34 <_ZN6String6concatEPK19__FlashStringHelper>:
cc118e34:	ef 92       	push	r14
cc118e36:	ff 92       	push	r15
cc118e38:	0f 93       	push	r16
cc118e3a:	1f 93       	push	r17
cc118e3c:	cf 93       	push	r28
cc118e3e:	df 93       	push	r29
cc118e40:	ec 01       	movw	r28, r24
cc118e42:	7b 01       	movw	r14, r22
cc118e44:	61 15       	cp	r22, r1
cc118e46:	71 05       	cpc	r23, r1
cc118e48:	01 f4       	brne	.+0      	; 0xcc118e4a <_ZN6String6concatEi+0x1ce14874>
cc118e4a:	80 e0       	ldi	r24, 0x00	; 0
cc118e4c:	00 c0       	rjmp	.+0      	; 0xcc118e4e <_ZN6String6concatEi+0x1ce14878>
cc118e4e:	cb 01       	movw	r24, r22
cc118e50:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
cc118e54:	00 97       	sbiw	r24, 0x00	; 0
cc118e56:	01 f0       	breq	.+0      	; 0xcc118e58 <_ZN6String6concatEi+0x1ce14882>
cc118e58:	0c 81       	ldd	r16, Y+4	; 0x04
cc118e5a:	1d 81       	ldd	r17, Y+5	; 0x05
cc118e5c:	08 0f       	add	r16, r24
cc118e5e:	19 1f       	adc	r17, r25
cc118e60:	b8 01       	movw	r22, r16
cc118e62:	ce 01       	movw	r24, r28
cc118e64:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
cc118e68:	88 23       	and	r24, r24
cc118e6a:	01 f0       	breq	.+0      	; 0xcc118e6c <_ZN6String6concatEi+0x1ce14896>
cc118e6c:	28 81       	ld	r18, Y
cc118e6e:	39 81       	ldd	r19, Y+1	; 0x01
cc118e70:	8c 81       	ldd	r24, Y+4	; 0x04
cc118e72:	9d 81       	ldd	r25, Y+5	; 0x05
cc118e74:	b7 01       	movw	r22, r14
cc118e76:	82 0f       	add	r24, r18
cc118e78:	93 1f       	adc	r25, r19
cc118e7a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
cc118e7e:	1d 83       	std	Y+5, r17	; 0x05
cc118e80:	0c 83       	std	Y+4, r16	; 0x04
cc118e82:	81 e0       	ldi	r24, 0x01	; 1
cc118e84:	df 91       	pop	r29
cc118e86:	cf 91       	pop	r28
cc118e88:	1f 91       	pop	r17
cc118e8a:	0f 91       	pop	r16
cc118e8c:	ff 90       	pop	r15
cc118e8e:	ef 90       	pop	r14
cc118e90:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperRK6String:

98231cc6 <_ZplRK15StringSumHelperRK6String>:
98231cc6:	cf 93       	push	r28
98231cc8:	df 93       	push	r29
98231cca:	ec 01       	movw	r28, r24
98231ccc:	fb 01       	movw	r30, r22
98231cce:	44 81       	ldd	r20, Z+4	; 0x04
98231cd0:	55 81       	ldd	r21, Z+5	; 0x05
98231cd2:	60 81       	ld	r22, Z
98231cd4:	71 81       	ldd	r23, Z+1	; 0x01
98231cd6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
98231cda:	81 11       	cpse	r24, r1
98231cdc:	00 c0       	rjmp	.+0      	; 0x98231cde <_ZN6String6concatEh+0x408afa20>
98231cde:	ce 01       	movw	r24, r28
98231ce0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
98231ce4:	ce 01       	movw	r24, r28
98231ce6:	df 91       	pop	r29
98231ce8:	cf 91       	pop	r28
98231cea:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPKc:

304639b2 <_ZplRK15StringSumHelperPKc>:
304639b2:	cf 93       	push	r28
304639b4:	df 93       	push	r29
304639b6:	ec 01       	movw	r28, r24
304639b8:	61 15       	cp	r22, r1
304639ba:	71 05       	cpc	r23, r1
304639bc:	01 f0       	breq	.+0      	; 0x304639be <_ZN6String6concatEc+0x47a2872>
304639be:	fb 01       	movw	r30, r22
304639c0:	01 90       	ld	r0, Z+
304639c2:	00 20       	and	r0, r0
304639c4:	01 f4       	brne	.+0      	; 0x304639c6 <_ZN6String6concatEc+0x47a287a>
304639c6:	af 01       	movw	r20, r30
304639c8:	41 50       	subi	r20, 0x01	; 1
304639ca:	51 09       	sbc	r21, r1
304639cc:	46 1b       	sub	r20, r22
304639ce:	57 0b       	sbc	r21, r23
304639d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
304639d4:	81 11       	cpse	r24, r1
304639d6:	00 c0       	rjmp	.+0      	; 0x304639d8 <_ZN6String6concatEc+0x47a288c>
304639d8:	ce 01       	movw	r24, r28
304639da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
304639de:	ce 01       	movw	r24, r28
304639e0:	df 91       	pop	r29
304639e2:	cf 91       	pop	r28
304639e4:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperc:

608c7398 <_ZplRK15StringSumHelperc>:
608c7398:	cf 93       	push	r28
608c739a:	df 93       	push	r29
608c739c:	ec 01       	movw	r28, r24
608c739e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
608c73a2:	81 11       	cpse	r24, r1
608c73a4:	00 c0       	rjmp	.+0      	; 0x608c73a6 <_ZN6String6concatEh+0x8f450e8>
608c73a6:	ce 01       	movw	r24, r28
608c73a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
608c73ac:	ce 01       	movw	r24, r28
608c73ae:	df 91       	pop	r29
608c73b0:	cf 91       	pop	r28
608c73b2:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperh:

c118e74c <_ZplRK15StringSumHelperh>:
c118e74c:	cf 93       	push	r28
c118e74e:	df 93       	push	r29
c118e750:	ec 01       	movw	r28, r24
c118e752:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
c118e756:	81 11       	cpse	r24, r1
c118e758:	00 c0       	rjmp	.+0      	; 0xc118e75a <_ZN6String6concatEi+0x11e8a184>
c118e75a:	ce 01       	movw	r24, r28
c118e75c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
c118e760:	ce 01       	movw	r24, r28
c118e762:	df 91       	pop	r29
c118e764:	cf 91       	pop	r28
c118e766:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperi:

8231ceb4 <_ZplRK15StringSumHelperi>:
8231ceb4:	cf 93       	push	r28
8231ceb6:	df 93       	push	r29
8231ceb8:	ec 01       	movw	r28, r24
8231ceba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
8231cebe:	81 11       	cpse	r24, r1
8231cec0:	00 c0       	rjmp	.+0      	; 0x8231cec2 <_ZN6String6concatEh+0x2a99ac04>
8231cec2:	ce 01       	movw	r24, r28
8231cec4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
8231cec8:	ce 01       	movw	r24, r28
8231ceca:	df 91       	pop	r29
8231cecc:	cf 91       	pop	r28
8231cece:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperj:

04639d84 <_ZplRK15StringSumHelperj>:
 4639d84:	cf 93       	push	r28
 4639d86:	df 93       	push	r29
 4639d88:	ec 01       	movw	r28, r24
 4639d8a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4639d8e:	81 11       	cpse	r24, r1
 4639d90:	00 c0       	rjmp	.+0      	; 0x4639d92 <_ZN6StringC1EPK19__FlashStringHelper+0x1a6dca0>
 4639d92:	ce 01       	movw	r24, r28
 4639d94:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4639d98:	ce 01       	movw	r24, r28
 4639d9a:	df 91       	pop	r29
 4639d9c:	cf 91       	pop	r28
 4639d9e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperl:

08c73b24 <_ZplRK15StringSumHelperl>:
 8c73b24:	cf 93       	push	r28
 8c73b26:	df 93       	push	r29
 8c73b28:	ec 01       	movw	r28, r24
 8c73b2a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 8c73b2e:	81 11       	cpse	r24, r1
 8c73b30:	00 c0       	rjmp	.+0      	; 0x8c73b32 <_ZN6String6concatEPKcj+0x34db93c>
 8c73b32:	ce 01       	movw	r24, r28
 8c73b34:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 8c73b38:	ce 01       	movw	r24, r28
 8c73b3a:	df 91       	pop	r29
 8c73b3c:	cf 91       	pop	r28
 8c73b3e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperm:

118e7664 <_ZplRK15StringSumHelperm>:
118e7664:	cf 93       	push	r28
118e7666:	df 93       	push	r29
118e7668:	ec 01       	movw	r28, r24
118e766a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
118e766e:	81 11       	cpse	r24, r1
118e7670:	00 c0       	rjmp	.+0      	; 0x118e7672 <_ZN6String6concatERKS_+0x69b722e>
118e7672:	ce 01       	movw	r24, r28
118e7674:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
118e7678:	ce 01       	movw	r24, r28
118e767a:	df 91       	pop	r29
118e767c:	cf 91       	pop	r28
118e767e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperf:

231cece4 <_ZplRK15StringSumHelperf>:
231cece4:	cf 93       	push	r28
231cece6:	df 93       	push	r29
231cece8:	ec 01       	movw	r28, r24
231cecea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
231cecee:	81 11       	cpse	r24, r1
231cecf0:	00 c0       	rjmp	.+0      	; 0x231cecf2 <_ZN6String6concatEPKc+0xd36e45c>
231cecf2:	ce 01       	movw	r24, r28
231cecf4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
231cecf8:	ce 01       	movw	r24, r28
231cecfa:	df 91       	pop	r29
231cecfc:	cf 91       	pop	r28
231cecfe:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperd:

4639d9e4 <_ZplRK15StringSumHelperd>:
4639d9e4:	cf 93       	push	r28
4639d9e6:	df 93       	push	r29
4639d9e8:	ec 01       	movw	r28, r24
4639d9ea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4639d9ee:	81 11       	cpse	r24, r1
4639d9f0:	00 c0       	rjmp	.+0      	; 0x4639d9f2 <_ZN6String6concatEc+0x1a6dc8a6>
4639d9f2:	ce 01       	movw	r24, r28
4639d9f4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4639d9f8:	ce 01       	movw	r24, r28
4639d9fa:	df 91       	pop	r29
4639d9fc:	cf 91       	pop	r28
4639d9fe:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPK19__FlashStringHelper:

8c73b3e4 <_ZplRK15StringSumHelperPK19__FlashStringHelper>:
8c73b3e4:	cf 93       	push	r28
8c73b3e6:	df 93       	push	r29
8c73b3e8:	ec 01       	movw	r28, r24
8c73b3ea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
8c73b3ee:	81 11       	cpse	r24, r1
8c73b3f0:	00 c0       	rjmp	.+0      	; 0x8c73b3f2 <_ZN6String6concatEh+0x34db9134>
8c73b3f2:	ce 01       	movw	r24, r28
8c73b3f4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
8c73b3f8:	ce 01       	movw	r24, r28
8c73b3fa:	df 91       	pop	r29
8c73b3fc:	cf 91       	pop	r28
8c73b3fe:	08 95       	ret

Disassembly of section .text._ZNK6String9compareToERKS_:

18e767e4 <_ZNK6String9compareToERKS_>:
18e767e4:	cf 93       	push	r28
18e767e6:	df 93       	push	r29
18e767e8:	dc 01       	movw	r26, r24
18e767ea:	ed 91       	ld	r30, X+
18e767ec:	fc 91       	ld	r31, X
18e767ee:	eb 01       	movw	r28, r22
18e767f0:	a8 81       	ld	r26, Y
18e767f2:	b9 81       	ldd	r27, Y+1	; 0x01
18e767f4:	30 97       	sbiw	r30, 0x00	; 0
18e767f6:	01 f0       	breq	.+0      	; 0x18e767f8 <_ZN6String6concatEPKc+0x3015f62>
18e767f8:	10 97       	sbiw	r26, 0x00	; 0
18e767fa:	01 f4       	brne	.+0      	; 0x18e767fc <_ZN6String6concatEPKc+0x3015f66>
18e767fc:	10 97       	sbiw	r26, 0x00	; 0
18e767fe:	01 f0       	breq	.+0      	; 0x18e76800 <_ZN6String6concatEPKc+0x3015f6a>
18e76800:	eb 01       	movw	r28, r22
18e76802:	2c 81       	ldd	r18, Y+4	; 0x04
18e76804:	3d 81       	ldd	r19, Y+5	; 0x05
18e76806:	23 2b       	or	r18, r19
18e76808:	01 f0       	breq	.+0      	; 0x18e7680a <_ZN6String6concatEPKc+0x3015f74>
18e7680a:	8c 91       	ld	r24, X
18e7680c:	90 e0       	ldi	r25, 0x00	; 0
18e7680e:	91 95       	neg	r25
18e76810:	81 95       	neg	r24
18e76812:	91 09       	sbc	r25, r1
18e76814:	00 c0       	rjmp	.+0      	; 0x18e76816 <_ZN6String6concatEPKc+0x3015f80>
18e76816:	30 97       	sbiw	r30, 0x00	; 0
18e76818:	01 f0       	breq	.+0      	; 0x18e7681a <_ZN6String6concatEPKc+0x3015f84>
18e7681a:	dc 01       	movw	r26, r24
18e7681c:	14 96       	adiw	r26, 0x04	; 4
18e7681e:	8d 91       	ld	r24, X+
18e76820:	9c 91       	ld	r25, X
18e76822:	15 97       	sbiw	r26, 0x05	; 5
18e76824:	89 2b       	or	r24, r25
18e76826:	01 f0       	breq	.+0      	; 0x18e76828 <_ZN6String6concatEPKc+0x3015f92>
18e76828:	80 81       	ld	r24, Z
18e7682a:	90 e0       	ldi	r25, 0x00	; 0
18e7682c:	00 c0       	rjmp	.+0      	; 0x18e7682e <_ZN6String6concatEPKc+0x3015f98>
18e7682e:	bd 01       	movw	r22, r26
18e76830:	cf 01       	movw	r24, r30
18e76832:	df 91       	pop	r29
18e76834:	cf 91       	pop	r28
18e76836:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
18e7683a:	80 e0       	ldi	r24, 0x00	; 0
18e7683c:	90 e0       	ldi	r25, 0x00	; 0
18e7683e:	df 91       	pop	r29
18e76840:	cf 91       	pop	r28
18e76842:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsERKS_:

31ced028 <_ZNK6String6equalsERKS_>:
31ced028:	fc 01       	movw	r30, r24
31ced02a:	44 81       	ldd	r20, Z+4	; 0x04
31ced02c:	55 81       	ldd	r21, Z+5	; 0x05
31ced02e:	fb 01       	movw	r30, r22
31ced030:	24 81       	ldd	r18, Z+4	; 0x04
31ced032:	35 81       	ldd	r19, Z+5	; 0x05
31ced034:	42 17       	cp	r20, r18
31ced036:	53 07       	cpc	r21, r19
31ced038:	01 f4       	brne	.+0      	; 0x31ced03a <_ZN6String6concatEc+0x602beee>
31ced03a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ced03e:	21 e0       	ldi	r18, 0x01	; 1
31ced040:	89 2b       	or	r24, r25
31ced042:	01 f0       	breq	.+0      	; 0x31ced044 <_ZN6String6concatEc+0x602bef8>
31ced044:	20 e0       	ldi	r18, 0x00	; 0
31ced046:	82 2f       	mov	r24, r18
31ced048:	08 95       	ret
31ced04a:	80 e0       	ldi	r24, 0x00	; 0
31ced04c:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsEPKc:

639da076 <_ZNK6String6equalsEPKc>:
639da076:	fc 01       	movw	r30, r24
639da078:	24 81       	ldd	r18, Z+4	; 0x04
639da07a:	35 81       	ldd	r19, Z+5	; 0x05
639da07c:	23 2b       	or	r18, r19
639da07e:	01 f4       	brne	.+0      	; 0x639da080 <_ZN6String6concatEh+0xc057dc2>
639da080:	21 e0       	ldi	r18, 0x01	; 1
639da082:	61 15       	cp	r22, r1
639da084:	71 05       	cpc	r23, r1
639da086:	01 f0       	breq	.+0      	; 0x639da088 <_ZN6String6concatEh+0xc057dca>
639da088:	fb 01       	movw	r30, r22
639da08a:	00 c0       	rjmp	.+0      	; 0x639da08c <_ZN6String6concatEh+0xc057dce>
639da08c:	fc 01       	movw	r30, r24
639da08e:	80 81       	ld	r24, Z
639da090:	91 81       	ldd	r25, Z+1	; 0x01
639da092:	61 15       	cp	r22, r1
639da094:	71 05       	cpc	r23, r1
639da096:	01 f4       	brne	.+0      	; 0x639da098 <_ZN6String6concatEh+0xc057dda>
639da098:	21 e0       	ldi	r18, 0x01	; 1
639da09a:	fc 01       	movw	r30, r24
639da09c:	80 81       	ld	r24, Z
639da09e:	88 23       	and	r24, r24
639da0a0:	01 f0       	breq	.+0      	; 0x639da0a2 <_ZN6String6concatEh+0xc057de4>
639da0a2:	00 c0       	rjmp	.+0      	; 0x639da0a4 <_ZN6String6concatEh+0xc057de6>
639da0a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
639da0a8:	21 e0       	ldi	r18, 0x01	; 1
639da0aa:	89 2b       	or	r24, r25
639da0ac:	01 f0       	breq	.+0      	; 0x639da0ae <_ZN6String6concatEh+0xc057df0>
639da0ae:	20 e0       	ldi	r18, 0x00	; 0
639da0b0:	82 2f       	mov	r24, r18
639da0b2:	08 95       	ret

Disassembly of section .text._ZNK6StringltERKS_:

c73b412a <_ZNK6StringltERKS_>:
c73b412a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
c73b412e:	89 2f       	mov	r24, r25
c73b4130:	88 1f       	adc	r24, r24
c73b4132:	88 27       	eor	r24, r24
c73b4134:	88 1f       	adc	r24, r24
c73b4136:	08 95       	ret

Disassembly of section .text._ZNK6StringgtERKS_:

8e768262 <_ZNK6StringgtERKS_>:
8e768262:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
8e768266:	21 e0       	ldi	r18, 0x01	; 1
8e768268:	18 16       	cp	r1, r24
8e76826a:	19 06       	cpc	r1, r25
8e76826c:	04 f0       	brlt	.+0      	; 0x8e76826e <_ZN6String6concatEh+0x36de5fb0>
8e76826e:	20 e0       	ldi	r18, 0x00	; 0
8e768270:	82 2f       	mov	r24, r18
8e768272:	08 95       	ret

Disassembly of section .text._ZNK6StringleERKS_:

1ced04d6 <_ZNK6StringleERKS_>:
1ced04d6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1ced04da:	21 e0       	ldi	r18, 0x01	; 1
1ced04dc:	18 16       	cp	r1, r24
1ced04de:	19 06       	cpc	r1, r25
1ced04e0:	04 f4       	brge	.+0      	; 0x1ced04e2 <_ZN6String6concatEPKc+0x706fc4c>
1ced04e2:	20 e0       	ldi	r18, 0x00	; 0
1ced04e4:	82 2f       	mov	r24, r18
1ced04e6:	08 95       	ret

Disassembly of section .text._ZNK6StringgeERKS_:

39da09be <_ZNK6StringgeERKS_>:
39da09be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
39da09c2:	89 2f       	mov	r24, r25
39da09c4:	80 95       	com	r24
39da09c6:	88 1f       	adc	r24, r24
39da09c8:	88 27       	eor	r24, r24
39da09ca:	88 1f       	adc	r24, r24
39da09cc:	08 95       	ret

Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

73b4138c <_ZNK6String16equalsIgnoreCaseERKS_>:
73b4138c:	ef 92       	push	r14
73b4138e:	ff 92       	push	r15
73b41390:	0f 93       	push	r16
73b41392:	1f 93       	push	r17
73b41394:	cf 93       	push	r28
73b41396:	df 93       	push	r29
73b41398:	86 17       	cp	r24, r22
73b4139a:	97 07       	cpc	r25, r23
73b4139c:	01 f0       	breq	.+0      	; 0x73b4139e <_ZN6String6concatEh+0x1c1bf0e0>
73b4139e:	fc 01       	movw	r30, r24
73b413a0:	24 81       	ldd	r18, Z+4	; 0x04
73b413a2:	35 81       	ldd	r19, Z+5	; 0x05
73b413a4:	fb 01       	movw	r30, r22
73b413a6:	44 81       	ldd	r20, Z+4	; 0x04
73b413a8:	55 81       	ldd	r21, Z+5	; 0x05
73b413aa:	24 17       	cp	r18, r20
73b413ac:	35 07       	cpc	r19, r21
73b413ae:	01 f4       	brne	.+0      	; 0x73b413b0 <_ZN6String6concatEh+0x1c1bf0f2>
73b413b0:	23 2b       	or	r18, r19
73b413b2:	01 f0       	breq	.+0      	; 0x73b413b4 <_ZN6String6concatEh+0x1c1bf0f6>
73b413b4:	fc 01       	movw	r30, r24
73b413b6:	00 81       	ld	r16, Z
73b413b8:	11 81       	ldd	r17, Z+1	; 0x01
73b413ba:	fb 01       	movw	r30, r22
73b413bc:	c0 81       	ld	r28, Z
73b413be:	d1 81       	ldd	r29, Z+1	; 0x01
73b413c0:	f8 01       	movw	r30, r16
73b413c2:	81 91       	ld	r24, Z+
73b413c4:	8f 01       	movw	r16, r30
73b413c6:	88 23       	and	r24, r24
73b413c8:	01 f0       	breq	.+0      	; 0x73b413ca <_ZN6String6concatEh+0x1c1bf10c>
73b413ca:	99 27       	eor	r25, r25
73b413cc:	87 fd       	sbrc	r24, 7
73b413ce:	90 95       	com	r25
73b413d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
73b413d4:	7c 01       	movw	r14, r24
73b413d6:	89 91       	ld	r24, Y+
73b413d8:	99 27       	eor	r25, r25
73b413da:	87 fd       	sbrc	r24, 7
73b413dc:	90 95       	com	r25
73b413de:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
73b413e2:	e8 16       	cp	r14, r24
73b413e4:	f9 06       	cpc	r15, r25
73b413e6:	01 f0       	breq	.+0      	; 0x73b413e8 <_ZN6String6concatEh+0x1c1bf12a>
73b413e8:	00 c0       	rjmp	.+0      	; 0x73b413ea <_ZN6String6concatEh+0x1c1bf12c>
73b413ea:	81 e0       	ldi	r24, 0x01	; 1
73b413ec:	00 c0       	rjmp	.+0      	; 0x73b413ee <_ZN6String6concatEh+0x1c1bf130>
73b413ee:	80 e0       	ldi	r24, 0x00	; 0
73b413f0:	df 91       	pop	r29
73b413f2:	cf 91       	pop	r28
73b413f4:	1f 91       	pop	r17
73b413f6:	0f 91       	pop	r16
73b413f8:	ff 90       	pop	r15
73b413fa:	ef 90       	pop	r14
73b413fc:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_j:

e768278a <_ZNK6String10startsWithERKS_j>:
e768278a:	fa 01       	movw	r30, r20
e768278c:	db 01       	movw	r26, r22
e768278e:	14 96       	adiw	r26, 0x04	; 4
e7682790:	4d 91       	ld	r20, X+
e7682792:	5c 91       	ld	r21, X
e7682794:	15 97       	sbiw	r26, 0x05	; 5
e7682796:	dc 01       	movw	r26, r24
e7682798:	14 96       	adiw	r26, 0x04	; 4
e768279a:	2d 91       	ld	r18, X+
e768279c:	3c 91       	ld	r19, X
e768279e:	15 97       	sbiw	r26, 0x05	; 5
e76827a0:	24 1b       	sub	r18, r20
e76827a2:	35 0b       	sbc	r19, r21
e76827a4:	2e 17       	cp	r18, r30
e76827a6:	3f 07       	cpc	r19, r31
e76827a8:	00 f0       	brcs	.+0      	; 0xe76827aa <_ZN6String6concatEi+0x3837e1d4>
e76827aa:	8d 91       	ld	r24, X+
e76827ac:	9c 91       	ld	r25, X
e76827ae:	00 97       	sbiw	r24, 0x00	; 0
e76827b0:	01 f0       	breq	.+0      	; 0xe76827b2 <_ZN6String6concatEi+0x3837e1dc>
e76827b2:	db 01       	movw	r26, r22
e76827b4:	6d 91       	ld	r22, X+
e76827b6:	7c 91       	ld	r23, X
e76827b8:	61 15       	cp	r22, r1
e76827ba:	71 05       	cpc	r23, r1
e76827bc:	01 f0       	breq	.+0      	; 0xe76827be <_ZN6String6concatEi+0x3837e1e8>
e76827be:	8e 0f       	add	r24, r30
e76827c0:	9f 1f       	adc	r25, r31
e76827c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e76827c6:	21 e0       	ldi	r18, 0x01	; 1
e76827c8:	89 2b       	or	r24, r25
e76827ca:	01 f0       	breq	.+0      	; 0xe76827cc <_ZN6String6concatEi+0x3837e1f6>
e76827cc:	20 e0       	ldi	r18, 0x00	; 0
e76827ce:	82 2f       	mov	r24, r18
e76827d0:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_:

ced04f5c <_ZNK6String10startsWithERKS_>:
ced04f5c:	fc 01       	movw	r30, r24
ced04f5e:	44 81       	ldd	r20, Z+4	; 0x04
ced04f60:	55 81       	ldd	r21, Z+5	; 0x05
ced04f62:	fb 01       	movw	r30, r22
ced04f64:	24 81       	ldd	r18, Z+4	; 0x04
ced04f66:	35 81       	ldd	r19, Z+5	; 0x05
ced04f68:	42 17       	cp	r20, r18
ced04f6a:	53 07       	cpc	r21, r19
ced04f6c:	00 f0       	brcs	.+0      	; 0xced04f6e <_ZN6String6concatEi+0x1fa00998>
ced04f6e:	40 e0       	ldi	r20, 0x00	; 0
ced04f70:	50 e0       	ldi	r21, 0x00	; 0
ced04f72:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
ced04f76:	80 e0       	ldi	r24, 0x00	; 0
ced04f78:	08 95       	ret

Disassembly of section .text._ZNK6String8endsWithERKS_:

9da09ed6 <_ZNK6String8endsWithERKS_>:
9da09ed6:	fc 01       	movw	r30, r24
9da09ed8:	84 81       	ldd	r24, Z+4	; 0x04
9da09eda:	95 81       	ldd	r25, Z+5	; 0x05
9da09edc:	db 01       	movw	r26, r22
9da09ede:	14 96       	adiw	r26, 0x04	; 4
9da09ee0:	4d 91       	ld	r20, X+
9da09ee2:	5c 91       	ld	r21, X
9da09ee4:	15 97       	sbiw	r26, 0x05	; 5
9da09ee6:	84 17       	cp	r24, r20
9da09ee8:	95 07       	cpc	r25, r21
9da09eea:	00 f0       	brcs	.+0      	; 0x9da09eec <_ZN6String6concatEh+0x46087c2e>
9da09eec:	20 81       	ld	r18, Z
9da09eee:	31 81       	ldd	r19, Z+1	; 0x01
9da09ef0:	21 15       	cp	r18, r1
9da09ef2:	31 05       	cpc	r19, r1
9da09ef4:	01 f0       	breq	.+0      	; 0x9da09ef6 <_ZN6String6concatEh+0x46087c38>
9da09ef6:	6d 91       	ld	r22, X+
9da09ef8:	7c 91       	ld	r23, X
9da09efa:	61 15       	cp	r22, r1
9da09efc:	71 05       	cpc	r23, r1
9da09efe:	01 f0       	breq	.+0      	; 0x9da09f00 <_ZN6String6concatEh+0x46087c42>
9da09f00:	84 1b       	sub	r24, r20
9da09f02:	95 0b       	sbc	r25, r21
9da09f04:	82 0f       	add	r24, r18
9da09f06:	93 1f       	adc	r25, r19
9da09f08:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
9da09f0c:	21 e0       	ldi	r18, 0x01	; 1
9da09f0e:	89 2b       	or	r24, r25
9da09f10:	01 f0       	breq	.+0      	; 0x9da09f12 <_ZN6String6concatEh+0x46087c54>
9da09f12:	20 e0       	ldi	r18, 0x00	; 0
9da09f14:	82 2f       	mov	r24, r18
9da09f16:	08 95       	ret

Disassembly of section .text._ZN6String9setCharAtEjc:

3b413dee <_ZN6String9setCharAtEjc>:
3b413dee:	dc 01       	movw	r26, r24
3b413df0:	14 96       	adiw	r26, 0x04	; 4
3b413df2:	2d 91       	ld	r18, X+
3b413df4:	3c 91       	ld	r19, X
3b413df6:	15 97       	sbiw	r26, 0x05	; 5
3b413df8:	62 17       	cp	r22, r18
3b413dfa:	73 07       	cpc	r23, r19
3b413dfc:	00 f4       	brcc	.+0      	; 0x3b413dfe <_ZN6String6concatEc+0xf752cb2>
3b413dfe:	ed 91       	ld	r30, X+
3b413e00:	fc 91       	ld	r31, X
3b413e02:	e6 0f       	add	r30, r22
3b413e04:	f7 1f       	adc	r31, r23
3b413e06:	40 83       	st	Z, r20
3b413e08:	08 95       	ret

Disassembly of section .text._ZN6StringixEj:

76827bf8 <_ZN6StringixEj>:
76827bf8:	fc 01       	movw	r30, r24
76827bfa:	84 81       	ldd	r24, Z+4	; 0x04
76827bfc:	95 81       	ldd	r25, Z+5	; 0x05
76827bfe:	68 17       	cp	r22, r24
76827c00:	79 07       	cpc	r23, r25
76827c02:	00 f4       	brcc	.+0      	; 0x76827c04 <_ZN6String6concatEh+0x1eea5946>
76827c04:	80 81       	ld	r24, Z
76827c06:	91 81       	ldd	r25, Z+1	; 0x01
76827c08:	00 97       	sbiw	r24, 0x00	; 0
76827c0a:	01 f4       	brne	.+0      	; 0x76827c0c <_ZN6String6concatEh+0x1eea594e>
76827c0c:	10 92 00 00 	sts	0x0000, r1
76827c10:	80 e0       	ldi	r24, 0x00	; 0
76827c12:	90 e0       	ldi	r25, 0x00	; 0
76827c14:	08 95       	ret
76827c16:	86 0f       	add	r24, r22
76827c18:	97 1f       	adc	r25, r23
76827c1a:	08 95       	ret

Disassembly of section .text._ZNK6StringixEj:

ed04f814 <_ZNK6StringixEj>:
ed04f814:	fc 01       	movw	r30, r24
ed04f816:	24 81       	ldd	r18, Z+4	; 0x04
ed04f818:	35 81       	ldd	r19, Z+5	; 0x05
ed04f81a:	62 17       	cp	r22, r18
ed04f81c:	73 07       	cpc	r23, r19
ed04f81e:	00 f4       	brcc	.+0      	; 0xed04f820 <_ZN6String6concatEi+0x3dd4b24a>
ed04f820:	80 81       	ld	r24, Z
ed04f822:	91 81       	ldd	r25, Z+1	; 0x01
ed04f824:	00 97       	sbiw	r24, 0x00	; 0
ed04f826:	01 f0       	breq	.+0      	; 0xed04f828 <_ZN6String6concatEi+0x3dd4b252>
ed04f828:	fc 01       	movw	r30, r24
ed04f82a:	e6 0f       	add	r30, r22
ed04f82c:	f7 1f       	adc	r31, r23
ed04f82e:	80 81       	ld	r24, Z
ed04f830:	08 95       	ret
ed04f832:	80 e0       	ldi	r24, 0x00	; 0
ed04f834:	08 95       	ret

Disassembly of section .text._ZNK6String6charAtEj:

da09f04a <_ZNK6String6charAtEj>:
da09f04a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String8getBytesEPhjj:

b413e098 <_ZNK6String8getBytesEPhjj>:
b413e098:	0f 93       	push	r16
b413e09a:	1f 93       	push	r17
b413e09c:	cf 93       	push	r28
b413e09e:	df 93       	push	r29
b413e0a0:	eb 01       	movw	r28, r22
b413e0a2:	41 15       	cp	r20, r1
b413e0a4:	51 05       	cpc	r21, r1
b413e0a6:	01 f0       	breq	.+0      	; 0xb413e0a8 <_ZN6String6concatEi+0x4e39ad2>
b413e0a8:	20 97       	sbiw	r28, 0x00	; 0
b413e0aa:	01 f0       	breq	.+0      	; 0xb413e0ac <_ZN6String6concatEi+0x4e39ad6>
b413e0ac:	fc 01       	movw	r30, r24
b413e0ae:	64 81       	ldd	r22, Z+4	; 0x04
b413e0b0:	75 81       	ldd	r23, Z+5	; 0x05
b413e0b2:	26 17       	cp	r18, r22
b413e0b4:	37 07       	cpc	r19, r23
b413e0b6:	00 f4       	brcc	.+0      	; 0xb413e0b8 <_ZN6String6concatEi+0x4e39ae2>
b413e0b8:	62 1b       	sub	r22, r18
b413e0ba:	73 0b       	sbc	r23, r19
b413e0bc:	8a 01       	movw	r16, r20
b413e0be:	01 50       	subi	r16, 0x01	; 1
b413e0c0:	11 09       	sbc	r17, r1
b413e0c2:	60 17       	cp	r22, r16
b413e0c4:	71 07       	cpc	r23, r17
b413e0c6:	00 f4       	brcc	.+0      	; 0xb413e0c8 <_ZN6String6concatEi+0x4e39af2>
b413e0c8:	8b 01       	movw	r16, r22
b413e0ca:	fc 01       	movw	r30, r24
b413e0cc:	60 81       	ld	r22, Z
b413e0ce:	71 81       	ldd	r23, Z+1	; 0x01
b413e0d0:	62 0f       	add	r22, r18
b413e0d2:	73 1f       	adc	r23, r19
b413e0d4:	a8 01       	movw	r20, r16
b413e0d6:	ce 01       	movw	r24, r28
b413e0d8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
b413e0dc:	c0 0f       	add	r28, r16
b413e0de:	d1 1f       	adc	r29, r17
b413e0e0:	18 82       	st	Y, r1
b413e0e2:	df 91       	pop	r29
b413e0e4:	cf 91       	pop	r28
b413e0e6:	1f 91       	pop	r17
b413e0e8:	0f 91       	pop	r16
b413e0ea:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEcj:

6827c184 <_ZNK6String7indexOfEcj>:
6827c184:	cf 93       	push	r28
6827c186:	df 93       	push	r29
6827c188:	fc 01       	movw	r30, r24
6827c18a:	84 81       	ldd	r24, Z+4	; 0x04
6827c18c:	95 81       	ldd	r25, Z+5	; 0x05
6827c18e:	48 17       	cp	r20, r24
6827c190:	59 07       	cpc	r21, r25
6827c192:	00 f4       	brcc	.+0      	; 0x6827c194 <_ZN6String6concatEh+0x108f9ed6>
6827c194:	c0 81       	ld	r28, Z
6827c196:	d1 81       	ldd	r29, Z+1	; 0x01
6827c198:	77 27       	eor	r23, r23
6827c19a:	67 fd       	sbrc	r22, 7
6827c19c:	70 95       	com	r23
6827c19e:	ce 01       	movw	r24, r28
6827c1a0:	84 0f       	add	r24, r20
6827c1a2:	95 1f       	adc	r25, r21
6827c1a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6827c1a8:	00 97       	sbiw	r24, 0x00	; 0
6827c1aa:	01 f0       	breq	.+0      	; 0x6827c1ac <_ZN6String6concatEh+0x108f9eee>
6827c1ac:	8c 1b       	sub	r24, r28
6827c1ae:	9d 0b       	sbc	r25, r29
6827c1b0:	00 c0       	rjmp	.+0      	; 0x6827c1b2 <_ZN6String6concatEh+0x108f9ef4>
6827c1b2:	8f ef       	ldi	r24, 0xFF	; 255
6827c1b4:	9f ef       	ldi	r25, 0xFF	; 255
6827c1b6:	df 91       	pop	r29
6827c1b8:	cf 91       	pop	r28
6827c1ba:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEc:

d04f8340 <_ZNK6String7indexOfEc>:
d04f8340:	40 e0       	ldi	r20, 0x00	; 0
d04f8342:	50 e0       	ldi	r21, 0x00	; 0
d04f8344:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String7indexOfERKS_j:

a09f0688 <_ZNK6String7indexOfERKS_j>:
a09f0688:	cf 93       	push	r28
a09f068a:	df 93       	push	r29
a09f068c:	fc 01       	movw	r30, r24
a09f068e:	84 81       	ldd	r24, Z+4	; 0x04
a09f0690:	95 81       	ldd	r25, Z+5	; 0x05
a09f0692:	48 17       	cp	r20, r24
a09f0694:	59 07       	cpc	r21, r25
a09f0696:	00 f4       	brcc	.+0      	; 0xa09f0698 <_ZN6String6concatEh+0x4906e3da>
a09f0698:	c0 81       	ld	r28, Z
a09f069a:	d1 81       	ldd	r29, Z+1	; 0x01
a09f069c:	fb 01       	movw	r30, r22
a09f069e:	60 81       	ld	r22, Z
a09f06a0:	71 81       	ldd	r23, Z+1	; 0x01
a09f06a2:	ce 01       	movw	r24, r28
a09f06a4:	84 0f       	add	r24, r20
a09f06a6:	95 1f       	adc	r25, r21
a09f06a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
a09f06ac:	00 97       	sbiw	r24, 0x00	; 0
a09f06ae:	01 f0       	breq	.+0      	; 0xa09f06b0 <_ZN6String6concatEh+0x4906e3f2>
a09f06b0:	8c 1b       	sub	r24, r28
a09f06b2:	9d 0b       	sbc	r25, r29
a09f06b4:	00 c0       	rjmp	.+0      	; 0xa09f06b6 <_ZN6String6concatEh+0x4906e3f8>
a09f06b6:	8f ef       	ldi	r24, 0xFF	; 255
a09f06b8:	9f ef       	ldi	r25, 0xFF	; 255
a09f06ba:	df 91       	pop	r29
a09f06bc:	cf 91       	pop	r28
a09f06be:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_:

413e0d48 <_ZNK6String7indexOfERKS_>:
413e0d48:	40 e0       	ldi	r20, 0x00	; 0
413e0d4a:	50 e0       	ldi	r21, 0x00	; 0
413e0d4c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String11lastIndexOfEcj:

827c1a98 <_ZNK6String11lastIndexOfEcj>:
827c1a98:	df 92       	push	r13
827c1a9a:	ef 92       	push	r14
827c1a9c:	ff 92       	push	r15
827c1a9e:	0f 93       	push	r16
827c1aa0:	1f 93       	push	r17
827c1aa2:	cf 93       	push	r28
827c1aa4:	df 93       	push	r29
827c1aa6:	ec 01       	movw	r28, r24
827c1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
827c1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
827c1aac:	48 17       	cp	r20, r24
827c1aae:	59 07       	cpc	r21, r25
827c1ab0:	00 f0       	brcs	.+0      	; 0x827c1ab2 <_ZN6String6concatEh+0x2ae3f7f4>
827c1ab2:	8f ef       	ldi	r24, 0xFF	; 255
827c1ab4:	9f ef       	ldi	r25, 0xFF	; 255
827c1ab6:	00 c0       	rjmp	.+0      	; 0x827c1ab8 <_ZN6String6concatEh+0x2ae3f7fa>
827c1ab8:	8a 01       	movw	r16, r20
827c1aba:	0f 5f       	subi	r16, 0xFF	; 255
827c1abc:	1f 4f       	sbci	r17, 0xFF	; 255
827c1abe:	e8 81       	ld	r30, Y
827c1ac0:	f9 81       	ldd	r31, Y+1	; 0x01
827c1ac2:	e0 0f       	add	r30, r16
827c1ac4:	f1 1f       	adc	r31, r17
827c1ac6:	d0 80       	ld	r13, Z
827c1ac8:	10 82       	st	Z, r1
827c1aca:	e8 80       	ld	r14, Y
827c1acc:	f9 80       	ldd	r15, Y+1	; 0x01
827c1ace:	77 27       	eor	r23, r23
827c1ad0:	67 fd       	sbrc	r22, 7
827c1ad2:	70 95       	com	r23
827c1ad4:	c7 01       	movw	r24, r14
827c1ad6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
827c1ada:	f7 01       	movw	r30, r14
827c1adc:	e0 0f       	add	r30, r16
827c1ade:	f1 1f       	adc	r31, r17
827c1ae0:	d0 82       	st	Z, r13
827c1ae2:	00 97       	sbiw	r24, 0x00	; 0
827c1ae4:	01 f0       	breq	.+0      	; 0x827c1ae6 <_ZN6String6concatEh+0x2ae3f828>
827c1ae6:	28 81       	ld	r18, Y
827c1ae8:	39 81       	ldd	r19, Y+1	; 0x01
827c1aea:	82 1b       	sub	r24, r18
827c1aec:	93 0b       	sbc	r25, r19
827c1aee:	df 91       	pop	r29
827c1af0:	cf 91       	pop	r28
827c1af2:	1f 91       	pop	r17
827c1af4:	0f 91       	pop	r16
827c1af6:	ff 90       	pop	r15
827c1af8:	ef 90       	pop	r14
827c1afa:	df 90       	pop	r13
827c1afc:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEc:

04f83596 <_ZNK6String11lastIndexOfEc>:
 4f83596:	fc 01       	movw	r30, r24
 4f83598:	44 81       	ldd	r20, Z+4	; 0x04
 4f8359a:	55 81       	ldd	r21, Z+5	; 0x05
 4f8359c:	41 50       	subi	r20, 0x01	; 1
 4f8359e:	51 09       	sbc	r21, r1
 4f835a0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

09f06b3a <_ZNK6String11lastIndexOfERKS_j>:
 9f06b3a:	af 92       	push	r10
 9f06b3c:	bf 92       	push	r11
 9f06b3e:	cf 92       	push	r12
 9f06b40:	df 92       	push	r13
 9f06b42:	ef 92       	push	r14
 9f06b44:	ff 92       	push	r15
 9f06b46:	0f 93       	push	r16
 9f06b48:	1f 93       	push	r17
 9f06b4a:	cf 93       	push	r28
 9f06b4c:	df 93       	push	r29
 9f06b4e:	7b 01       	movw	r14, r22
 9f06b50:	ea 01       	movw	r28, r20
 9f06b52:	fb 01       	movw	r30, r22
 9f06b54:	44 81       	ldd	r20, Z+4	; 0x04
 9f06b56:	55 81       	ldd	r21, Z+5	; 0x05
 9f06b58:	41 15       	cp	r20, r1
 9f06b5a:	51 05       	cpc	r21, r1
 9f06b5c:	01 f0       	breq	.+0      	; 0x9f06b5e <_ZN6String6concatEPKcj+0x476e968>
 9f06b5e:	fc 01       	movw	r30, r24
 9f06b60:	24 81       	ldd	r18, Z+4	; 0x04
 9f06b62:	35 81       	ldd	r19, Z+5	; 0x05
 9f06b64:	21 15       	cp	r18, r1
 9f06b66:	31 05       	cpc	r19, r1
 9f06b68:	01 f0       	breq	.+0      	; 0x9f06b6a <_ZN6String6concatEPKcj+0x476e974>
 9f06b6a:	24 17       	cp	r18, r20
 9f06b6c:	35 07       	cpc	r19, r21
 9f06b6e:	00 f0       	brcs	.+0      	; 0x9f06b70 <_ZN6String6concatEPKcj+0x476e97a>
 9f06b70:	c2 17       	cp	r28, r18
 9f06b72:	d3 07       	cpc	r29, r19
 9f06b74:	00 f0       	brcs	.+0      	; 0x9f06b76 <_ZN6String6concatEPKcj+0x476e980>
 9f06b76:	e9 01       	movw	r28, r18
 9f06b78:	21 97       	sbiw	r28, 0x01	; 1
 9f06b7a:	fc 01       	movw	r30, r24
 9f06b7c:	00 81       	ld	r16, Z
 9f06b7e:	11 81       	ldd	r17, Z+1	; 0x01
 9f06b80:	c8 01       	movw	r24, r16
 9f06b82:	aa 24       	eor	r10, r10
 9f06b84:	aa 94       	dec	r10
 9f06b86:	bb 24       	eor	r11, r11
 9f06b88:	ba 94       	dec	r11
 9f06b8a:	68 01       	movw	r12, r16
 9f06b8c:	cc 0e       	add	r12, r28
 9f06b8e:	dd 1e       	adc	r13, r29
 9f06b90:	c8 16       	cp	r12, r24
 9f06b92:	d9 06       	cpc	r13, r25
 9f06b94:	00 f0       	brcs	.+0      	; 0x9f06b96 <_ZN6String6concatEPKcj+0x476e9a0>
 9f06b96:	f7 01       	movw	r30, r14
 9f06b98:	60 81       	ld	r22, Z
 9f06b9a:	71 81       	ldd	r23, Z+1	; 0x01
 9f06b9c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 9f06ba0:	00 97       	sbiw	r24, 0x00	; 0
 9f06ba2:	01 f0       	breq	.+0      	; 0x9f06ba4 <_ZN6String6concatEPKcj+0x476e9ae>
 9f06ba4:	9c 01       	movw	r18, r24
 9f06ba6:	20 1b       	sub	r18, r16
 9f06ba8:	31 0b       	sbc	r19, r17
 9f06baa:	c2 17       	cp	r28, r18
 9f06bac:	d3 07       	cpc	r29, r19
 9f06bae:	00 f4       	brcc	.+0      	; 0x9f06bb0 <_ZN6String6concatEPKcj+0x476e9ba>
 9f06bb0:	95 01       	movw	r18, r10
 9f06bb2:	01 96       	adiw	r24, 0x01	; 1
 9f06bb4:	59 01       	movw	r10, r18
 9f06bb6:	00 c0       	rjmp	.+0      	; 0x9f06bb8 <_ZN6String6concatEPKcj+0x476e9c2>
 9f06bb8:	8f ef       	ldi	r24, 0xFF	; 255
 9f06bba:	9f ef       	ldi	r25, 0xFF	; 255
 9f06bbc:	00 c0       	rjmp	.+0      	; 0x9f06bbe <_ZN6String6concatEPKcj+0x476e9c8>
 9f06bbe:	c5 01       	movw	r24, r10
 9f06bc0:	df 91       	pop	r29
 9f06bc2:	cf 91       	pop	r28
 9f06bc4:	1f 91       	pop	r17
 9f06bc6:	0f 91       	pop	r16
 9f06bc8:	ff 90       	pop	r15
 9f06bca:	ef 90       	pop	r14
 9f06bcc:	df 90       	pop	r13
 9f06bce:	cf 90       	pop	r12
 9f06bd0:	bf 90       	pop	r11
 9f06bd2:	af 90       	pop	r10
 9f06bd4:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

13e0d710 <_ZNK6String11lastIndexOfERKS_>:
13e0d710:	fc 01       	movw	r30, r24
13e0d712:	44 81       	ldd	r20, Z+4	; 0x04
13e0d714:	55 81       	ldd	r21, Z+5	; 0x05
13e0d716:	fb 01       	movw	r30, r22
13e0d718:	24 81       	ldd	r18, Z+4	; 0x04
13e0d71a:	35 81       	ldd	r19, Z+5	; 0x05
13e0d71c:	42 1b       	sub	r20, r18
13e0d71e:	53 0b       	sbc	r21, r19
13e0d720:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZNK6String9substringEjj:

4f835c69 <_ZNK6String9substringEjj>:
4f835c69:	bf 92       	push	r11
4f835c6b:	cf 92       	push	r12
4f835c6d:	df 92       	push	r13
4f835c6f:	ef 92       	push	r14
4f835c71:	ff 92       	push	r15
4f835c73:	0f 93       	push	r16
4f835c75:	1f 93       	push	r17
4f835c77:	cf 93       	push	r28
4f835c79:	df 93       	push	r29
4f835c7b:	6c 01       	movw	r12, r24
4f835c7d:	7b 01       	movw	r14, r22
4f835c7f:	ea 01       	movw	r28, r20
4f835c81:	89 01       	movw	r16, r18
4f835c83:	24 17       	cp	r18, r20
4f835c85:	35 07       	cpc	r19, r21
4f835c87:	00 f4       	brcc	.+0      	; 0x4f835c89 <_ZN6String6concatEc+0x23b74b3d>
4f835c89:	8d 2f       	mov	r24, r29
4f835c8b:	e9 01       	movw	r28, r18
4f835c8d:	04 2f       	mov	r16, r20
4f835c8f:	18 2f       	mov	r17, r24
4f835c91:	60 e0       	ldi	r22, 0x00	; 0
4f835c93:	70 e0       	ldi	r23, 0x00	; 0
4f835c95:	c6 01       	movw	r24, r12
4f835c97:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4f835c9b:	d7 01       	movw	r26, r14
4f835c9d:	14 96       	adiw	r26, 0x04	; 4
4f835c9f:	8d 91       	ld	r24, X+
4f835ca1:	9c 91       	ld	r25, X
4f835ca3:	15 97       	sbiw	r26, 0x05	; 5
4f835ca5:	8c 17       	cp	r24, r28
4f835ca7:	9d 07       	cpc	r25, r29
4f835ca9:	00 f0       	brcs	.+0      	; 0x4f835cab <_ZN6String6concatEc+0x23b74b5f>
4f835cab:	80 17       	cp	r24, r16
4f835cad:	91 07       	cpc	r25, r17
4f835caf:	00 f4       	brcc	.+0      	; 0x4f835cb1 <_ZN6String6concatEc+0x23b74b65>
4f835cb1:	8c 01       	movw	r16, r24
4f835cb3:	d7 01       	movw	r26, r14
4f835cb5:	ed 91       	ld	r30, X+
4f835cb7:	fc 91       	ld	r31, X
4f835cb9:	11 97       	sbiw	r26, 0x01	; 1
4f835cbb:	e0 0f       	add	r30, r16
4f835cbd:	f1 1f       	adc	r31, r17
4f835cbf:	b0 80       	ld	r11, Z
4f835cc1:	10 82       	st	Z, r1
4f835cc3:	6d 91       	ld	r22, X+
4f835cc5:	7c 91       	ld	r23, X
4f835cc7:	6c 0f       	add	r22, r28
4f835cc9:	7d 1f       	adc	r23, r29
4f835ccb:	c6 01       	movw	r24, r12
4f835ccd:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4f835cd1:	d7 01       	movw	r26, r14
4f835cd3:	ed 91       	ld	r30, X+
4f835cd5:	fc 91       	ld	r31, X
4f835cd7:	e0 0f       	add	r30, r16
4f835cd9:	f1 1f       	adc	r31, r17
4f835cdb:	b0 82       	st	Z, r11
4f835cdd:	c6 01       	movw	r24, r12
4f835cdf:	df 91       	pop	r29
4f835ce1:	cf 91       	pop	r28
4f835ce3:	1f 91       	pop	r17
4f835ce5:	0f 91       	pop	r16
4f835ce7:	ff 90       	pop	r15
4f835ce9:	ef 90       	pop	r14
4f835ceb:	df 90       	pop	r13
4f835ced:	cf 90       	pop	r12
4f835cef:	bf 90       	pop	r11
4f835cf1:	08 95       	ret

Disassembly of section .text._ZN6String7replaceEcc:

9f06b95c <_ZN6String7replaceEcc>:
9f06b95c:	dc 01       	movw	r26, r24
9f06b95e:	ed 91       	ld	r30, X+
9f06b960:	fc 91       	ld	r31, X
9f06b962:	30 97       	sbiw	r30, 0x00	; 0
9f06b964:	01 f4       	brne	.+0      	; 0x9f06b966 <_ZN6String6concatEh+0x476e96a8>
9f06b966:	08 95       	ret
9f06b968:	86 13       	cpse	r24, r22
9f06b96a:	00 c0       	rjmp	.+0      	; 0x9f06b96c <_ZN6String6concatEh+0x476e96ae>
9f06b96c:	40 83       	st	Z, r20
9f06b96e:	31 96       	adiw	r30, 0x01	; 1
9f06b970:	80 81       	ld	r24, Z
9f06b972:	81 11       	cpse	r24, r1
9f06b974:	00 c0       	rjmp	.+0      	; 0x9f06b976 <_ZN6String6concatEh+0x476e96b8>
9f06b976:	08 95       	ret

Disassembly of section .text._ZN6String7replaceERKS_S1_:

3e0d72d4 <_ZN6String7replaceERKS_S1_>:
3e0d72d4:	2f 92       	push	r2
3e0d72d6:	3f 92       	push	r3
3e0d72d8:	4f 92       	push	r4
3e0d72da:	5f 92       	push	r5
3e0d72dc:	6f 92       	push	r6
3e0d72de:	7f 92       	push	r7
3e0d72e0:	8f 92       	push	r8
3e0d72e2:	9f 92       	push	r9
3e0d72e4:	af 92       	push	r10
3e0d72e6:	bf 92       	push	r11
3e0d72e8:	cf 92       	push	r12
3e0d72ea:	df 92       	push	r13
3e0d72ec:	ef 92       	push	r14
3e0d72ee:	ff 92       	push	r15
3e0d72f0:	0f 93       	push	r16
3e0d72f2:	1f 93       	push	r17
3e0d72f4:	cf 93       	push	r28
3e0d72f6:	df 93       	push	r29
3e0d72f8:	ec 01       	movw	r28, r24
3e0d72fa:	5b 01       	movw	r10, r22
3e0d72fc:	7a 01       	movw	r14, r20
3e0d72fe:	4c 80       	ldd	r4, Y+4	; 0x04
3e0d7300:	5d 80       	ldd	r5, Y+5	; 0x05
3e0d7302:	41 14       	cp	r4, r1
3e0d7304:	51 04       	cpc	r5, r1
3e0d7306:	01 f4       	brne	.+0      	; 0x3e0d7308 <_ZN6String6concatEc+0x124161bc>
3e0d7308:	00 c0       	rjmp	.+0      	; 0x3e0d730a <_ZN6String6concatEc+0x124161be>
3e0d730a:	fb 01       	movw	r30, r22
3e0d730c:	64 80       	ldd	r6, Z+4	; 0x04
3e0d730e:	75 80       	ldd	r7, Z+5	; 0x05
3e0d7310:	61 14       	cp	r6, r1
3e0d7312:	71 04       	cpc	r7, r1
3e0d7314:	01 f4       	brne	.+0      	; 0x3e0d7316 <_ZN6String6concatEc+0x124161ca>
3e0d7316:	00 c0       	rjmp	.+0      	; 0x3e0d7318 <_ZN6String6concatEc+0x124161cc>
3e0d7318:	fa 01       	movw	r30, r20
3e0d731a:	c4 80       	ldd	r12, Z+4	; 0x04
3e0d731c:	d5 80       	ldd	r13, Z+5	; 0x05
3e0d731e:	c6 18       	sub	r12, r6
3e0d7320:	d7 08       	sbc	r13, r7
3e0d7322:	08 81       	ld	r16, Y
3e0d7324:	19 81       	ldd	r17, Y+1	; 0x01
3e0d7326:	c1 14       	cp	r12, r1
3e0d7328:	d1 04       	cpc	r13, r1
3e0d732a:	01 f4       	brne	.+0      	; 0x3e0d732c <_ZN6String6concatEc+0x124161e0>
3e0d732c:	f5 01       	movw	r30, r10
3e0d732e:	60 81       	ld	r22, Z
3e0d7330:	71 81       	ldd	r23, Z+1	; 0x01
3e0d7332:	c8 01       	movw	r24, r16
3e0d7334:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d7338:	ec 01       	movw	r28, r24
3e0d733a:	00 97       	sbiw	r24, 0x00	; 0
3e0d733c:	01 f4       	brne	.+0      	; 0x3e0d733e <_ZN6String6concatEc+0x124161f2>
3e0d733e:	00 c0       	rjmp	.+0      	; 0x3e0d7340 <_ZN6String6concatEc+0x124161f4>
3e0d7340:	f7 01       	movw	r30, r14
3e0d7342:	60 81       	ld	r22, Z
3e0d7344:	71 81       	ldd	r23, Z+1	; 0x01
3e0d7346:	44 81       	ldd	r20, Z+4	; 0x04
3e0d7348:	55 81       	ldd	r21, Z+5	; 0x05
3e0d734a:	ce 01       	movw	r24, r28
3e0d734c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d7350:	f7 01       	movw	r30, r14
3e0d7352:	04 81       	ldd	r16, Z+4	; 0x04
3e0d7354:	15 81       	ldd	r17, Z+5	; 0x05
3e0d7356:	0c 0f       	add	r16, r28
3e0d7358:	1d 1f       	adc	r17, r29
3e0d735a:	00 c0       	rjmp	.+0      	; 0x3e0d735c <_ZN6String6concatEc+0x12416210>
3e0d735c:	d7 fc       	sbrc	r13, 7
3e0d735e:	00 c0       	rjmp	.+0      	; 0x3e0d7360 <_ZN6String6concatEc+0x12416214>
3e0d7360:	fb 01       	movw	r30, r22
3e0d7362:	20 80       	ld	r2, Z
3e0d7364:	31 80       	ldd	r3, Z+1	; 0x01
3e0d7366:	42 01       	movw	r8, r4
3e0d7368:	00 c0       	rjmp	.+0      	; 0x3e0d736a <_ZN6String6concatEc+0x1241621e>
3e0d736a:	48 01       	movw	r8, r16
3e0d736c:	f5 01       	movw	r30, r10
3e0d736e:	60 81       	ld	r22, Z
3e0d7370:	71 81       	ldd	r23, Z+1	; 0x01
3e0d7372:	c8 01       	movw	r24, r16
3e0d7374:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d7378:	2c 01       	movw	r4, r24
3e0d737a:	00 97       	sbiw	r24, 0x00	; 0
3e0d737c:	01 f0       	breq	.+0      	; 0x3e0d737e <_ZN6String6concatEc+0x12416232>
3e0d737e:	32 01       	movw	r6, r4
3e0d7380:	60 1a       	sub	r6, r16
3e0d7382:	71 0a       	sbc	r7, r17
3e0d7384:	a3 01       	movw	r20, r6
3e0d7386:	b8 01       	movw	r22, r16
3e0d7388:	c4 01       	movw	r24, r8
3e0d738a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d738e:	68 0c       	add	r6, r8
3e0d7390:	79 1c       	adc	r7, r9
3e0d7392:	f7 01       	movw	r30, r14
3e0d7394:	60 81       	ld	r22, Z
3e0d7396:	71 81       	ldd	r23, Z+1	; 0x01
3e0d7398:	44 81       	ldd	r20, Z+4	; 0x04
3e0d739a:	55 81       	ldd	r21, Z+5	; 0x05
3e0d739c:	c3 01       	movw	r24, r6
3e0d739e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d73a2:	f7 01       	movw	r30, r14
3e0d73a4:	84 80       	ldd	r8, Z+4	; 0x04
3e0d73a6:	95 80       	ldd	r9, Z+5	; 0x05
3e0d73a8:	86 0c       	add	r8, r6
3e0d73aa:	97 1c       	adc	r9, r7
3e0d73ac:	f5 01       	movw	r30, r10
3e0d73ae:	04 81       	ldd	r16, Z+4	; 0x04
3e0d73b0:	15 81       	ldd	r17, Z+5	; 0x05
3e0d73b2:	04 0d       	add	r16, r4
3e0d73b4:	15 1d       	adc	r17, r5
3e0d73b6:	8c 81       	ldd	r24, Y+4	; 0x04
3e0d73b8:	9d 81       	ldd	r25, Y+5	; 0x05
3e0d73ba:	8c 0d       	add	r24, r12
3e0d73bc:	9d 1d       	adc	r25, r13
3e0d73be:	9d 83       	std	Y+5, r25	; 0x05
3e0d73c0:	8c 83       	std	Y+4, r24	; 0x04
3e0d73c2:	00 c0       	rjmp	.+0      	; 0x3e0d73c4 <_ZN6String6concatEc+0x12416278>
3e0d73c4:	b8 01       	movw	r22, r16
3e0d73c6:	c4 01       	movw	r24, r8
3e0d73c8:	df 91       	pop	r29
3e0d73ca:	cf 91       	pop	r28
3e0d73cc:	1f 91       	pop	r17
3e0d73ce:	0f 91       	pop	r16
3e0d73d0:	ff 90       	pop	r15
3e0d73d2:	ef 90       	pop	r14
3e0d73d4:	df 90       	pop	r13
3e0d73d6:	cf 90       	pop	r12
3e0d73d8:	bf 90       	pop	r11
3e0d73da:	af 90       	pop	r10
3e0d73dc:	9f 90       	pop	r9
3e0d73de:	8f 90       	pop	r8
3e0d73e0:	7f 90       	pop	r7
3e0d73e2:	6f 90       	pop	r6
3e0d73e4:	5f 90       	pop	r5
3e0d73e6:	4f 90       	pop	r4
3e0d73e8:	3f 90       	pop	r3
3e0d73ea:	2f 90       	pop	r2
3e0d73ec:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
3e0d73f0:	b1 01       	movw	r22, r2
3e0d73f2:	c8 01       	movw	r24, r16
3e0d73f4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d73f8:	00 97       	sbiw	r24, 0x00	; 0
3e0d73fa:	01 f0       	breq	.+0      	; 0x3e0d73fc <_ZN6String6concatEc+0x124162b0>
3e0d73fc:	8c 01       	movw	r16, r24
3e0d73fe:	06 0d       	add	r16, r6
3e0d7400:	17 1d       	adc	r17, r7
3e0d7402:	8c 0c       	add	r8, r12
3e0d7404:	9d 1c       	adc	r9, r13
3e0d7406:	00 c0       	rjmp	.+0      	; 0x3e0d7408 <_ZN6String6concatEc+0x124162bc>
3e0d7408:	84 14       	cp	r8, r4
3e0d740a:	95 04       	cpc	r9, r5
3e0d740c:	01 f4       	brne	.+0      	; 0x3e0d740e <_ZN6String6concatEc+0x124162c2>
3e0d740e:	00 c0       	rjmp	.+0      	; 0x3e0d7410 <_ZN6String6concatEc+0x124162c4>
3e0d7410:	8a 81       	ldd	r24, Y+2	; 0x02
3e0d7412:	9b 81       	ldd	r25, Y+3	; 0x03
3e0d7414:	88 15       	cp	r24, r8
3e0d7416:	99 05       	cpc	r25, r9
3e0d7418:	00 f4       	brcc	.+0      	; 0x3e0d741a <_ZN6String6concatEc+0x124162ce>
3e0d741a:	b4 01       	movw	r22, r8
3e0d741c:	ce 01       	movw	r24, r28
3e0d741e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d7422:	88 23       	and	r24, r24
3e0d7424:	01 f0       	breq	.+0      	; 0x3e0d7426 <_ZN6String6concatEc+0x124162da>
3e0d7426:	4c 81       	ldd	r20, Y+4	; 0x04
3e0d7428:	5d 81       	ldd	r21, Y+5	; 0x05
3e0d742a:	41 50       	subi	r20, 0x01	; 1
3e0d742c:	51 09       	sbc	r21, r1
3e0d742e:	57 fd       	sbrc	r21, 7
3e0d7430:	00 c0       	rjmp	.+0      	; 0x3e0d7432 <_ZN6String6concatEc+0x124162e6>
3e0d7432:	b5 01       	movw	r22, r10
3e0d7434:	ce 01       	movw	r24, r28
3e0d7436:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d743a:	8c 01       	movw	r16, r24
3e0d743c:	97 fd       	sbrc	r25, 7
3e0d743e:	00 c0       	rjmp	.+0      	; 0x3e0d7440 <_ZN6String6concatEc+0x124162f4>
3e0d7440:	88 81       	ld	r24, Y
3e0d7442:	99 81       	ldd	r25, Y+1	; 0x01
3e0d7444:	f5 01       	movw	r30, r10
3e0d7446:	24 81       	ldd	r18, Z+4	; 0x04
3e0d7448:	35 81       	ldd	r19, Z+5	; 0x05
3e0d744a:	20 0f       	add	r18, r16
3e0d744c:	31 1f       	adc	r19, r17
3e0d744e:	82 0f       	add	r24, r18
3e0d7450:	93 1f       	adc	r25, r19
3e0d7452:	4c 81       	ldd	r20, Y+4	; 0x04
3e0d7454:	5d 81       	ldd	r21, Y+5	; 0x05
3e0d7456:	42 1b       	sub	r20, r18
3e0d7458:	53 0b       	sbc	r21, r19
3e0d745a:	bc 01       	movw	r22, r24
3e0d745c:	8c 0d       	add	r24, r12
3e0d745e:	9d 1d       	adc	r25, r13
3e0d7460:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d7464:	8c 81       	ldd	r24, Y+4	; 0x04
3e0d7466:	9d 81       	ldd	r25, Y+5	; 0x05
3e0d7468:	8c 0d       	add	r24, r12
3e0d746a:	9d 1d       	adc	r25, r13
3e0d746c:	9d 83       	std	Y+5, r25	; 0x05
3e0d746e:	8c 83       	std	Y+4, r24	; 0x04
3e0d7470:	e8 81       	ld	r30, Y
3e0d7472:	f9 81       	ldd	r31, Y+1	; 0x01
3e0d7474:	e8 0f       	add	r30, r24
3e0d7476:	f9 1f       	adc	r31, r25
3e0d7478:	10 82       	st	Z, r1
3e0d747a:	88 81       	ld	r24, Y
3e0d747c:	99 81       	ldd	r25, Y+1	; 0x01
3e0d747e:	f7 01       	movw	r30, r14
3e0d7480:	60 81       	ld	r22, Z
3e0d7482:	71 81       	ldd	r23, Z+1	; 0x01
3e0d7484:	44 81       	ldd	r20, Z+4	; 0x04
3e0d7486:	55 81       	ldd	r21, Z+5	; 0x05
3e0d7488:	80 0f       	add	r24, r16
3e0d748a:	91 1f       	adc	r25, r17
3e0d748c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e0d7490:	a8 01       	movw	r20, r16
3e0d7492:	00 c0       	rjmp	.+0      	; 0x3e0d7494 <_ZN6String6concatEc+0x12416348>
3e0d7494:	df 91       	pop	r29
3e0d7496:	cf 91       	pop	r28
3e0d7498:	1f 91       	pop	r17
3e0d749a:	0f 91       	pop	r16
3e0d749c:	ff 90       	pop	r15
3e0d749e:	ef 90       	pop	r14
3e0d74a0:	df 90       	pop	r13
3e0d74a2:	cf 90       	pop	r12
3e0d74a4:	bf 90       	pop	r11
3e0d74a6:	af 90       	pop	r10
3e0d74a8:	9f 90       	pop	r9
3e0d74aa:	8f 90       	pop	r8
3e0d74ac:	7f 90       	pop	r7
3e0d74ae:	6f 90       	pop	r6
3e0d74b0:	5f 90       	pop	r5
3e0d74b2:	4f 90       	pop	r4
3e0d74b4:	3f 90       	pop	r3
3e0d74b6:	2f 90       	pop	r2
3e0d74b8:	08 95       	ret

Disassembly of section .text._ZN6String6removeEjj:

7c1ae78e <_ZN6String6removeEjj>:
7c1ae78e:	cf 93       	push	r28
7c1ae790:	df 93       	push	r29
7c1ae792:	ec 01       	movw	r28, r24
7c1ae794:	9b 01       	movw	r18, r22
7c1ae796:	ba 01       	movw	r22, r20
7c1ae798:	4c 81       	ldd	r20, Y+4	; 0x04
7c1ae79a:	5d 81       	ldd	r21, Y+5	; 0x05
7c1ae79c:	24 17       	cp	r18, r20
7c1ae79e:	35 07       	cpc	r19, r21
7c1ae7a0:	00 f4       	brcc	.+0      	; 0x7c1ae7a2 <_ZN6String6concatEh+0x2482c4e4>
7c1ae7a2:	61 15       	cp	r22, r1
7c1ae7a4:	71 05       	cpc	r23, r1
7c1ae7a6:	01 f0       	breq	.+0      	; 0x7c1ae7a8 <_ZN6String6concatEh+0x2482c4ea>
7c1ae7a8:	c9 01       	movw	r24, r18
7c1ae7aa:	86 0f       	add	r24, r22
7c1ae7ac:	97 1f       	adc	r25, r23
7c1ae7ae:	48 17       	cp	r20, r24
7c1ae7b0:	59 07       	cpc	r21, r25
7c1ae7b2:	00 f4       	brcc	.+0      	; 0x7c1ae7b4 <_ZN6String6concatEh+0x2482c4f6>
7c1ae7b4:	ba 01       	movw	r22, r20
7c1ae7b6:	62 1b       	sub	r22, r18
7c1ae7b8:	73 0b       	sbc	r23, r19
7c1ae7ba:	88 81       	ld	r24, Y
7c1ae7bc:	99 81       	ldd	r25, Y+1	; 0x01
7c1ae7be:	46 1b       	sub	r20, r22
7c1ae7c0:	57 0b       	sbc	r21, r23
7c1ae7c2:	5d 83       	std	Y+5, r21	; 0x05
7c1ae7c4:	4c 83       	std	Y+4, r20	; 0x04
7c1ae7c6:	42 1b       	sub	r20, r18
7c1ae7c8:	53 0b       	sbc	r21, r19
7c1ae7ca:	62 0f       	add	r22, r18
7c1ae7cc:	73 1f       	adc	r23, r19
7c1ae7ce:	68 0f       	add	r22, r24
7c1ae7d0:	79 1f       	adc	r23, r25
7c1ae7d2:	82 0f       	add	r24, r18
7c1ae7d4:	93 1f       	adc	r25, r19
7c1ae7d6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c1ae7da:	e8 81       	ld	r30, Y
7c1ae7dc:	f9 81       	ldd	r31, Y+1	; 0x01
7c1ae7de:	8c 81       	ldd	r24, Y+4	; 0x04
7c1ae7e0:	9d 81       	ldd	r25, Y+5	; 0x05
7c1ae7e2:	e8 0f       	add	r30, r24
7c1ae7e4:	f9 1f       	adc	r31, r25
7c1ae7e6:	10 82       	st	Z, r1
7c1ae7e8:	df 91       	pop	r29
7c1ae7ea:	cf 91       	pop	r28
7c1ae7ec:	08 95       	ret

Disassembly of section .text._ZN6String6removeEj:

f835cf7c <_ZN6String6removeEj>:
f835cf7c:	fc 01       	movw	r30, r24
f835cf7e:	44 81       	ldd	r20, Z+4	; 0x04
f835cf80:	55 81       	ldd	r21, Z+5	; 0x05
f835cf82:	64 17       	cp	r22, r20
f835cf84:	75 07       	cpc	r23, r21
f835cf86:	00 f4       	brcc	.+0      	; 0xf835cf88 <_ZN6String6concatEi+0x490589b2>
f835cf88:	46 1b       	sub	r20, r22
f835cf8a:	57 0b       	sbc	r21, r23
f835cf8c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
f835cf90:	08 95       	ret

Disassembly of section .text._ZN6String11toLowerCaseEv:

f06b9f0e <_ZN6String11toLowerCaseEv>:
f06b9f0e:	cf 93       	push	r28
f06b9f10:	df 93       	push	r29
f06b9f12:	fc 01       	movw	r30, r24
f06b9f14:	c0 81       	ld	r28, Z
f06b9f16:	d1 81       	ldd	r29, Z+1	; 0x01
f06b9f18:	20 97       	sbiw	r28, 0x00	; 0
f06b9f1a:	01 f0       	breq	.+0      	; 0xf06b9f1c <_ZN6String6concatEi+0x413b5946>
f06b9f1c:	88 81       	ld	r24, Y
f06b9f1e:	88 23       	and	r24, r24
f06b9f20:	01 f0       	breq	.+0      	; 0xf06b9f22 <_ZN6String6concatEi+0x413b594c>
f06b9f22:	99 27       	eor	r25, r25
f06b9f24:	87 fd       	sbrc	r24, 7
f06b9f26:	90 95       	com	r25
f06b9f28:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f06b9f2c:	89 93       	st	Y+, r24
f06b9f2e:	00 c0       	rjmp	.+0      	; 0xf06b9f30 <_ZN6String6concatEi+0x413b595a>
f06b9f30:	df 91       	pop	r29
f06b9f32:	cf 91       	pop	r28
f06b9f34:	08 95       	ret

Disassembly of section .text._ZN6String11toUpperCaseEv:

e0d73e44 <_ZN6String11toUpperCaseEv>:
e0d73e44:	cf 93       	push	r28
e0d73e46:	df 93       	push	r29
e0d73e48:	fc 01       	movw	r30, r24
e0d73e4a:	c0 81       	ld	r28, Z
e0d73e4c:	d1 81       	ldd	r29, Z+1	; 0x01
e0d73e4e:	20 97       	sbiw	r28, 0x00	; 0
e0d73e50:	01 f0       	breq	.+0      	; 0xe0d73e52 <_ZN6String6concatEi+0x31a6f87c>
e0d73e52:	88 81       	ld	r24, Y
e0d73e54:	88 23       	and	r24, r24
e0d73e56:	01 f0       	breq	.+0      	; 0xe0d73e58 <_ZN6String6concatEi+0x31a6f882>
e0d73e58:	99 27       	eor	r25, r25
e0d73e5a:	87 fd       	sbrc	r24, 7
e0d73e5c:	90 95       	com	r25
e0d73e5e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e0d73e62:	89 93       	st	Y+, r24
e0d73e64:	00 c0       	rjmp	.+0      	; 0xe0d73e66 <_ZN6String6concatEi+0x31a6f890>
e0d73e66:	df 91       	pop	r29
e0d73e68:	cf 91       	pop	r28
e0d73e6a:	08 95       	ret

Disassembly of section .text._ZN6String4trimEv:

c1ae7cb0 <_ZN6String4trimEv>:
c1ae7cb0:	af 92       	push	r10
c1ae7cb2:	bf 92       	push	r11
c1ae7cb4:	cf 92       	push	r12
c1ae7cb6:	df 92       	push	r13
c1ae7cb8:	ef 92       	push	r14
c1ae7cba:	ff 92       	push	r15
c1ae7cbc:	0f 93       	push	r16
c1ae7cbe:	1f 93       	push	r17
c1ae7cc0:	cf 93       	push	r28
c1ae7cc2:	df 93       	push	r29
c1ae7cc4:	7c 01       	movw	r14, r24
c1ae7cc6:	dc 01       	movw	r26, r24
c1ae7cc8:	cd 90       	ld	r12, X+
c1ae7cca:	dc 90       	ld	r13, X
c1ae7ccc:	11 97       	sbiw	r26, 0x01	; 1
c1ae7cce:	c1 14       	cp	r12, r1
c1ae7cd0:	d1 04       	cpc	r13, r1
c1ae7cd2:	01 f4       	brne	.+0      	; 0xc1ae7cd4 <_ZN6String6concatEi+0x127e36fe>
c1ae7cd4:	00 c0       	rjmp	.+0      	; 0xc1ae7cd6 <_ZN6String6concatEi+0x127e3700>
c1ae7cd6:	14 96       	adiw	r26, 0x04	; 4
c1ae7cd8:	cd 91       	ld	r28, X+
c1ae7cda:	dc 91       	ld	r29, X
c1ae7cdc:	15 97       	sbiw	r26, 0x05	; 5
c1ae7cde:	20 97       	sbiw	r28, 0x00	; 0
c1ae7ce0:	01 f0       	breq	.+0      	; 0xc1ae7ce2 <_ZN6String6concatEi+0x127e370c>
c1ae7ce2:	56 01       	movw	r10, r12
c1ae7ce4:	85 01       	movw	r16, r10
c1ae7ce6:	bf ef       	ldi	r27, 0xFF	; 255
c1ae7ce8:	ab 1a       	sub	r10, r27
c1ae7cea:	bb 0a       	sbc	r11, r27
c1ae7cec:	f8 01       	movw	r30, r16
c1ae7cee:	80 81       	ld	r24, Z
c1ae7cf0:	99 27       	eor	r25, r25
c1ae7cf2:	87 fd       	sbrc	r24, 7
c1ae7cf4:	90 95       	com	r25
c1ae7cf6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
c1ae7cfa:	89 2b       	or	r24, r25
c1ae7cfc:	01 f4       	brne	.+0      	; 0xc1ae7cfe <_ZN6String6concatEi+0x127e3728>
c1ae7cfe:	21 97       	sbiw	r28, 0x01	; 1
c1ae7d00:	cc 0d       	add	r28, r12
c1ae7d02:	dd 1d       	adc	r29, r13
c1ae7d04:	88 81       	ld	r24, Y
c1ae7d06:	99 27       	eor	r25, r25
c1ae7d08:	87 fd       	sbrc	r24, 7
c1ae7d0a:	90 95       	com	r25
c1ae7d0c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
c1ae7d10:	89 2b       	or	r24, r25
c1ae7d12:	01 f4       	brne	.+0      	; 0xc1ae7d14 <_ZN6String6concatEi+0x127e373e>
c1ae7d14:	ae 01       	movw	r20, r28
c1ae7d16:	4f 5f       	subi	r20, 0xFF	; 255
c1ae7d18:	5f 4f       	sbci	r21, 0xFF	; 255
c1ae7d1a:	40 1b       	sub	r20, r16
c1ae7d1c:	51 0b       	sbc	r21, r17
c1ae7d1e:	d7 01       	movw	r26, r14
c1ae7d20:	15 96       	adiw	r26, 0x05	; 5
c1ae7d22:	5c 93       	st	X, r21
c1ae7d24:	4e 93       	st	-X, r20
c1ae7d26:	14 97       	sbiw	r26, 0x04	; 4
c1ae7d28:	c0 16       	cp	r12, r16
c1ae7d2a:	d1 06       	cpc	r13, r17
c1ae7d2c:	00 f4       	brcc	.+0      	; 0xc1ae7d2e <_ZN6String6concatEi+0x127e3758>
c1ae7d2e:	b8 01       	movw	r22, r16
c1ae7d30:	c6 01       	movw	r24, r12
c1ae7d32:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
c1ae7d36:	00 c0       	rjmp	.+0      	; 0xc1ae7d38 <_ZN6String6concatEi+0x127e3762>
c1ae7d38:	c0 17       	cp	r28, r16
c1ae7d3a:	d1 07       	cpc	r29, r17
c1ae7d3c:	00 f0       	brcs	.+0      	; 0xc1ae7d3e <_ZN6String6concatEi+0x127e3768>
c1ae7d3e:	21 97       	sbiw	r28, 0x01	; 1
c1ae7d40:	00 c0       	rjmp	.+0      	; 0xc1ae7d42 <_ZN6String6concatEi+0x127e376c>
c1ae7d42:	d7 01       	movw	r26, r14
c1ae7d44:	ed 91       	ld	r30, X+
c1ae7d46:	fc 91       	ld	r31, X
c1ae7d48:	11 97       	sbiw	r26, 0x01	; 1
c1ae7d4a:	14 96       	adiw	r26, 0x04	; 4
c1ae7d4c:	8d 91       	ld	r24, X+
c1ae7d4e:	9c 91       	ld	r25, X
c1ae7d50:	15 97       	sbiw	r26, 0x05	; 5
c1ae7d52:	e8 0f       	add	r30, r24
c1ae7d54:	f9 1f       	adc	r31, r25
c1ae7d56:	10 82       	st	Z, r1
c1ae7d58:	df 91       	pop	r29
c1ae7d5a:	cf 91       	pop	r28
c1ae7d5c:	1f 91       	pop	r17
c1ae7d5e:	0f 91       	pop	r16
c1ae7d60:	ff 90       	pop	r15
c1ae7d62:	ef 90       	pop	r14
c1ae7d64:	df 90       	pop	r13
c1ae7d66:	cf 90       	pop	r12
c1ae7d68:	bf 90       	pop	r11
c1ae7d6a:	af 90       	pop	r10
c1ae7d6c:	08 95       	ret

Disassembly of section .text._ZNK6String5toIntEv:

835cfa1e <_ZNK6String5toIntEv>:
835cfa1e:	fc 01       	movw	r30, r24
835cfa20:	80 81       	ld	r24, Z
835cfa22:	91 81       	ldd	r25, Z+1	; 0x01
835cfa24:	00 97       	sbiw	r24, 0x00	; 0
835cfa26:	01 f0       	breq	.+0      	; 0x835cfa28 <_ZN6String6concatEh+0x2bc4d76a>
835cfa28:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
835cfa2c:	60 e0       	ldi	r22, 0x00	; 0
835cfa2e:	70 e0       	ldi	r23, 0x00	; 0
835cfa30:	cb 01       	movw	r24, r22
835cfa32:	08 95       	ret

Disassembly of section .text._ZNK6String7toFloatEv:

06b9f452 <_ZNK6String7toFloatEv>:
 6b9f452:	fc 01       	movw	r30, r24
 6b9f454:	80 81       	ld	r24, Z
 6b9f456:	91 81       	ldd	r25, Z+1	; 0x01
 6b9f458:	00 97       	sbiw	r24, 0x00	; 0
 6b9f45a:	01 f0       	breq	.+0      	; 0x6b9f45c <_ZN6String6concatEPKcj+0x1407266>
 6b9f45c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 6b9f460:	60 e0       	ldi	r22, 0x00	; 0
 6b9f462:	70 e0       	ldi	r23, 0x00	; 0
 6b9f464:	cb 01       	movw	r24, r22
 6b9f466:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006f0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000108a  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.atexit  00000006  00000000  00000000  000017ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.initVariant 00000002  00000000  00000000  000017b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.startup.main 0000001e  00000000  00000000  000017b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .comment      00000012  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY

Disassembly of section .text.atexit:

00000000 <atexit>:
void initVariant() __attribute__((weak));
void initVariant() { }

int main(void)
{
	init();
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0

	initVariant();
   4:	08 95       	ret

Disassembly of section .text.initVariant:

00000006 <initVariant>:
   6:	08 95       	ret

Disassembly of section .text.startup.main:

0000000e <main>:
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
   e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
#endif
	
	setup();
    
	for (;;) {
		loop();
  12:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
		if (serialEventRun) serialEventRun();
  16:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  1a:	c0 e0       	ldi	r28, 0x00	; 0
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  22:	20 97       	sbiw	r28, 0x00	; 0
  24:	01 f0       	breq	.+0      	; 0x26 <main+0x18>
  26:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <__zero_reg__+0x2b>

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000004bc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000abb  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Znwj   00000004  00000000  00000000  00000fab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Znaj   00000004  00000000  00000000  00000faf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZdlPv  00000004  00000000  00000000  00000fb3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZdaPv  00000004  00000000  00000000  00000fb7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__cxa_guard_acquire 00000012  00000000  00000000  00000fbb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__cxa_guard_release 00000008  00000000  00000000  00000fcd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.__cxa_guard_abort 00000002  00000000  00000000  00000fd5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text.__cxa_pure_virtual 00000002  00000000  00000000  00000fd7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .comment      00000012  00000000  00000000  00000fd9  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Znwj:

00000000 <_Znwj>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
   0:	0c 94 00 00 	jmp	0	; 0x0 <_Znwj>

Disassembly of section .text._Znaj:

00000000 <_Znaj>:
   4:	0c 94       	Address 0x0000000000000004 is out of bounds.
.word	0xffff	; ????
	...

Disassembly of section .text._ZdlPv:

0000000c <_ZdlPv>:
   c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text._ZdaPv:

0000001c <_ZdaPv>:
  1c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.__cxa_guard_acquire:

0000003c <__cxa_guard_acquire>:
  3c:	fc 01       	movw	r30, r24
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	20 81       	ld	r18, Z
  44:	22 23       	and	r18, r18
  46:	01 f0       	breq	.+0      	; 0x48 <__cxa_guard_acquire+0xc>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	08 95       	ret

Disassembly of section .text.__cxa_guard_release:

0000008a <__cxa_guard_release>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	fc 01       	movw	r30, r24
  8e:	20 83       	st	Z, r18
  90:	08 95       	ret

Disassembly of section .text.__cxa_guard_abort:

0000011c <__cxa_guard_abort>:
 11c:	08 95       	ret

Disassembly of section .text.__cxa_pure_virtual:

0000023a <__cxa_pure_virtual>:
 23a:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a20  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000fbf  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__vector_16 00000094  00000000  00000000  00001a13  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.millis  00000018  00000000  00000000  00001aa7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.micros  00000046  00000000  00000000  00001abf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.delay   0000004c  00000000  00000000  00001b05  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.delayMicroseconds 00000016  00000000  00000000  00001b51  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.init    00000076  00000000  00000000  00001b67  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss.timer0_fract 00000001  00000000  00000000  00001bdd  2**0
                  ALLOC
 12 .bss.timer0_millis 00000004  00000000  00000000  00001bdd  2**0
                  ALLOC
 13 .bss.timer0_overflow_count 00000004  00000000  00000000  00001bdd  2**0
                  ALLOC
 14 .comment      00000012  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY

Disassembly of section .text.__vector_16:

00000000 <__vector_16>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	1f 92       	push	r1
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
	sbi(TCCR0A, WGM00);
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	af 93       	push	r26
	sbi(TCCR0B, CS00);
  14:	bf 93       	push	r27
  16:	80 91 00 00 	lds	r24, 0x0000

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	90 91 00 00 	lds	r25, 0x0000
  1e:	a0 91 00 00 	lds	r26, 0x0000
  22:	b0 91 00 00 	lds	r27, 0x0000
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  26:	30 91 00 00 	lds	r19, 0x0000

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	23 e0       	ldi	r18, 0x03	; 3
  2c:	23 0f       	add	r18, r19
  2e:	2d 37       	cpi	r18, 0x7D	; 125
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	00 f4       	brcc	.+0      	; 0x32 <__vector_16+0x32>
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	a1 1d       	adc	r26, r1
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	b1 1d       	adc	r27, r1
  38:	00 c0       	rjmp	.+0      	; 0x3a <__vector_16+0x3a>
  3a:	26 e8       	ldi	r18, 0x86	; 134
  3c:	23 0f       	add	r18, r19
  3e:	02 96       	adiw	r24, 0x02	; 2

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	a1 1d       	adc	r26, r1
  42:	b1 1d       	adc	r27, r1
  44:	20 93 00 00 	sts	0x0000, r18
  48:	80 93 00 00 	sts	0x0000, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4c:	90 93 00 00 	sts	0x0000, r25
  50:	a0 93 00 00 	sts	0x0000, r26
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
  54:	b0 93 00 00 	sts	0x0000, r27
  58:	80 91 00 00 	lds	r24, 0x0000
  5c:	90 91 00 00 	lds	r25, 0x0000
	sbi(ADCSRA, ADPS1);
  60:	a0 91 00 00 	lds	r26, 0x0000
	sbi(ADCSRA, ADPS0);
  64:	b0 91 00 00 	lds	r27, 0x0000
  68:	01 96       	adiw	r24, 0x01	; 1

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
  6a:	a1 1d       	adc	r26, r1
  6c:	b1 1d       	adc	r27, r1
  6e:	80 93 00 00 	sts	0x0000, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
  72:	90 93 00 00 	sts	0x0000, r25
  76:	a0 93 00 00 	sts	0x0000, r26
  7a:	b0 93 00 00 	sts	0x0000, r27
  7e:	bf 91       	pop	r27
  80:	af 91       	pop	r26
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	3f 91       	pop	r19
  88:	2f 91       	pop	r18
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

Disassembly of section .text.millis:

00000094 <millis>:
  94:	2f b7       	in	r18, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 00 00 	lds	r22, 0x0000
  9c:	70 91 00 00 	lds	r23, 0x0000
  a0:	80 91 00 00 	lds	r24, 0x0000
  a4:	90 91 00 00 	lds	r25, 0x0000
  a8:	2f bf       	out	0x3f, r18	; 63
  aa:	08 95       	ret

Disassembly of section .text.micros:

00000140 <micros>:
 140:	3f b7       	in	r19, 0x3f	; 63
 142:	f8 94       	cli
 144:	80 91 00 00 	lds	r24, 0x0000
 148:	90 91 00 00 	lds	r25, 0x0000
 14c:	a0 91 00 00 	lds	r26, 0x0000
 150:	b0 91 00 00 	lds	r27, 0x0000
 154:	26 b5       	in	r18, 0x26	; 38
 156:	a8 9b       	sbis	0x15, 0	; 21
 158:	00 c0       	rjmp	.+0      	; 0x15a <micros+0x1a>
 15a:	2f 3f       	cpi	r18, 0xFF	; 255
 15c:	01 f0       	breq	.+0      	; 0x15e <micros+0x1e>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	a1 1d       	adc	r26, r1
 162:	b1 1d       	adc	r27, r1
 164:	3f bf       	out	0x3f, r19	; 63
 166:	66 27       	eor	r22, r22
 168:	78 2f       	mov	r23, r24
 16a:	89 2f       	mov	r24, r25
 16c:	9a 2f       	mov	r25, r26
 16e:	62 0f       	add	r22, r18
 170:	71 1d       	adc	r23, r1
 172:	81 1d       	adc	r24, r1
 174:	91 1d       	adc	r25, r1
 176:	42 e0       	ldi	r20, 0x02	; 2
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	88 1f       	adc	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	4a 95       	dec	r20
 182:	01 f4       	brne	.+0      	; 0x184 <micros+0x44>
 184:	08 95       	ret

Disassembly of section .text.delay:

000002c6 <delay>:
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	6b 01       	movw	r12, r22
 2d4:	7c 01       	movw	r14, r24
 2d6:	0e 94 00 00 	call	0	; 0x0 <timer0_fract>
 2da:	eb 01       	movw	r28, r22
 2dc:	c1 14       	cp	r12, r1
 2de:	d1 04       	cpc	r13, r1
 2e0:	e1 04       	cpc	r14, r1
 2e2:	f1 04       	cpc	r15, r1
 2e4:	01 f0       	breq	.+0      	; 0x2e6 <delay+0x20>
 2e6:	0e 94 00 00 	call	0	; 0x0 <timer0_fract>
 2ea:	6c 1b       	sub	r22, r28
 2ec:	7d 0b       	sbc	r23, r29
 2ee:	68 3e       	cpi	r22, 0xE8	; 232
 2f0:	73 40       	sbci	r23, 0x03	; 3
 2f2:	00 f0       	brcs	.+0      	; 0x2f4 <delay+0x2e>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	c8 1a       	sub	r12, r24
 2f8:	d1 08       	sbc	r13, r1
 2fa:	e1 08       	sbc	r14, r1
 2fc:	f1 08       	sbc	r15, r1
 2fe:	c8 51       	subi	r28, 0x18	; 24
 300:	dc 4f       	sbci	r29, 0xFC	; 252
 302:	00 c0       	rjmp	.+0      	; 0x304 <delay+0x3e>
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	08 95       	ret

Disassembly of section .text.delayMicroseconds:

000005d8 <delayMicroseconds>:
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	01 f0       	breq	.+0      	; 0x5de <delayMicroseconds+0x6>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	02 97       	sbiw	r24, 0x02	; 2
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	01 f4       	brne	.+0      	; 0x5ec <delayMicroseconds+0x14>
 5ec:	08 95       	ret

Disassembly of section .text.init:

00000bc6 <init>:
 bc6:	78 94       	sei
 bc8:	84 b5       	in	r24, 0x24	; 36
 bca:	82 60       	ori	r24, 0x02	; 2
 bcc:	84 bd       	out	0x24, r24	; 36
 bce:	84 b5       	in	r24, 0x24	; 36
 bd0:	81 60       	ori	r24, 0x01	; 1
 bd2:	84 bd       	out	0x24, r24	; 36
 bd4:	85 b5       	in	r24, 0x25	; 37
 bd6:	82 60       	ori	r24, 0x02	; 2
 bd8:	85 bd       	out	0x25, r24	; 37
 bda:	85 b5       	in	r24, 0x25	; 37
 bdc:	81 60       	ori	r24, 0x01	; 1
 bde:	85 bd       	out	0x25, r24	; 37
 be0:	ee e6       	ldi	r30, 0x6E	; 110
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	80 81       	ld	r24, Z
 be6:	81 60       	ori	r24, 0x01	; 1
 be8:	80 83       	st	Z, r24
 bea:	e1 e8       	ldi	r30, 0x81	; 129
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	10 82       	st	Z, r1
 bf0:	80 81       	ld	r24, Z
 bf2:	82 60       	ori	r24, 0x02	; 2
 bf4:	80 83       	st	Z, r24
 bf6:	80 81       	ld	r24, Z
 bf8:	81 60       	ori	r24, 0x01	; 1
 bfa:	80 83       	st	Z, r24
 bfc:	e0 e8       	ldi	r30, 0x80	; 128
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	80 81       	ld	r24, Z
 c02:	81 60       	ori	r24, 0x01	; 1
 c04:	80 83       	st	Z, r24
 c06:	e1 eb       	ldi	r30, 0xB1	; 177
 c08:	f0 e0       	ldi	r31, 0x00	; 0
 c0a:	80 81       	ld	r24, Z
 c0c:	84 60       	ori	r24, 0x04	; 4
 c0e:	80 83       	st	Z, r24
 c10:	e0 eb       	ldi	r30, 0xB0	; 176
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	80 81       	ld	r24, Z
 c16:	81 60       	ori	r24, 0x01	; 1
 c18:	80 83       	st	Z, r24
 c1a:	ea e7       	ldi	r30, 0x7A	; 122
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	80 81       	ld	r24, Z
 c20:	84 60       	ori	r24, 0x04	; 4
 c22:	80 83       	st	Z, r24
 c24:	80 81       	ld	r24, Z
 c26:	82 60       	ori	r24, 0x02	; 2
 c28:	80 83       	st	Z, r24
 c2a:	80 81       	ld	r24, Z
 c2c:	81 60       	ori	r24, 0x01	; 1
 c2e:	80 83       	st	Z, r24
 c30:	80 81       	ld	r24, Z
 c32:	80 68       	ori	r24, 0x80	; 128
 c34:	80 83       	st	Z, r24
 c36:	10 92 c1 00 	sts	0x00C1, r1
 c3a:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008d0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f61  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.analogReference 00000006  00000000  00000000  00001865  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.analogRead 0000003a  00000000  00000000  0000186b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.analogWrite 000000be  00000000  00000000  000018a5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.analog_reference 00000001  00000000  00000000  00001963  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000012  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY

Disassembly of section .text.analogReference:

00000000 <analogReference>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	80 93 00 00 	sts	0x0000, r24
   4:	08 95       	ret

Disassembly of section .text.analogRead:

00000006 <analogRead>:
   6:	8e 30       	cpi	r24, 0x0E	; 14
   8:	00 f0       	brcs	.+0      	; 0xa <analogRead+0x4>
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	8e 50       	subi	r24, 0x0E	; 14
   c:	87 70       	andi	r24, 0x07	; 7
   e:	20 91 00 00 	lds	r18, 0x0000
	if (val == 0)
  12:	90 e4       	ldi	r25, 0x40	; 64
	{
		digitalWrite(pin, LOW);
  14:	29 9f       	mul	r18, r25
  16:	90 01       	movw	r18, r0
	}
	else if (val == 255)
  18:	11 24       	eor	r1, r1
  1a:	82 2b       	or	r24, r18
  1c:	80 93 7c 00 	sts	0x007C, r24
	{
		digitalWrite(pin, HIGH);
  20:	80 91 7a 00 	lds	r24, 0x007A
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
  24:	80 64       	ori	r24, 0x40	; 64
  26:	80 93 7a 00 	sts	0x007A, r24
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
  2a:	80 91 7a 00 	lds	r24, 0x007A
	}
	else
	{
		switch(digitalPinToTimer(pin))
  2e:	86 fd       	sbrc	r24, 6
  30:	00 c0       	rjmp	.+0      	; 0x32 <analogRead+0x2c>
  32:	80 91 78 00 	lds	r24, 0x0078
  36:	20 91 79 00 	lds	r18, 0x0079
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	92 2b       	or	r25, r18
  3e:	08 95       	ret

Disassembly of section .text.analogWrite:

00000046 <analogWrite>:
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
  46:	1f 93       	push	r17
  48:	cf 93       	push	r28
				OCR0B = val; // set pwm duty
  4a:	df 93       	push	r29
				break;
  4c:	18 2f       	mov	r17, r24
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
  4e:	eb 01       	movw	r28, r22
  50:	61 e0       	ldi	r22, 0x01	; 1
  52:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  56:	20 97       	sbiw	r28, 0x00	; 0
  58:	01 f4       	brne	.+0      	; 0x5a <analogWrite+0x14>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
  5a:	60 e0       	ldi	r22, 0x00	; 0
  5c:	00 c0       	rjmp	.+0      	; 0x5e <analogWrite+0x18>
  5e:	cf 3f       	cpi	r28, 0xFF	; 255
  60:	d1 05       	cpc	r29, r1
  62:	01 f4       	brne	.+0      	; 0x64 <analogWrite+0x1e>
				OCR1B = val; // set pwm duty
  64:	61 e0       	ldi	r22, 0x01	; 1
  66:	81 2f       	mov	r24, r17
  68:	df 91       	pop	r29
  6a:	cf 91       	pop	r28
				break;
  6c:	1f 91       	pop	r17
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
  6e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  72:	e1 2f       	mov	r30, r17
				OCR0A = val; // set pwm duty
  74:	f0 e0       	ldi	r31, 0x00	; 0
				break;
  76:	e0 50       	subi	r30, 0x00	; 0
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
  78:	f0 40       	sbci	r31, 0x00	; 0
  7a:	e4 91       	lpm	r30, Z
  7c:	e3 30       	cpi	r30, 0x03	; 3
  7e:	01 f0       	breq	.+0      	; 0x80 <analogWrite+0x3a>
  80:	00 f4       	brcc	.+0      	; 0x82 <analogWrite+0x3c>
				OCR1A = val; // set pwm duty
  82:	e1 30       	cpi	r30, 0x01	; 1
  84:	01 f0       	breq	.+0      	; 0x86 <analogWrite+0x40>
  86:	e2 30       	cpi	r30, 0x02	; 2
  88:	01 f4       	brne	.+0      	; 0x8a <analogWrite+0x44>
				break;
  8a:	84 b5       	in	r24, 0x24	; 36
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	84 bd       	out	0x24, r24	; 36
  90:	c8 bd       	out	0x28, r28	; 40
  92:	00 c0       	rjmp	.+0      	; 0x94 <analogWrite+0x4e>
  94:	e6 30       	cpi	r30, 0x06	; 6
				OCR2A = val; // set pwm duty
  96:	01 f0       	breq	.+0      	; 0x98 <analogWrite+0x52>
  98:	e7 30       	cpi	r30, 0x07	; 7
				break;
  9a:	01 f0       	breq	.+0      	; 0x9c <analogWrite+0x56>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
  9c:	e4 30       	cpi	r30, 0x04	; 4
  9e:	01 f4       	brne	.+0      	; 0xa0 <analogWrite+0x5a>
  a0:	80 91 80 00 	lds	r24, 0x0080
  a4:	80 62       	ori	r24, 0x20	; 32
				OCR2B = val; // set pwm duty
  a6:	80 93 80 00 	sts	0x0080, r24
				break;
  aa:	d0 93 8b 00 	sts	0x008B, r29
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
  ae:	c0 93 8a 00 	sts	0x008A, r28
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <analogWrite+0x6e>
  b4:	84 b5       	in	r24, 0x24	; 36
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	84 bd       	out	0x24, r24	; 36
  ba:	c7 bd       	out	0x27, r28	; 39
  bc:	00 c0       	rjmp	.+0      	; 0xbe <analogWrite+0x78>
  be:	80 91 80 00 	lds	r24, 0x0080
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	80 93 80 00 	sts	0x0080, r24
  c8:	d0 93 89 00 	sts	0x0089, r29
  cc:	c0 93 88 00 	sts	0x0088, r28
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <analogWrite+0x8c>
  d2:	80 91 b0 00 	lds	r24, 0x00B0
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 93 b0 00 	sts	0x00B0, r24
  dc:	c0 93 b3 00 	sts	0x00B3, r28
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <analogWrite+0x9c>
  e2:	80 91 b0 00 	lds	r24, 0x00B0
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	80 93 b0 00 	sts	0x00B0, r24
  ec:	c0 93 b4 00 	sts	0x00B4, r28
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <analogWrite+0xac>
  f2:	c0 38       	cpi	r28, 0x80	; 128
  f4:	d1 05       	cpc	r29, r1
  f6:	04 f0       	brlt	.+0      	; 0xf8 <analogWrite+0xb2>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <analogWrite+0xb4>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <analogWrite+0xb6>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000010fd  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.turnOffPWM 00000052  00000000  00000000  00001c4d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.pinMode 00000072  00000000  00000000  00001c9f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.digitalWrite 0000006c  00000000  00000000  00001d11  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.digitalRead 00000052  00000000  00000000  00001d7d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data.digital_pin_to_timer_PGM 00000014  00000000  00000000  00001dcf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .progmem.data.digital_pin_to_bit_mask_PGM 00000014  00000000  00000000  00001de3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .progmem.data.digital_pin_to_port_PGM 00000014  00000000  00000000  00001df7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .progmem.data.port_to_input_PGM 0000000a  00000000  00000000  00001e0b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .progmem.data.port_to_output_PGM 0000000a  00000000  00000000  00001e15  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .progmem.data.port_to_mode_PGM 0000000a  00000000  00000000  00001e1f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .comment      00000012  00000000  00000000  00001e29  2**0
                  CONTENTS, READONLY

Disassembly of section .text.turnOffPWM:

00000000 <turnOffPWM>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	83 30       	cpi	r24, 0x03	; 3
   2:	01 f0       	breq	.+0      	; 0x4 <turnOffPWM+0x4>
	uint8_t timer = digitalPinToTimer(pin);
   4:	00 f4       	brcc	.+0      	; 0x6 <turnOffPWM+0x6>
   6:	81 30       	cpi	r24, 0x01	; 1
   8:	01 f0       	breq	.+0      	; 0xa <turnOffPWM+0xa>
   a:	82 30       	cpi	r24, 0x02	; 2
   c:	01 f0       	breq	.+0      	; 0xe <turnOffPWM+0xe>
   e:	08 95       	ret
	uint8_t bit = digitalPinToBitMask(pin);
  10:	86 30       	cpi	r24, 0x06	; 6
  12:	01 f0       	breq	.+0      	; 0x14 <turnOffPWM+0x14>
  14:	87 30       	cpi	r24, 0x07	; 7
  16:	01 f0       	breq	.+0      	; 0x18 <turnOffPWM+0x18>
	uint8_t port = digitalPinToPort(pin);
  18:	84 30       	cpi	r24, 0x04	; 4
  1a:	01 f4       	brne	.+0      	; 0x1c <turnOffPWM+0x1c>
  1c:	80 91 80 00 	lds	r24, 0x0080

	if (port == NOT_A_PIN) return LOW;
  20:	8f 7d       	andi	r24, 0xDF	; 223
  22:	00 c0       	rjmp	.+0      	; 0x24 <turnOffPWM+0x24>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	80 91 80 00 	lds	r24, 0x0080
  28:	8f 77       	andi	r24, 0x7F	; 127

	if (*portInputRegister(port) & bit) return HIGH;
  2a:	80 93 80 00 	sts	0x0080, r24
  2e:	08 95       	ret
  30:	84 b5       	in	r24, 0x24	; 36
  32:	8f 77       	andi	r24, 0x7F	; 127
  34:	00 c0       	rjmp	.+0      	; 0x36 <turnOffPWM+0x36>
  36:	84 b5       	in	r24, 0x24	; 36
  38:	8f 7d       	andi	r24, 0xDF	; 223
  3a:	84 bd       	out	0x24, r24	; 36
  3c:	08 95       	ret
  3e:	80 91 b0 00 	lds	r24, 0x00B0
  42:	8f 77       	andi	r24, 0x7F	; 127
  44:	00 c0       	rjmp	.+0      	; 0x46 <turnOffPWM+0x46>
  46:	80 91 b0 00 	lds	r24, 0x00B0
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  4a:	8f 7d       	andi	r24, 0xDF	; 223
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	80 93 b0 00 	sts	0x00B0, r24
  50:	08 95       	ret

Disassembly of section .text.pinMode:

00000052 <pinMode>:
  52:	cf 93       	push	r28
  54:	df 93       	push	r29
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	fc 01       	movw	r30, r24
  5a:	e0 50       	subi	r30, 0x00	; 0
  5c:	f0 40       	sbci	r31, 0x00	; 0
  5e:	24 91       	lpm	r18, Z
  60:	fc 01       	movw	r30, r24
  62:	e0 50       	subi	r30, 0x00	; 0
  64:	f0 40       	sbci	r31, 0x00	; 0
  66:	84 91       	lpm	r24, Z
  68:	88 23       	and	r24, r24
  6a:	01 f0       	breq	.+0      	; 0x6c <pinMode+0x1a>
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	88 0f       	add	r24, r24
  70:	99 1f       	adc	r25, r25
  72:	fc 01       	movw	r30, r24
  74:	e0 50       	subi	r30, 0x00	; 0
  76:	f0 40       	sbci	r31, 0x00	; 0
  78:	a5 91       	lpm	r26, Z+
  7a:	b4 91       	lpm	r27, Z
  7c:	80 50       	subi	r24, 0x00	; 0
  7e:	90 40       	sbci	r25, 0x00	; 0
  80:	fc 01       	movw	r30, r24
  82:	c5 91       	lpm	r28, Z+
  84:	d4 91       	lpm	r29, Z
  86:	9f b7       	in	r25, 0x3f	; 63
  88:	61 11       	cpse	r22, r1
  8a:	00 c0       	rjmp	.+0      	; 0x8c <pinMode+0x3a>
  8c:	f8 94       	cli
  8e:	8c 91       	ld	r24, X
  90:	20 95       	com	r18
  92:	82 23       	and	r24, r18
  94:	8c 93       	st	X, r24
  96:	88 81       	ld	r24, Y
  98:	82 23       	and	r24, r18
  9a:	00 c0       	rjmp	.+0      	; 0x9c <pinMode+0x4a>
  9c:	62 30       	cpi	r22, 0x02	; 2
  9e:	01 f4       	brne	.+0      	; 0xa0 <pinMode+0x4e>
  a0:	f8 94       	cli
  a2:	8c 91       	ld	r24, X
  a4:	32 2f       	mov	r19, r18
  a6:	30 95       	com	r19
  a8:	83 23       	and	r24, r19
  aa:	8c 93       	st	X, r24
  ac:	88 81       	ld	r24, Y
  ae:	82 2b       	or	r24, r18
  b0:	88 83       	st	Y, r24
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <pinMode+0x62>
  b4:	f8 94       	cli
  b6:	8c 91       	ld	r24, X
  b8:	82 2b       	or	r24, r18
  ba:	8c 93       	st	X, r24
  bc:	9f bf       	out	0x3f, r25	; 63
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000116 <digitalWrite>:
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	1f 92       	push	r1
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	e0 50       	subi	r30, 0x00	; 0
 12c:	f0 40       	sbci	r31, 0x00	; 0
 12e:	84 91       	lpm	r24, Z
 130:	f9 01       	movw	r30, r18
 132:	e0 50       	subi	r30, 0x00	; 0
 134:	f0 40       	sbci	r31, 0x00	; 0
 136:	14 91       	lpm	r17, Z
 138:	f9 01       	movw	r30, r18
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	f0 40       	sbci	r31, 0x00	; 0
 13e:	04 91       	lpm	r16, Z
 140:	00 23       	and	r16, r16
 142:	01 f0       	breq	.+0      	; 0x144 <digitalWrite+0x2e>
 144:	88 23       	and	r24, r24
 146:	01 f0       	breq	.+0      	; 0x148 <digitalWrite+0x32>
 148:	69 83       	std	Y+1, r22	; 0x01
 14a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 14e:	69 81       	ldd	r22, Y+1	; 0x01
 150:	e0 2f       	mov	r30, r16
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	f0 40       	sbci	r31, 0x00	; 0
 15c:	a5 91       	lpm	r26, Z+
 15e:	b4 91       	lpm	r27, Z
 160:	9f b7       	in	r25, 0x3f	; 63
 162:	f8 94       	cli
 164:	8c 91       	ld	r24, X
 166:	61 11       	cpse	r22, r1
 168:	00 c0       	rjmp	.+0      	; 0x16a <digitalWrite+0x54>
 16a:	10 95       	com	r17
 16c:	81 23       	and	r24, r17
 16e:	00 c0       	rjmp	.+0      	; 0x170 <digitalWrite+0x5a>
 170:	81 2b       	or	r24, r17
 172:	8c 93       	st	X, r24
 174:	9f bf       	out	0x3f, r25	; 63
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

Disassembly of section .text.digitalRead:

00000298 <digitalRead>:
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	e0 50       	subi	r30, 0x00	; 0
 2a4:	f0 40       	sbci	r31, 0x00	; 0
 2a6:	84 91       	lpm	r24, Z
 2a8:	f9 01       	movw	r30, r18
 2aa:	e0 50       	subi	r30, 0x00	; 0
 2ac:	f0 40       	sbci	r31, 0x00	; 0
 2ae:	d4 91       	lpm	r29, Z
 2b0:	f9 01       	movw	r30, r18
 2b2:	e0 50       	subi	r30, 0x00	; 0
 2b4:	f0 40       	sbci	r31, 0x00	; 0
 2b6:	c4 91       	lpm	r28, Z
 2b8:	cc 23       	and	r28, r28
 2ba:	01 f0       	breq	.+0      	; 0x2bc <digitalRead+0x24>
 2bc:	81 11       	cpse	r24, r1
 2be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2c2:	ec 2f       	mov	r30, r28
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	e0 50       	subi	r30, 0x00	; 0
 2cc:	f0 40       	sbci	r31, 0x00	; 0
 2ce:	a5 91       	lpm	r26, Z+
 2d0:	b4 91       	lpm	r27, Z
 2d2:	2c 91       	ld	r18, X
 2d4:	2d 23       	and	r18, r29
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 f4       	brne	.+0      	; 0x2dc <digitalRead+0x44>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <digitalRead+0x48>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000078c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f24  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.pulseIn 0000010a  00000000  00000000  000016e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000012  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	fc 01       	movw	r30, r24
  14:	e0 50       	subi	r30, 0x00	; 0
  16:	f0 40       	sbci	r31, 0x00	; 0
  18:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
  1a:	fc 01       	movw	r30, r24
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0
  20:	74 91       	lpm	r23, Z
	uint8_t stateMask = (state ? bit : 0);
  22:	61 11       	cpse	r22, r1
  24:	00 c0       	rjmp	.+0      	; 0x26 <pulseIn+0x26>
  26:	c0 e0       	ldi	r28, 0x00	; 0
  28:	00 c0       	rjmp	.+0      	; 0x2a <pulseIn+0x2a>
  2a:	cd 2f       	mov	r28, r29
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  2c:	da 01       	movw	r26, r20
  2e:	c9 01       	movw	r24, r18
  30:	bf 70       	andi	r27, 0x0F	; 15
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  32:	67 2f       	mov	r22, r23
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	66 0f       	add	r22, r22
  38:	77 1f       	adc	r23, r23
  3a:	60 50       	subi	r22, 0x00	; 0
  3c:	70 40       	sbci	r23, 0x00	; 0
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  3e:	00 e0       	ldi	r16, 0x00	; 0
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	98 01       	movw	r18, r16
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  44:	fb 01       	movw	r30, r22
  46:	e5 90       	lpm	r14, Z+
  48:	f4 90       	lpm	r15, Z
  4a:	f7 01       	movw	r30, r14
  4c:	40 81       	ld	r20, Z
  4e:	4d 23       	and	r20, r29
  50:	4c 13       	cpse	r20, r28
  52:	00 c0       	rjmp	.+0      	; 0x54 <pulseIn+0x54>
		if (numloops++ == maxloops)
  54:	68 01       	movw	r12, r16
  56:	79 01       	movw	r14, r18
  58:	4f ef       	ldi	r20, 0xFF	; 255
  5a:	c4 1a       	sub	r12, r20
  5c:	d4 0a       	sbc	r13, r20
  5e:	e4 0a       	sbc	r14, r20
  60:	f4 0a       	sbc	r15, r20
  62:	08 17       	cp	r16, r24
  64:	19 07       	cpc	r17, r25
  66:	2a 07       	cpc	r18, r26
  68:	3b 07       	cpc	r19, r27
  6a:	01 f4       	brne	.+0      	; 0x6c <pulseIn+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <pulseIn+0x6e>
  6e:	97 01       	movw	r18, r14
  70:	86 01       	movw	r16, r12
  72:	00 c0       	rjmp	.+0      	; 0x74 <pulseIn+0x74>
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
  74:	68 01       	movw	r12, r16
  76:	79 01       	movw	r14, r18
  78:	ff ef       	ldi	r31, 0xFF	; 255
  7a:	cf 1a       	sub	r12, r31
  7c:	df 0a       	sbc	r13, r31
  7e:	ef 0a       	sbc	r14, r31
  80:	ff 0a       	sbc	r15, r31
  82:	08 17       	cp	r16, r24
  84:	19 07       	cpc	r17, r25
  86:	2a 07       	cpc	r18, r26
  88:	3b 07       	cpc	r19, r27
  8a:	01 f0       	breq	.+0      	; 0x8c <pulseIn+0x8c>
  8c:	97 01       	movw	r18, r14
  8e:	86 01       	movw	r16, r12
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
  90:	fb 01       	movw	r30, r22
  92:	e5 90       	lpm	r14, Z+
  94:	f4 90       	lpm	r15, Z
  96:	f7 01       	movw	r30, r14
  98:	40 81       	ld	r20, Z
  9a:	4d 23       	and	r20, r29
  9c:	4c 13       	cpse	r20, r28
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <pulseIn+0xa0>
  a0:	80 1b       	sub	r24, r16
  a2:	91 0b       	sbc	r25, r17
  a4:	a2 0b       	sbc	r26, r18
  a6:	b3 0b       	sbc	r27, r19
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	a9 01       	movw	r20, r18
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  ae:	fb 01       	movw	r30, r22
  b0:	e5 90       	lpm	r14, Z+
  b2:	f4 90       	lpm	r15, Z
  b4:	f7 01       	movw	r30, r14
  b6:	f0 80       	ld	r15, Z
  b8:	fd 22       	and	r15, r29
  ba:	fc 12       	cpse	r15, r28
  bc:	00 c0       	rjmp	.+0      	; 0xbe <pulseIn+0xbe>
		if (numloops++ == maxloops)
  be:	28 17       	cp	r18, r24
  c0:	39 07       	cpc	r19, r25
  c2:	4a 07       	cpc	r20, r26
  c4:	5b 07       	cpc	r21, r27
  c6:	01 f0       	breq	.+0      	; 0xc8 <pulseIn+0xc8>
			return 0;
		width++;
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	4f 4f       	sbci	r20, 0xFF	; 255
  ce:	5f 4f       	sbci	r21, 0xFF	; 255
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <pulseIn+0xd2>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
  d2:	a5 e1       	ldi	r26, 0x15	; 21
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  da:	60 5f       	subi	r22, 0xF0	; 240
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	8f 4f       	sbci	r24, 0xFF	; 255
  e0:	9f 4f       	sbci	r25, 0xFF	; 255
  e2:	24 e0       	ldi	r18, 0x04	; 4
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	77 95       	ror	r23
  ea:	67 95       	ror	r22
  ec:	2a 95       	dec	r18
  ee:	01 f4       	brne	.+0      	; 0xf0 <pulseIn+0xf0>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <pulseIn+0xf2>
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	cb 01       	movw	r24, r22
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	ff 90       	pop	r15
 102:	ef 90       	pop	r14
 104:	df 90       	pop	r13
 106:	cf 90       	pop	r12
 108:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007b0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f5b  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.shiftIn 0000006a  00000000  00000000  0000173f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.shiftOut 0000007e  00000000  00000000  000017a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .comment      00000012  00000000  00000000  00001827  2**0
                  CONTENTS, READONLY

Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	d8 2e       	mov	r13, r24
  12:	e6 2e       	mov	r14, r22
  14:	c4 2e       	mov	r12, r20
  16:	c7 e0       	ldi	r28, 0x07	; 7
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	f1 2c       	mov	r15, r1
  1c:	07 e0       	ldi	r16, 0x07	; 7
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	61 e0       	ldi	r22, 0x01	; 1
  22:	8e 2d       	mov	r24, r14
  24:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  28:	8d 2d       	mov	r24, r13
  2a:	c1 10       	cpse	r12, r1
  2c:	00 c0       	rjmp	.+0      	; 0x2e <shiftIn+0x2e>
  2e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
			digitalWrite(dataPin, !!(val & (1 << i)));
  32:	98 01       	movw	r18, r16
  34:	2c 1b       	sub	r18, r28
  36:	3d 0b       	sbc	r19, r29
  38:	00 c0       	rjmp	.+0      	; 0x3a <shiftIn+0x3a>
  3a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  3e:	2c 2f       	mov	r18, r28
  40:	00 c0       	rjmp	.+0      	; 0x42 <shiftIn+0x42>
  42:	88 0f       	add	r24, r24
  44:	2a 95       	dec	r18
  46:	02 f4       	brpl	.+0      	; 0x48 <shiftIn+0x48>
  48:	f8 2a       	or	r15, r24
  4a:	60 e0       	ldi	r22, 0x00	; 0
  4c:	8e 2d       	mov	r24, r14
  4e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  52:	21 97       	sbiw	r28, 0x01	; 1
  54:	00 f4       	brcc	.+0      	; 0x56 <shiftIn+0x56>
			
		digitalWrite(clockPin, HIGH);
  56:	8f 2d       	mov	r24, r15
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
		digitalWrite(clockPin, LOW);		
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	df 90       	pop	r13
  66:	cf 90       	pop	r12
  68:	08 95       	ret

Disassembly of section .text.shiftOut:

0000006a <shiftOut>:
	}
}
  6a:	bf 92       	push	r11
  6c:	cf 92       	push	r12
  6e:	df 92       	push	r13
  70:	ef 92       	push	r14
  72:	ff 92       	push	r15
  74:	0f 93       	push	r16
  76:	1f 93       	push	r17
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	c8 2e       	mov	r12, r24
  7e:	d6 2e       	mov	r13, r22
  80:	b4 2e       	mov	r11, r20
  82:	c7 e0       	ldi	r28, 0x07	; 7
  84:	d0 e0       	ldi	r29, 0x00	; 0
  86:	02 2f       	mov	r16, r18
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	87 e0       	ldi	r24, 0x07	; 7
  8c:	e8 2e       	mov	r14, r24
  8e:	f1 2c       	mov	r15, r1
  90:	b1 10       	cpse	r11, r1
  92:	00 c0       	rjmp	.+0      	; 0x94 <shiftOut+0x2a>
  94:	f7 01       	movw	r30, r14
  96:	ec 1b       	sub	r30, r28
  98:	fd 0b       	sbc	r31, r29
  9a:	b8 01       	movw	r22, r16
  9c:	00 c0       	rjmp	.+0      	; 0x9e <shiftOut+0x34>
  9e:	75 95       	asr	r23
  a0:	67 95       	ror	r22
  a2:	ea 95       	dec	r30
  a4:	02 f4       	brpl	.+0      	; 0xa6 <shiftOut+0x3c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <shiftOut+0x3e>
  a8:	b8 01       	movw	r22, r16
  aa:	0c 2e       	mov	r0, r28
  ac:	00 c0       	rjmp	.+0      	; 0xae <shiftOut+0x44>
  ae:	75 95       	asr	r23
  b0:	67 95       	ror	r22
  b2:	0a 94       	dec	r0
  b4:	02 f4       	brpl	.+0      	; 0xb6 <shiftOut+0x4c>
  b6:	61 70       	andi	r22, 0x01	; 1
  b8:	77 27       	eor	r23, r23
  ba:	8c 2d       	mov	r24, r12
  bc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	8d 2d       	mov	r24, r13
  c4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	8d 2d       	mov	r24, r13
  cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  d0:	21 97       	sbiw	r28, 0x01	; 1
  d2:	00 f4       	brcc	.+0      	; 0xd4 <shiftOut+0x6a>
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	1f 91       	pop	r17
  da:	0f 91       	pop	r16
  dc:	ff 90       	pop	r15
  de:	ef 90       	pop	r14
  e0:	df 90       	pop	r13
  e2:	cf 90       	pop	r12
  e4:	bf 90       	pop	r11
  e6:	08 95       	ret
